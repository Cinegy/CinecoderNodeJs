

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 8.00.0603 */
/* at Wed Oct 11 15:55:24 2017
 */
/* Compiler settings for Cinecoder.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 8.00.0603 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __Cinecoder_h_h__
#define __Cinecoder_h_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ICC_ClassFactory_FWD_DEFINED__
#define __ICC_ClassFactory_FWD_DEFINED__
typedef interface ICC_ClassFactory ICC_ClassFactory;

#endif 	/* __ICC_ClassFactory_FWD_DEFINED__ */


#ifndef __ICC_Schema_FWD_DEFINED__
#define __ICC_Schema_FWD_DEFINED__
typedef interface ICC_Schema ICC_Schema;

#endif 	/* __ICC_Schema_FWD_DEFINED__ */


#ifndef __ICC_ClassCreator_FWD_DEFINED__
#define __ICC_ClassCreator_FWD_DEFINED__
typedef interface ICC_ClassCreator ICC_ClassCreator;

#endif 	/* __ICC_ClassCreator_FWD_DEFINED__ */


#ifndef __ICC_ErrorHandler_FWD_DEFINED__
#define __ICC_ErrorHandler_FWD_DEFINED__
typedef interface ICC_ErrorHandler ICC_ErrorHandler;

#endif 	/* __ICC_ErrorHandler_FWD_DEFINED__ */


#ifndef __ICC_ErrorHandlerGetter_FWD_DEFINED__
#define __ICC_ErrorHandlerGetter_FWD_DEFINED__
typedef interface ICC_ErrorHandlerGetter ICC_ErrorHandlerGetter;

#endif 	/* __ICC_ErrorHandlerGetter_FWD_DEFINED__ */


#ifndef __ICC_ErrorHandlerProp_FWD_DEFINED__
#define __ICC_ErrorHandlerProp_FWD_DEFINED__
typedef interface ICC_ErrorHandlerProp ICC_ErrorHandlerProp;

#endif 	/* __ICC_ErrorHandlerProp_FWD_DEFINED__ */


#ifndef __ICC_ClassFactoryProvider_FWD_DEFINED__
#define __ICC_ClassFactoryProvider_FWD_DEFINED__
typedef interface ICC_ClassFactoryProvider ICC_ClassFactoryProvider;

#endif 	/* __ICC_ClassFactoryProvider_FWD_DEFINED__ */


#ifndef __ICC_PluginDescr_FWD_DEFINED__
#define __ICC_PluginDescr_FWD_DEFINED__
typedef interface ICC_PluginDescr ICC_PluginDescr;

#endif 	/* __ICC_PluginDescr_FWD_DEFINED__ */


#ifndef __ICC_Object_FWD_DEFINED__
#define __ICC_Object_FWD_DEFINED__
typedef interface ICC_Object ICC_Object;

#endif 	/* __ICC_Object_FWD_DEFINED__ */


#ifndef __ICC_Settings_FWD_DEFINED__
#define __ICC_Settings_FWD_DEFINED__
typedef interface ICC_Settings ICC_Settings;

#endif 	/* __ICC_Settings_FWD_DEFINED__ */


#ifndef __ICC_StreamProcessor_FWD_DEFINED__
#define __ICC_StreamProcessor_FWD_DEFINED__
typedef interface ICC_StreamProcessor ICC_StreamProcessor;

#endif 	/* __ICC_StreamProcessor_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamProducer_FWD_DEFINED__
#define __ICC_ByteStreamProducer_FWD_DEFINED__
typedef interface ICC_ByteStreamProducer ICC_ByteStreamProducer;

#endif 	/* __ICC_ByteStreamProducer_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamConsumer_FWD_DEFINED__
#define __ICC_ByteStreamConsumer_FWD_DEFINED__
typedef interface ICC_ByteStreamConsumer ICC_ByteStreamConsumer;

#endif 	/* __ICC_ByteStreamConsumer_FWD_DEFINED__ */


#ifndef __ICC_Breakable_FWD_DEFINED__
#define __ICC_Breakable_FWD_DEFINED__
typedef interface ICC_Breakable ICC_Breakable;

#endif 	/* __ICC_Breakable_FWD_DEFINED__ */


#ifndef __ICC_Decoder_FWD_DEFINED__
#define __ICC_Decoder_FWD_DEFINED__
typedef interface ICC_Decoder ICC_Decoder;

#endif 	/* __ICC_Decoder_FWD_DEFINED__ */


#ifndef __ICC_Encoder_FWD_DEFINED__
#define __ICC_Encoder_FWD_DEFINED__
typedef interface ICC_Encoder ICC_Encoder;

#endif 	/* __ICC_Encoder_FWD_DEFINED__ */


#ifndef __ICC_Transcoder_FWD_DEFINED__
#define __ICC_Transcoder_FWD_DEFINED__
typedef interface ICC_Transcoder ICC_Transcoder;

#endif 	/* __ICC_Transcoder_FWD_DEFINED__ */


#ifndef __ICC_Splitter_FWD_DEFINED__
#define __ICC_Splitter_FWD_DEFINED__
typedef interface ICC_Splitter ICC_Splitter;

#endif 	/* __ICC_Splitter_FWD_DEFINED__ */


#ifndef __ICC_Cutter_FWD_DEFINED__
#define __ICC_Cutter_FWD_DEFINED__
typedef interface ICC_Cutter ICC_Cutter;

#endif 	/* __ICC_Cutter_FWD_DEFINED__ */


#ifndef __ICC_IndexWriter_FWD_DEFINED__
#define __ICC_IndexWriter_FWD_DEFINED__
typedef interface ICC_IndexWriter ICC_IndexWriter;

#endif 	/* __ICC_IndexWriter_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamCallback_FWD_DEFINED__
#define __ICC_ByteStreamCallback_FWD_DEFINED__
typedef interface ICC_ByteStreamCallback ICC_ByteStreamCallback;

#endif 	/* __ICC_ByteStreamCallback_FWD_DEFINED__ */


#ifndef __ICC_DataReadyCallback_FWD_DEFINED__
#define __ICC_DataReadyCallback_FWD_DEFINED__
typedef interface ICC_DataReadyCallback ICC_DataReadyCallback;

#endif 	/* __ICC_DataReadyCallback_FWD_DEFINED__ */


#ifndef __ICC_TimeBaseProp_FWD_DEFINED__
#define __ICC_TimeBaseProp_FWD_DEFINED__
typedef interface ICC_TimeBaseProp ICC_TimeBaseProp;

#endif 	/* __ICC_TimeBaseProp_FWD_DEFINED__ */


#ifndef __ICC_InitialTimeCodeProp_FWD_DEFINED__
#define __ICC_InitialTimeCodeProp_FWD_DEFINED__
typedef interface ICC_InitialTimeCodeProp ICC_InitialTimeCodeProp;

#endif 	/* __ICC_InitialTimeCodeProp_FWD_DEFINED__ */


#ifndef __ICC_BitRateProp_FWD_DEFINED__
#define __ICC_BitRateProp_FWD_DEFINED__
typedef interface ICC_BitRateProp ICC_BitRateProp;

#endif 	/* __ICC_BitRateProp_FWD_DEFINED__ */


#ifndef __ICC_FrameRateProp_FWD_DEFINED__
#define __ICC_FrameRateProp_FWD_DEFINED__
typedef interface ICC_FrameRateProp ICC_FrameRateProp;

#endif 	/* __ICC_FrameRateProp_FWD_DEFINED__ */


#ifndef __ICC_BufferAllocator_FWD_DEFINED__
#define __ICC_BufferAllocator_FWD_DEFINED__
typedef interface ICC_BufferAllocator ICC_BufferAllocator;

#endif 	/* __ICC_BufferAllocator_FWD_DEFINED__ */


#ifndef __ICC_StreamRecovery_FWD_DEFINED__
#define __ICC_StreamRecovery_FWD_DEFINED__
typedef interface ICC_StreamRecovery ICC_StreamRecovery;

#endif 	/* __ICC_StreamRecovery_FWD_DEFINED__ */


#ifndef __ICC_ThreadsCountProp_FWD_DEFINED__
#define __ICC_ThreadsCountProp_FWD_DEFINED__
typedef interface ICC_ThreadsCountProp ICC_ThreadsCountProp;

#endif 	/* __ICC_ThreadsCountProp_FWD_DEFINED__ */


#ifndef __ICC_ThreadsAffinityProp_FWD_DEFINED__
#define __ICC_ThreadsAffinityProp_FWD_DEFINED__
typedef interface ICC_ThreadsAffinityProp ICC_ThreadsAffinityProp;

#endif 	/* __ICC_ThreadsAffinityProp_FWD_DEFINED__ */


#ifndef __ICC_ThreadsPriorityProp_FWD_DEFINED__
#define __ICC_ThreadsPriorityProp_FWD_DEFINED__
typedef interface ICC_ThreadsPriorityProp ICC_ThreadsPriorityProp;

#endif 	/* __ICC_ThreadsPriorityProp_FWD_DEFINED__ */


#ifndef __ICC_InputBufferControl_FWD_DEFINED__
#define __ICC_InputBufferControl_FWD_DEFINED__
typedef interface ICC_InputBufferControl ICC_InputBufferControl;

#endif 	/* __ICC_InputBufferControl_FWD_DEFINED__ */


#ifndef __ICC_ReferenceAlisProp_FWD_DEFINED__
#define __ICC_ReferenceAlisProp_FWD_DEFINED__
typedef interface ICC_ReferenceAlisProp ICC_ReferenceAlisProp;

#endif 	/* __ICC_ReferenceAlisProp_FWD_DEFINED__ */


#ifndef __ICC_ProcessDataPolicyProp_FWD_DEFINED__
#define __ICC_ProcessDataPolicyProp_FWD_DEFINED__
typedef interface ICC_ProcessDataPolicyProp ICC_ProcessDataPolicyProp;

#endif 	/* __ICC_ProcessDataPolicyProp_FWD_DEFINED__ */


#ifndef __ICC_AddUserDataCtrl_FWD_DEFINED__
#define __ICC_AddUserDataCtrl_FWD_DEFINED__
typedef interface ICC_AddUserDataCtrl ICC_AddUserDataCtrl;

#endif 	/* __ICC_AddUserDataCtrl_FWD_DEFINED__ */


#ifndef __ICC_ConcurrencyLevelProp_FWD_DEFINED__
#define __ICC_ConcurrencyLevelProp_FWD_DEFINED__
typedef interface ICC_ConcurrencyLevelProp ICC_ConcurrencyLevelProp;

#endif 	/* __ICC_ConcurrencyLevelProp_FWD_DEFINED__ */


#ifndef __ICC_DataWriter_FWD_DEFINED__
#define __ICC_DataWriter_FWD_DEFINED__
typedef interface ICC_DataWriter ICC_DataWriter;

#endif 	/* __ICC_DataWriter_FWD_DEFINED__ */


#ifndef __ICC_DataWriterEx_FWD_DEFINED__
#define __ICC_DataWriterEx_FWD_DEFINED__
typedef interface ICC_DataWriterEx ICC_DataWriterEx;

#endif 	/* __ICC_DataWriterEx_FWD_DEFINED__ */


#ifndef __ICC_DataReader_FWD_DEFINED__
#define __ICC_DataReader_FWD_DEFINED__
typedef interface ICC_DataReader ICC_DataReader;

#endif 	/* __ICC_DataReader_FWD_DEFINED__ */


#ifndef __ICC_DataReaderEx_FWD_DEFINED__
#define __ICC_DataReaderEx_FWD_DEFINED__
typedef interface ICC_DataReaderEx ICC_DataReaderEx;

#endif 	/* __ICC_DataReaderEx_FWD_DEFINED__ */


#ifndef __ICC_StreamPositionProp_FWD_DEFINED__
#define __ICC_StreamPositionProp_FWD_DEFINED__
typedef interface ICC_StreamPositionProp ICC_StreamPositionProp;

#endif 	/* __ICC_StreamPositionProp_FWD_DEFINED__ */


#ifndef __ICC_StreamLengthProp_FWD_DEFINED__
#define __ICC_StreamLengthProp_FWD_DEFINED__
typedef interface ICC_StreamLengthProp ICC_StreamLengthProp;

#endif 	/* __ICC_StreamLengthProp_FWD_DEFINED__ */


#ifndef __ICC_InputStream_FWD_DEFINED__
#define __ICC_InputStream_FWD_DEFINED__
typedef interface ICC_InputStream ICC_InputStream;

#endif 	/* __ICC_InputStream_FWD_DEFINED__ */


#ifndef __ICC_File_FWD_DEFINED__
#define __ICC_File_FWD_DEFINED__
typedef interface ICC_File ICC_File;

#endif 	/* __ICC_File_FWD_DEFINED__ */


#ifndef __ICC_InputFile_FWD_DEFINED__
#define __ICC_InputFile_FWD_DEFINED__
typedef interface ICC_InputFile ICC_InputFile;

#endif 	/* __ICC_InputFile_FWD_DEFINED__ */


#ifndef __ICC_OutputFile_FWD_DEFINED__
#define __ICC_OutputFile_FWD_DEFINED__
typedef interface ICC_OutputFile ICC_OutputFile;

#endif 	/* __ICC_OutputFile_FWD_DEFINED__ */


#ifndef __ICC_ElementaryStreamInfo_FWD_DEFINED__
#define __ICC_ElementaryStreamInfo_FWD_DEFINED__
typedef interface ICC_ElementaryStreamInfo ICC_ElementaryStreamInfo;

#endif 	/* __ICC_ElementaryStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_ElementaryStreamSettings_FWD_DEFINED__
#define __ICC_ElementaryStreamSettings_FWD_DEFINED__
typedef interface ICC_ElementaryStreamSettings ICC_ElementaryStreamSettings;

#endif 	/* __ICC_ElementaryStreamSettings_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamDataInfo_FWD_DEFINED__
#define __ICC_ByteStreamDataInfo_FWD_DEFINED__
typedef interface ICC_ByteStreamDataInfo ICC_ByteStreamDataInfo;

#endif 	/* __ICC_ByteStreamDataInfo_FWD_DEFINED__ */


#ifndef __ICC_ElementaryDataInfo_FWD_DEFINED__
#define __ICC_ElementaryDataInfo_FWD_DEFINED__
typedef interface ICC_ElementaryDataInfo ICC_ElementaryDataInfo;

#endif 	/* __ICC_ElementaryDataInfo_FWD_DEFINED__ */


#ifndef __ICC_CodedStreamHeaderProp_FWD_DEFINED__
#define __ICC_CodedStreamHeaderProp_FWD_DEFINED__
typedef interface ICC_CodedStreamHeaderProp ICC_CodedStreamHeaderProp;

#endif 	/* __ICC_CodedStreamHeaderProp_FWD_DEFINED__ */


#ifndef __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__
#define __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__
typedef interface ICC_ExecutiveDeviceMaskProp ICC_ExecutiveDeviceMaskProp;

#endif 	/* __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__ */


#ifndef __ICC_CollectionHandler_FWD_DEFINED__
#define __ICC_CollectionHandler_FWD_DEFINED__
typedef interface ICC_CollectionHandler ICC_CollectionHandler;

#endif 	/* __ICC_CollectionHandler_FWD_DEFINED__ */


#ifndef __ICC_ReadOnlyCollection_FWD_DEFINED__
#define __ICC_ReadOnlyCollection_FWD_DEFINED__
typedef interface ICC_ReadOnlyCollection ICC_ReadOnlyCollection;

#endif 	/* __ICC_ReadOnlyCollection_FWD_DEFINED__ */


#ifndef __ICC_Collection_FWD_DEFINED__
#define __ICC_Collection_FWD_DEFINED__
typedef interface ICC_Collection ICC_Collection;

#endif 	/* __ICC_Collection_FWD_DEFINED__ */


#ifndef __ICC_CollectionChanged_FWD_DEFINED__
#define __ICC_CollectionChanged_FWD_DEFINED__
typedef interface ICC_CollectionChanged ICC_CollectionChanged;

#endif 	/* __ICC_CollectionChanged_FWD_DEFINED__ */


#ifndef __ICC_CollectionFilter_FWD_DEFINED__
#define __ICC_CollectionFilter_FWD_DEFINED__
typedef interface ICC_CollectionFilter ICC_CollectionFilter;

#endif 	/* __ICC_CollectionFilter_FWD_DEFINED__ */


#ifndef __ICC_AudioStreamInfo_FWD_DEFINED__
#define __ICC_AudioStreamInfo_FWD_DEFINED__
typedef interface ICC_AudioStreamInfo ICC_AudioStreamInfo;

#endif 	/* __ICC_AudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_AudioEncoderSettings_FWD_DEFINED__
#define __ICC_AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_AudioEncoderSettings ICC_AudioEncoderSettings;

#endif 	/* __ICC_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_AudioFrameInfo_FWD_DEFINED__
#define __ICC_AudioFrameInfo_FWD_DEFINED__
typedef interface ICC_AudioFrameInfo ICC_AudioFrameInfo;

#endif 	/* __ICC_AudioFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_AudioProducer_FWD_DEFINED__
#define __ICC_AudioProducer_FWD_DEFINED__
typedef interface ICC_AudioProducer ICC_AudioProducer;

#endif 	/* __ICC_AudioProducer_FWD_DEFINED__ */


#ifndef __ICC_AudioConsumer_FWD_DEFINED__
#define __ICC_AudioConsumer_FWD_DEFINED__
typedef interface ICC_AudioConsumer ICC_AudioConsumer;

#endif 	/* __ICC_AudioConsumer_FWD_DEFINED__ */


#ifndef __ICC_AudioProducerExt_FWD_DEFINED__
#define __ICC_AudioProducerExt_FWD_DEFINED__
typedef interface ICC_AudioProducerExt ICC_AudioProducerExt;

#endif 	/* __ICC_AudioProducerExt_FWD_DEFINED__ */


#ifndef __ICC_AudioConsumerExt_FWD_DEFINED__
#define __ICC_AudioConsumerExt_FWD_DEFINED__
typedef interface ICC_AudioConsumerExt ICC_AudioConsumerExt;

#endif 	/* __ICC_AudioConsumerExt_FWD_DEFINED__ */


#ifndef __ICC_AudioDecoder_FWD_DEFINED__
#define __ICC_AudioDecoder_FWD_DEFINED__
typedef interface ICC_AudioDecoder ICC_AudioDecoder;

#endif 	/* __ICC_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_AudioEncoder_FWD_DEFINED__
#define __ICC_AudioEncoder_FWD_DEFINED__
typedef interface ICC_AudioEncoder ICC_AudioEncoder;

#endif 	/* __ICC_AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_AudioSplitter_FWD_DEFINED__
#define __ICC_AudioSplitter_FWD_DEFINED__
typedef interface ICC_AudioSplitter ICC_AudioSplitter;

#endif 	/* __ICC_AudioSplitter_FWD_DEFINED__ */


#ifndef __ICC_AudioFilter_FWD_DEFINED__
#define __ICC_AudioFilter_FWD_DEFINED__
typedef interface ICC_AudioFilter ICC_AudioFilter;

#endif 	/* __ICC_AudioFilter_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioStreamInfo_FWD_DEFINED__
#define __ICC_MpegAudioStreamInfo_FWD_DEFINED__
typedef interface ICC_MpegAudioStreamInfo ICC_MpegAudioStreamInfo;

#endif 	/* __ICC_MpegAudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioFrameInfo_FWD_DEFINED__
#define __ICC_MpegAudioFrameInfo_FWD_DEFINED__
typedef interface ICC_MpegAudioFrameInfo ICC_MpegAudioFrameInfo;

#endif 	/* __ICC_MpegAudioFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioEncoderSettings_FWD_DEFINED__
#define __ICC_MpegAudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_MpegAudioEncoderSettings ICC_MpegAudioEncoderSettings;

#endif 	/* __ICC_MpegAudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioDecoder_FWD_DEFINED__
#define __ICC_MpegAudioDecoder_FWD_DEFINED__
typedef interface ICC_MpegAudioDecoder ICC_MpegAudioDecoder;

#endif 	/* __ICC_MpegAudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioEncoder_FWD_DEFINED__
#define __ICC_MpegAudioEncoder_FWD_DEFINED__
typedef interface ICC_MpegAudioEncoder ICC_MpegAudioEncoder;

#endif 	/* __ICC_MpegAudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioSplitter_FWD_DEFINED__
#define __ICC_MpegAudioSplitter_FWD_DEFINED__
typedef interface ICC_MpegAudioSplitter ICC_MpegAudioSplitter;

#endif 	/* __ICC_MpegAudioSplitter_FWD_DEFINED__ */


#ifndef __ICC_Aes3AudioStreamInfo_FWD_DEFINED__
#define __ICC_Aes3AudioStreamInfo_FWD_DEFINED__
typedef interface ICC_Aes3AudioStreamInfo ICC_Aes3AudioStreamInfo;

#endif 	/* __ICC_Aes3AudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_Aes3AudioEncoderSettings_FWD_DEFINED__
#define __ICC_Aes3AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_Aes3AudioEncoderSettings ICC_Aes3AudioEncoderSettings;

#endif 	/* __ICC_Aes3AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_Aes3AudioFrameInfo_FWD_DEFINED__
#define __ICC_Aes3AudioFrameInfo_FWD_DEFINED__
typedef interface ICC_Aes3AudioFrameInfo ICC_Aes3AudioFrameInfo;

#endif 	/* __ICC_Aes3AudioFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_Aes3AudioDecoder_FWD_DEFINED__
#define __ICC_Aes3AudioDecoder_FWD_DEFINED__
typedef interface ICC_Aes3AudioDecoder ICC_Aes3AudioDecoder;

#endif 	/* __ICC_Aes3AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_Aes3AudioEncoder_FWD_DEFINED__
#define __ICC_Aes3AudioEncoder_FWD_DEFINED__
typedef interface ICC_Aes3AudioEncoder ICC_Aes3AudioEncoder;

#endif 	/* __ICC_Aes3AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioStreamInfo_FWD_DEFINED__
#define __ICC_AAC_AudioStreamInfo_FWD_DEFINED__
typedef interface ICC_AAC_AudioStreamInfo ICC_AAC_AudioStreamInfo;

#endif 	/* __ICC_AAC_AudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioFrameInfo_FWD_DEFINED__
#define __ICC_AAC_AudioFrameInfo_FWD_DEFINED__
typedef interface ICC_AAC_AudioFrameInfo ICC_AAC_AudioFrameInfo;

#endif 	/* __ICC_AAC_AudioFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioStreamSettings_FWD_DEFINED__
#define __ICC_AAC_AudioStreamSettings_FWD_DEFINED__
typedef interface ICC_AAC_AudioStreamSettings ICC_AAC_AudioStreamSettings;

#endif 	/* __ICC_AAC_AudioStreamSettings_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioEncoderSettings_FWD_DEFINED__
#define __ICC_AAC_AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_AAC_AudioEncoderSettings ICC_AAC_AudioEncoderSettings;

#endif 	/* __ICC_AAC_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioDecoder_FWD_DEFINED__
#define __ICC_AAC_AudioDecoder_FWD_DEFINED__
typedef interface ICC_AAC_AudioDecoder ICC_AAC_AudioDecoder;

#endif 	/* __ICC_AAC_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioEncoder_FWD_DEFINED__
#define __ICC_AAC_AudioEncoder_FWD_DEFINED__
typedef interface ICC_AAC_AudioEncoder ICC_AAC_AudioEncoder;

#endif 	/* __ICC_AAC_AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_AAC_AudioSplitter_FWD_DEFINED__
#define __ICC_AAC_AudioSplitter_FWD_DEFINED__
typedef interface ICC_AAC_AudioSplitter ICC_AAC_AudioSplitter;

#endif 	/* __ICC_AAC_AudioSplitter_FWD_DEFINED__ */


#ifndef __ICC_LATM_AAC_AudioDecoder_FWD_DEFINED__
#define __ICC_LATM_AAC_AudioDecoder_FWD_DEFINED__
typedef interface ICC_LATM_AAC_AudioDecoder ICC_LATM_AAC_AudioDecoder;

#endif 	/* __ICC_LATM_AAC_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_LPCM_AudioStreamInfo_FWD_DEFINED__
#define __ICC_LPCM_AudioStreamInfo_FWD_DEFINED__
typedef interface ICC_LPCM_AudioStreamInfo ICC_LPCM_AudioStreamInfo;

#endif 	/* __ICC_LPCM_AudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_LPCM_AudioEncoderSettings_FWD_DEFINED__
#define __ICC_LPCM_AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_LPCM_AudioEncoderSettings ICC_LPCM_AudioEncoderSettings;

#endif 	/* __ICC_LPCM_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_LPCM_AudioDecoder_FWD_DEFINED__
#define __ICC_LPCM_AudioDecoder_FWD_DEFINED__
typedef interface ICC_LPCM_AudioDecoder ICC_LPCM_AudioDecoder;

#endif 	/* __ICC_LPCM_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_LPCM_AudioEncoder_FWD_DEFINED__
#define __ICC_LPCM_AudioEncoder_FWD_DEFINED__
typedef interface ICC_LPCM_AudioEncoder ICC_LPCM_AudioEncoder;

#endif 	/* __ICC_LPCM_AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_BluRay_PCM_AudioDecoder_FWD_DEFINED__
#define __ICC_BluRay_PCM_AudioDecoder_FWD_DEFINED__
typedef interface ICC_BluRay_PCM_AudioDecoder ICC_BluRay_PCM_AudioDecoder;

#endif 	/* __ICC_BluRay_PCM_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioStreamInfo_FWD_DEFINED__
#define __ICC_AC3_AudioStreamInfo_FWD_DEFINED__
typedef interface ICC_AC3_AudioStreamInfo ICC_AC3_AudioStreamInfo;

#endif 	/* __ICC_AC3_AudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioFrameInfo_FWD_DEFINED__
#define __ICC_AC3_AudioFrameInfo_FWD_DEFINED__
typedef interface ICC_AC3_AudioFrameInfo ICC_AC3_AudioFrameInfo;

#endif 	/* __ICC_AC3_AudioFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioEncoderSettings_FWD_DEFINED__
#define __ICC_AC3_AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_AC3_AudioEncoderSettings ICC_AC3_AudioEncoderSettings;

#endif 	/* __ICC_AC3_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioEncoder_FWD_DEFINED__
#define __ICC_AC3_AudioEncoder_FWD_DEFINED__
typedef interface ICC_AC3_AudioEncoder ICC_AC3_AudioEncoder;

#endif 	/* __ICC_AC3_AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioDecoder_FWD_DEFINED__
#define __ICC_AC3_AudioDecoder_FWD_DEFINED__
typedef interface ICC_AC3_AudioDecoder ICC_AC3_AudioDecoder;

#endif 	/* __ICC_AC3_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_AC3_AudioSplitter_FWD_DEFINED__
#define __ICC_AC3_AudioSplitter_FWD_DEFINED__
typedef interface ICC_AC3_AudioSplitter ICC_AC3_AudioSplitter;

#endif 	/* __ICC_AC3_AudioSplitter_FWD_DEFINED__ */


#ifndef __ICC_WavAudioStreamInfo_FWD_DEFINED__
#define __ICC_WavAudioStreamInfo_FWD_DEFINED__
typedef interface ICC_WavAudioStreamInfo ICC_WavAudioStreamInfo;

#endif 	/* __ICC_WavAudioStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_WavAudioEncoderSettings_FWD_DEFINED__
#define __ICC_WavAudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_WavAudioEncoderSettings ICC_WavAudioEncoderSettings;

#endif 	/* __ICC_WavAudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_WavAudioEncoder_FWD_DEFINED__
#define __ICC_WavAudioEncoder_FWD_DEFINED__
typedef interface ICC_WavAudioEncoder ICC_WavAudioEncoder;

#endif 	/* __ICC_WavAudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_VideoStreamInfo_FWD_DEFINED__
#define __ICC_VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_VideoStreamInfo ICC_VideoStreamInfo;

#endif 	/* __ICC_VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoStreamInfoExt_FWD_DEFINED__
#define __ICC_VideoStreamInfoExt_FWD_DEFINED__
typedef interface ICC_VideoStreamInfoExt ICC_VideoStreamInfoExt;

#endif 	/* __ICC_VideoStreamInfoExt_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameInfo_FWD_DEFINED__
#define __ICC_VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_VideoFrameInfo ICC_VideoFrameInfo;

#endif 	/* __ICC_VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameSecondFieldProp_FWD_DEFINED__
#define __ICC_VideoFrameSecondFieldProp_FWD_DEFINED__
typedef interface ICC_VideoFrameSecondFieldProp ICC_VideoFrameSecondFieldProp;

#endif 	/* __ICC_VideoFrameSecondFieldProp_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameUserDataProp_FWD_DEFINED__
#define __ICC_VideoFrameUserDataProp_FWD_DEFINED__
typedef interface ICC_VideoFrameUserDataProp ICC_VideoFrameUserDataProp;

#endif 	/* __ICC_VideoFrameUserDataProp_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameQualityInfo_FWD_DEFINED__
#define __ICC_VideoFrameQualityInfo_FWD_DEFINED__
typedef interface ICC_VideoFrameQualityInfo ICC_VideoFrameQualityInfo;

#endif 	/* __ICC_VideoFrameQualityInfo_FWD_DEFINED__ */


#ifndef __ICC_PsnrCalculationProp_FWD_DEFINED__
#define __ICC_PsnrCalculationProp_FWD_DEFINED__
typedef interface ICC_PsnrCalculationProp ICC_PsnrCalculationProp;

#endif 	/* __ICC_PsnrCalculationProp_FWD_DEFINED__ */


#ifndef __ICC_VideoProducer_FWD_DEFINED__
#define __ICC_VideoProducer_FWD_DEFINED__
typedef interface ICC_VideoProducer ICC_VideoProducer;

#endif 	/* __ICC_VideoProducer_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumer_FWD_DEFINED__
#define __ICC_VideoConsumer_FWD_DEFINED__
typedef interface ICC_VideoConsumer ICC_VideoConsumer;

#endif 	/* __ICC_VideoConsumer_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumerExt_FWD_DEFINED__
#define __ICC_VideoConsumerExt_FWD_DEFINED__
typedef interface ICC_VideoConsumerExt ICC_VideoConsumerExt;

#endif 	/* __ICC_VideoConsumerExt_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumerExtAsync_FWD_DEFINED__
#define __ICC_VideoConsumerExtAsync_FWD_DEFINED__
typedef interface ICC_VideoConsumerExtAsync ICC_VideoConsumerExtAsync;

#endif 	/* __ICC_VideoConsumerExtAsync_FWD_DEFINED__ */


#ifndef __ICC_VideoProducerExt_FWD_DEFINED__
#define __ICC_VideoProducerExt_FWD_DEFINED__
typedef interface ICC_VideoProducerExt ICC_VideoProducerExt;

#endif 	/* __ICC_VideoProducerExt_FWD_DEFINED__ */


#ifndef __ICC_VideoDecoder_FWD_DEFINED__
#define __ICC_VideoDecoder_FWD_DEFINED__
typedef interface ICC_VideoDecoder ICC_VideoDecoder;

#endif 	/* __ICC_VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_VideoEncoder_FWD_DEFINED__
#define __ICC_VideoEncoder_FWD_DEFINED__
typedef interface ICC_VideoEncoder ICC_VideoEncoder;

#endif 	/* __ICC_VideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_VideoSplitter_FWD_DEFINED__
#define __ICC_VideoSplitter_FWD_DEFINED__
typedef interface ICC_VideoSplitter ICC_VideoSplitter;

#endif 	/* __ICC_VideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_VDecFrameOutputOrderProp_FWD_DEFINED__
#define __ICC_VDecFrameOutputOrderProp_FWD_DEFINED__
typedef interface ICC_VDecFrameOutputOrderProp ICC_VDecFrameOutputOrderProp;

#endif 	/* __ICC_VDecFrameOutputOrderProp_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoStreamInfo_FWD_DEFINED__
#define __ICC_MpegVideoStreamInfo_FWD_DEFINED__
typedef interface ICC_MpegVideoStreamInfo ICC_MpegVideoStreamInfo;

#endif 	/* __ICC_MpegVideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoFrameInfo_FWD_DEFINED__
#define __ICC_MpegVideoFrameInfo_FWD_DEFINED__
typedef interface ICC_MpegVideoFrameInfo ICC_MpegVideoFrameInfo;

#endif 	/* __ICC_MpegVideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoDecoder_FWD_DEFINED__
#define __ICC_MpegVideoDecoder_FWD_DEFINED__
typedef interface ICC_MpegVideoDecoder ICC_MpegVideoDecoder;

#endif 	/* __ICC_MpegVideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoEncoder_FWD_DEFINED__
#define __ICC_MpegVideoEncoder_FWD_DEFINED__
typedef interface ICC_MpegVideoEncoder ICC_MpegVideoEncoder;

#endif 	/* __ICC_MpegVideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoEncoderSettings_FWD_DEFINED__
#define __ICC_MpegVideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_MpegVideoEncoderSettings ICC_MpegVideoEncoderSettings;

#endif 	/* __ICC_MpegVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoSplitter_FWD_DEFINED__
#define __ICC_MpegVideoSplitter_FWD_DEFINED__
typedef interface ICC_MpegVideoSplitter ICC_MpegVideoSplitter;

#endif 	/* __ICC_MpegVideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_D10VideoEncoderSettings_FWD_DEFINED__
#define __ICC_D10VideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_D10VideoEncoderSettings ICC_D10VideoEncoderSettings;

#endif 	/* __ICC_D10VideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_D10VideoEncoder_FWD_DEFINED__
#define __ICC_D10VideoEncoder_FWD_DEFINED__
typedef interface ICC_D10VideoEncoder ICC_D10VideoEncoder;

#endif 	/* __ICC_D10VideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_H264VideoStreamInfo_FWD_DEFINED__
#define __ICC_H264VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_H264VideoStreamInfo ICC_H264VideoStreamInfo;

#endif 	/* __ICC_H264VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_H264VideoEncoderSettings_FWD_DEFINED__
#define __ICC_H264VideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_H264VideoEncoderSettings ICC_H264VideoEncoderSettings;

#endif 	/* __ICC_H264VideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_H264VideoFrameInfo_FWD_DEFINED__
#define __ICC_H264VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_H264VideoFrameInfo ICC_H264VideoFrameInfo;

#endif 	/* __ICC_H264VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_H264VideoEncoder_FWD_DEFINED__
#define __ICC_H264VideoEncoder_FWD_DEFINED__
typedef interface ICC_H264VideoEncoder ICC_H264VideoEncoder;

#endif 	/* __ICC_H264VideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_H264VideoDecoder_FWD_DEFINED__
#define __ICC_H264VideoDecoder_FWD_DEFINED__
typedef interface ICC_H264VideoDecoder ICC_H264VideoDecoder;

#endif 	/* __ICC_H264VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_AVC1VideoDecoder_FWD_DEFINED__
#define __ICC_AVC1VideoDecoder_FWD_DEFINED__
typedef interface ICC_AVC1VideoDecoder ICC_AVC1VideoDecoder;

#endif 	/* __ICC_AVC1VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_H264VideoSplitter_FWD_DEFINED__
#define __ICC_H264VideoSplitter_FWD_DEFINED__
typedef interface ICC_H264VideoSplitter ICC_H264VideoSplitter;

#endif 	/* __ICC_H264VideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoStreamInfo_FWD_DEFINED__
#define __ICC_HEVCVideoStreamInfo_FWD_DEFINED__
typedef interface ICC_HEVCVideoStreamInfo ICC_HEVCVideoStreamInfo;

#endif 	/* __ICC_HEVCVideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoFrameInfo_FWD_DEFINED__
#define __ICC_HEVCVideoFrameInfo_FWD_DEFINED__
typedef interface ICC_HEVCVideoFrameInfo ICC_HEVCVideoFrameInfo;

#endif 	/* __ICC_HEVCVideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoDecoder_FWD_DEFINED__
#define __ICC_HEVCVideoDecoder_FWD_DEFINED__
typedef interface ICC_HEVCVideoDecoder ICC_HEVCVideoDecoder;

#endif 	/* __ICC_HEVCVideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoSplitter_FWD_DEFINED__
#define __ICC_HEVCVideoSplitter_FWD_DEFINED__
typedef interface ICC_HEVCVideoSplitter ICC_HEVCVideoSplitter;

#endif 	/* __ICC_HEVCVideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoEncoder_FWD_DEFINED__
#define __ICC_HEVCVideoEncoder_FWD_DEFINED__
typedef interface ICC_HEVCVideoEncoder ICC_HEVCVideoEncoder;

#endif 	/* __ICC_HEVCVideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_HEVCVideoEncoderSettings_FWD_DEFINED__
#define __ICC_HEVCVideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_HEVCVideoEncoderSettings ICC_HEVCVideoEncoderSettings;

#endif 	/* __ICC_HEVCVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_AVCIntraEncoderSettings_FWD_DEFINED__
#define __ICC_AVCIntraEncoderSettings_FWD_DEFINED__
typedef interface ICC_AVCIntraEncoderSettings ICC_AVCIntraEncoderSettings;

#endif 	/* __ICC_AVCIntraEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_AVCIntraEncoder_FWD_DEFINED__
#define __ICC_AVCIntraEncoder_FWD_DEFINED__
typedef interface ICC_AVCIntraEncoder ICC_AVCIntraEncoder;

#endif 	/* __ICC_AVCIntraEncoder_FWD_DEFINED__ */


#ifndef __ICC_AVCIntraDecoder_FWD_DEFINED__
#define __ICC_AVCIntraDecoder_FWD_DEFINED__
typedef interface ICC_AVCIntraDecoder ICC_AVCIntraDecoder;

#endif 	/* __ICC_AVCIntraDecoder_FWD_DEFINED__ */


#ifndef __ICC_AVCIntraDecoder2_FWD_DEFINED__
#define __ICC_AVCIntraDecoder2_FWD_DEFINED__
typedef interface ICC_AVCIntraDecoder2 ICC_AVCIntraDecoder2;

#endif 	/* __ICC_AVCIntraDecoder2_FWD_DEFINED__ */


#ifndef __ICC_Mpeg4VideoStreamInfo_FWD_DEFINED__
#define __ICC_Mpeg4VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_Mpeg4VideoStreamInfo ICC_Mpeg4VideoStreamInfo;

#endif 	/* __ICC_Mpeg4VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_Mpeg4VideoFrameInfo_FWD_DEFINED__
#define __ICC_Mpeg4VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_Mpeg4VideoFrameInfo ICC_Mpeg4VideoFrameInfo;

#endif 	/* __ICC_Mpeg4VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_Mpeg4VideoDecoder_FWD_DEFINED__
#define __ICC_Mpeg4VideoDecoder_FWD_DEFINED__
typedef interface ICC_Mpeg4VideoDecoder ICC_Mpeg4VideoDecoder;

#endif 	/* __ICC_Mpeg4VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_J2K_VideoStreamInfo_FWD_DEFINED__
#define __ICC_J2K_VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_J2K_VideoStreamInfo ICC_J2K_VideoStreamInfo;

#endif 	/* __ICC_J2K_VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_J2K_VideoFrameInfo_FWD_DEFINED__
#define __ICC_J2K_VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_J2K_VideoFrameInfo ICC_J2K_VideoFrameInfo;

#endif 	/* __ICC_J2K_VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_J2K_VideoSplitter_FWD_DEFINED__
#define __ICC_J2K_VideoSplitter_FWD_DEFINED__
typedef interface ICC_J2K_VideoSplitter ICC_J2K_VideoSplitter;

#endif 	/* __ICC_J2K_VideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_J2K_VideoDecoder_FWD_DEFINED__
#define __ICC_J2K_VideoDecoder_FWD_DEFINED__
typedef interface ICC_J2K_VideoDecoder ICC_J2K_VideoDecoder;

#endif 	/* __ICC_J2K_VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_SonyRaw_VideoStreamInfo_FWD_DEFINED__
#define __ICC_SonyRaw_VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_SonyRaw_VideoStreamInfo ICC_SonyRaw_VideoStreamInfo;

#endif 	/* __ICC_SonyRaw_VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_SonyRaw_VideoFrameInfo_FWD_DEFINED__
#define __ICC_SonyRaw_VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_SonyRaw_VideoFrameInfo ICC_SonyRaw_VideoFrameInfo;

#endif 	/* __ICC_SonyRaw_VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_SonyRaw_VideoDecoder_FWD_DEFINED__
#define __ICC_SonyRaw_VideoDecoder_FWD_DEFINED__
typedef interface ICC_SonyRaw_VideoDecoder ICC_SonyRaw_VideoDecoder;

#endif 	/* __ICC_SonyRaw_VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoStreamInfo_FWD_DEFINED__
#define __ICC_DanielVideoStreamInfo_FWD_DEFINED__
typedef interface ICC_DanielVideoStreamInfo ICC_DanielVideoStreamInfo;

#endif 	/* __ICC_DanielVideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoFrameInfo_FWD_DEFINED__
#define __ICC_DanielVideoFrameInfo_FWD_DEFINED__
typedef interface ICC_DanielVideoFrameInfo ICC_DanielVideoFrameInfo;

#endif 	/* __ICC_DanielVideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoSplitter_FWD_DEFINED__
#define __ICC_DanielVideoSplitter_FWD_DEFINED__
typedef interface ICC_DanielVideoSplitter ICC_DanielVideoSplitter;

#endif 	/* __ICC_DanielVideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoDecoder_FWD_DEFINED__
#define __ICC_DanielVideoDecoder_FWD_DEFINED__
typedef interface ICC_DanielVideoDecoder ICC_DanielVideoDecoder;

#endif 	/* __ICC_DanielVideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoEncoderSettings_FWD_DEFINED__
#define __ICC_DanielVideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_DanielVideoEncoderSettings ICC_DanielVideoEncoderSettings;

#endif 	/* __ICC_DanielVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__
#define __ICC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__
typedef interface ICC_DanielVideoEncoderSettings_CUDA ICC_DanielVideoEncoderSettings_CUDA;

#endif 	/* __ICC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoEncoder_FWD_DEFINED__
#define __ICC_DanielVideoEncoder_FWD_DEFINED__
typedef interface ICC_DanielVideoEncoder ICC_DanielVideoEncoder;

#endif 	/* __ICC_DanielVideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_D2D_GetUpdateVideoBufferPtrProp_FWD_DEFINED__
#define __ICC_D2D_GetUpdateVideoBufferPtrProp_FWD_DEFINED__
typedef interface ICC_D2D_GetUpdateVideoBufferPtrProp ICC_D2D_GetUpdateVideoBufferPtrProp;

#endif 	/* __ICC_D2D_GetUpdateVideoBufferPtrProp_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoDecoder_CUDA_FWD_DEFINED__
#define __ICC_DanielVideoDecoder_CUDA_FWD_DEFINED__
typedef interface ICC_DanielVideoDecoder_CUDA ICC_DanielVideoDecoder_CUDA;

#endif 	/* __ICC_DanielVideoDecoder_CUDA_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoEncoder_CUDA_FWD_DEFINED__
#define __ICC_DanielVideoEncoder_CUDA_FWD_DEFINED__
typedef interface ICC_DanielVideoEncoder_CUDA ICC_DanielVideoEncoder_CUDA;

#endif 	/* __ICC_DanielVideoEncoder_CUDA_FWD_DEFINED__ */


#ifndef __ICC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__
#define __ICC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__
typedef interface ICC_DanielVideoDecoder_CudaPlayer ICC_DanielVideoDecoder_CudaPlayer;

#endif 	/* __ICC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__ */


#ifndef __ICC_D2D_GetFrameDecodingParamsProp_FWD_DEFINED__
#define __ICC_D2D_GetFrameDecodingParamsProp_FWD_DEFINED__
typedef interface ICC_D2D_GetFrameDecodingParamsProp ICC_D2D_GetFrameDecodingParamsProp;

#endif 	/* __ICC_D2D_GetFrameDecodingParamsProp_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoStreamInfo_FWD_DEFINED__
#define __ICC_Y4M_VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_Y4M_VideoStreamInfo ICC_Y4M_VideoStreamInfo;

#endif 	/* __ICC_Y4M_VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoFrameInfo_FWD_DEFINED__
#define __ICC_Y4M_VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_Y4M_VideoFrameInfo ICC_Y4M_VideoFrameInfo;

#endif 	/* __ICC_Y4M_VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoSplitter_FWD_DEFINED__
#define __ICC_Y4M_VideoSplitter_FWD_DEFINED__
typedef interface ICC_Y4M_VideoSplitter ICC_Y4M_VideoSplitter;

#endif 	/* __ICC_Y4M_VideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoDecoder_FWD_DEFINED__
#define __ICC_Y4M_VideoDecoder_FWD_DEFINED__
typedef interface ICC_Y4M_VideoDecoder ICC_Y4M_VideoDecoder;

#endif 	/* __ICC_Y4M_VideoDecoder_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoEncoderSettings_FWD_DEFINED__
#define __ICC_Y4M_VideoEncoderSettings_FWD_DEFINED__
typedef interface ICC_Y4M_VideoEncoderSettings ICC_Y4M_VideoEncoderSettings;

#endif 	/* __ICC_Y4M_VideoEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_Y4M_VideoEncoder_FWD_DEFINED__
#define __ICC_Y4M_VideoEncoder_FWD_DEFINED__
typedef interface ICC_Y4M_VideoEncoder ICC_Y4M_VideoEncoder;

#endif 	/* __ICC_Y4M_VideoEncoder_FWD_DEFINED__ */


#ifndef __ICC_MultiplexedDataDescr_FWD_DEFINED__
#define __ICC_MultiplexedDataDescr_FWD_DEFINED__
typedef interface ICC_MultiplexedDataDescr ICC_MultiplexedDataDescr;

#endif 	/* __ICC_MultiplexedDataDescr_FWD_DEFINED__ */


#ifndef __ICC_SystemDescriptorsReader_FWD_DEFINED__
#define __ICC_SystemDescriptorsReader_FWD_DEFINED__
typedef interface ICC_SystemDescriptorsReader ICC_SystemDescriptorsReader;

#endif 	/* __ICC_SystemDescriptorsReader_FWD_DEFINED__ */


#ifndef __ICC_SystemDescriptorsManager_FWD_DEFINED__
#define __ICC_SystemDescriptorsManager_FWD_DEFINED__
typedef interface ICC_SystemDescriptorsManager ICC_SystemDescriptorsManager;

#endif 	/* __ICC_SystemDescriptorsManager_FWD_DEFINED__ */


#ifndef __ICC_PES_Info_FWD_DEFINED__
#define __ICC_PES_Info_FWD_DEFINED__
typedef interface ICC_PES_Info ICC_PES_Info;

#endif 	/* __ICC_PES_Info_FWD_DEFINED__ */


#ifndef __ICC_ProgramInfo_FWD_DEFINED__
#define __ICC_ProgramInfo_FWD_DEFINED__
typedef interface ICC_ProgramInfo ICC_ProgramInfo;

#endif 	/* __ICC_ProgramInfo_FWD_DEFINED__ */


#ifndef __ICC_MultiplexedStreamInfo_FWD_DEFINED__
#define __ICC_MultiplexedStreamInfo_FWD_DEFINED__
typedef interface ICC_MultiplexedStreamInfo ICC_MultiplexedStreamInfo;

#endif 	/* __ICC_MultiplexedStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_BaseMultiplexerSettings_FWD_DEFINED__
#define __ICC_BaseMultiplexerSettings_FWD_DEFINED__
typedef interface ICC_BaseMultiplexerSettings ICC_BaseMultiplexerSettings;

#endif 	/* __ICC_BaseMultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_BaseMultiplexerPinSettings_FWD_DEFINED__
#define __ICC_BaseMultiplexerPinSettings_FWD_DEFINED__
typedef interface ICC_BaseMultiplexerPinSettings ICC_BaseMultiplexerPinSettings;

#endif 	/* __ICC_BaseMultiplexerPinSettings_FWD_DEFINED__ */


#ifndef __ICC_SystemMuxerPinSettings_FWD_DEFINED__
#define __ICC_SystemMuxerPinSettings_FWD_DEFINED__
typedef interface ICC_SystemMuxerPinSettings ICC_SystemMuxerPinSettings;

#endif 	/* __ICC_SystemMuxerPinSettings_FWD_DEFINED__ */


#ifndef __ICC_SystemMuxerSettings_FWD_DEFINED__
#define __ICC_SystemMuxerSettings_FWD_DEFINED__
typedef interface ICC_SystemMuxerSettings ICC_SystemMuxerSettings;

#endif 	/* __ICC_SystemMuxerSettings_FWD_DEFINED__ */


#ifndef __ICC_ProgramMuxerPinSettings_FWD_DEFINED__
#define __ICC_ProgramMuxerPinSettings_FWD_DEFINED__
typedef interface ICC_ProgramMuxerPinSettings ICC_ProgramMuxerPinSettings;

#endif 	/* __ICC_ProgramMuxerPinSettings_FWD_DEFINED__ */


#ifndef __ICC_ProgramMultiplexerSettings_FWD_DEFINED__
#define __ICC_ProgramMultiplexerSettings_FWD_DEFINED__
typedef interface ICC_ProgramMultiplexerSettings ICC_ProgramMultiplexerSettings;

#endif 	/* __ICC_ProgramMultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_TransportMuxerPinSettings_FWD_DEFINED__
#define __ICC_TransportMuxerPinSettings_FWD_DEFINED__
typedef interface ICC_TransportMuxerPinSettings ICC_TransportMuxerPinSettings;

#endif 	/* __ICC_TransportMuxerPinSettings_FWD_DEFINED__ */


#ifndef __ICC_TransportMultiplexerSettings_FWD_DEFINED__
#define __ICC_TransportMultiplexerSettings_FWD_DEFINED__
typedef interface ICC_TransportMultiplexerSettings ICC_TransportMultiplexerSettings;

#endif 	/* __ICC_TransportMultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_TS_ProgramDescr_FWD_DEFINED__
#define __ICC_TS_ProgramDescr_FWD_DEFINED__
typedef interface ICC_TS_ProgramDescr ICC_TS_ProgramDescr;

#endif 	/* __ICC_TS_ProgramDescr_FWD_DEFINED__ */


#ifndef __ICC_M2TSMP_MultiplexerSettings_FWD_DEFINED__
#define __ICC_M2TSMP_MultiplexerSettings_FWD_DEFINED__
typedef interface ICC_M2TSMP_MultiplexerSettings ICC_M2TSMP_MultiplexerSettings;

#endif 	/* __ICC_M2TSMP_MultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_HDV1MuxerSettings_FWD_DEFINED__
#define __ICC_HDV1MuxerSettings_FWD_DEFINED__
typedef interface ICC_HDV1MuxerSettings ICC_HDV1MuxerSettings;

#endif 	/* __ICC_HDV1MuxerSettings_FWD_DEFINED__ */


#ifndef __ICC_HDV2MuxerSettings_FWD_DEFINED__
#define __ICC_HDV2MuxerSettings_FWD_DEFINED__
typedef interface ICC_HDV2MuxerSettings ICC_HDV2MuxerSettings;

#endif 	/* __ICC_HDV2MuxerSettings_FWD_DEFINED__ */


#ifndef __ICC_Multiplexer_FWD_DEFINED__
#define __ICC_Multiplexer_FWD_DEFINED__
typedef interface ICC_Multiplexer ICC_Multiplexer;

#endif 	/* __ICC_Multiplexer_FWD_DEFINED__ */


#ifndef __ICC_DemultiplexedDataCallback_FWD_DEFINED__
#define __ICC_DemultiplexedDataCallback_FWD_DEFINED__
typedef interface ICC_DemultiplexedDataCallback ICC_DemultiplexedDataCallback;

#endif 	/* __ICC_DemultiplexedDataCallback_FWD_DEFINED__ */


#ifndef __ICC_DemultiplexedDataCallbackExt_FWD_DEFINED__
#define __ICC_DemultiplexedDataCallbackExt_FWD_DEFINED__
typedef interface ICC_DemultiplexedDataCallbackExt ICC_DemultiplexedDataCallbackExt;

#endif 	/* __ICC_DemultiplexedDataCallbackExt_FWD_DEFINED__ */


#ifndef __ICC_StreamClockReferenceProp_FWD_DEFINED__
#define __ICC_StreamClockReferenceProp_FWD_DEFINED__
typedef interface ICC_StreamClockReferenceProp ICC_StreamClockReferenceProp;

#endif 	/* __ICC_StreamClockReferenceProp_FWD_DEFINED__ */


#ifndef __ICC_ProgramClockReferencePidProp_FWD_DEFINED__
#define __ICC_ProgramClockReferencePidProp_FWD_DEFINED__
typedef interface ICC_ProgramClockReferencePidProp ICC_ProgramClockReferencePidProp;

#endif 	/* __ICC_ProgramClockReferencePidProp_FWD_DEFINED__ */


#ifndef __ICC_Demultiplexer_FWD_DEFINED__
#define __ICC_Demultiplexer_FWD_DEFINED__
typedef interface ICC_Demultiplexer ICC_Demultiplexer;

#endif 	/* __ICC_Demultiplexer_FWD_DEFINED__ */


#ifndef __ICC_HDV2_Multiplexer_FWD_DEFINED__
#define __ICC_HDV2_Multiplexer_FWD_DEFINED__
typedef interface ICC_HDV2_Multiplexer ICC_HDV2_Multiplexer;

#endif 	/* __ICC_HDV2_Multiplexer_FWD_DEFINED__ */


#ifndef __ICC_StreamRecognizer_FWD_DEFINED__
#define __ICC_StreamRecognizer_FWD_DEFINED__
typedef interface ICC_StreamRecognizer ICC_StreamRecognizer;

#endif 	/* __ICC_StreamRecognizer_FWD_DEFINED__ */


#ifndef __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__
#define __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__
typedef interface ICC_DebugDumpIncomingDataToFile ICC_DebugDumpIncomingDataToFile;

#endif 	/* __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__ */


#ifndef __ICC_PCR_Callback_FWD_DEFINED__
#define __ICC_PCR_Callback_FWD_DEFINED__
typedef interface ICC_PCR_Callback ICC_PCR_Callback;

#endif 	/* __ICC_PCR_Callback_FWD_DEFINED__ */


#ifndef __ICC_PCR_CallbackProp_FWD_DEFINED__
#define __ICC_PCR_CallbackProp_FWD_DEFINED__
typedef interface ICC_PCR_CallbackProp ICC_PCR_CallbackProp;

#endif 	/* __ICC_PCR_CallbackProp_FWD_DEFINED__ */


#ifndef __ICC_MP4_Multiplexer_FWD_DEFINED__
#define __ICC_MP4_Multiplexer_FWD_DEFINED__
typedef interface ICC_MP4_Multiplexer ICC_MP4_Multiplexer;

#endif 	/* __ICC_MP4_Multiplexer_FWD_DEFINED__ */


#ifndef __ICC_MP4_MultiplexerSettings_FWD_DEFINED__
#define __ICC_MP4_MultiplexerSettings_FWD_DEFINED__
typedef interface ICC_MP4_MultiplexerSettings ICC_MP4_MultiplexerSettings;

#endif 	/* __ICC_MP4_MultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_MP4_MuxerPinSettings_FWD_DEFINED__
#define __ICC_MP4_MuxerPinSettings_FWD_DEFINED__
typedef interface ICC_MP4_MuxerPinSettings ICC_MP4_MuxerPinSettings;

#endif 	/* __ICC_MP4_MuxerPinSettings_FWD_DEFINED__ */


#ifndef __ICC_MP4_MuxerVideoPinSettings_FWD_DEFINED__
#define __ICC_MP4_MuxerVideoPinSettings_FWD_DEFINED__
typedef interface ICC_MP4_MuxerVideoPinSettings ICC_MP4_MuxerVideoPinSettings;

#endif 	/* __ICC_MP4_MuxerVideoPinSettings_FWD_DEFINED__ */


#ifndef __ICC_ReferenceDataConsumer_FWD_DEFINED__
#define __ICC_ReferenceDataConsumer_FWD_DEFINED__
typedef interface ICC_ReferenceDataConsumer ICC_ReferenceDataConsumer;

#endif 	/* __ICC_ReferenceDataConsumer_FWD_DEFINED__ */


#ifndef __ICC_MP4_FragmentedPin_FWD_DEFINED__
#define __ICC_MP4_FragmentedPin_FWD_DEFINED__
typedef interface ICC_MP4_FragmentedPin ICC_MP4_FragmentedPin;

#endif 	/* __ICC_MP4_FragmentedPin_FWD_DEFINED__ */


#ifndef __ICC_MP4_InitialTimeCodeProp_FWD_DEFINED__
#define __ICC_MP4_InitialTimeCodeProp_FWD_DEFINED__
typedef interface ICC_MP4_InitialTimeCodeProp ICC_MP4_InitialTimeCodeProp;

#endif 	/* __ICC_MP4_InitialTimeCodeProp_FWD_DEFINED__ */


#ifndef __ICC_MP4_MpegDashSettings_FWD_DEFINED__
#define __ICC_MP4_MpegDashSettings_FWD_DEFINED__
typedef interface ICC_MP4_MpegDashSettings ICC_MP4_MpegDashSettings;

#endif 	/* __ICC_MP4_MpegDashSettings_FWD_DEFINED__ */


#ifndef __ICC_MP4ChunkInfo_FWD_DEFINED__
#define __ICC_MP4ChunkInfo_FWD_DEFINED__
typedef interface ICC_MP4ChunkInfo ICC_MP4ChunkInfo;

#endif 	/* __ICC_MP4ChunkInfo_FWD_DEFINED__ */


#ifndef __ICC_MP4Fragment_FWD_DEFINED__
#define __ICC_MP4Fragment_FWD_DEFINED__
typedef interface ICC_MP4Fragment ICC_MP4Fragment;

#endif 	/* __ICC_MP4Fragment_FWD_DEFINED__ */


#ifndef __ICC_MP4InitFragment_FWD_DEFINED__
#define __ICC_MP4InitFragment_FWD_DEFINED__
typedef interface ICC_MP4InitFragment ICC_MP4InitFragment;

#endif 	/* __ICC_MP4InitFragment_FWD_DEFINED__ */


#ifndef __ICC_MP4RandomAccessFragment_FWD_DEFINED__
#define __ICC_MP4RandomAccessFragment_FWD_DEFINED__
typedef interface ICC_MP4RandomAccessFragment ICC_MP4RandomAccessFragment;

#endif 	/* __ICC_MP4RandomAccessFragment_FWD_DEFINED__ */


#ifndef __ICC_MP4Producer_FWD_DEFINED__
#define __ICC_MP4Producer_FWD_DEFINED__
typedef interface ICC_MP4Producer ICC_MP4Producer;

#endif 	/* __ICC_MP4Producer_FWD_DEFINED__ */


#ifndef __ICC_HLS_MultiplexerSettings_FWD_DEFINED__
#define __ICC_HLS_MultiplexerSettings_FWD_DEFINED__
typedef interface ICC_HLS_MultiplexerSettings ICC_HLS_MultiplexerSettings;

#endif 	/* __ICC_HLS_MultiplexerSettings_FWD_DEFINED__ */


#ifndef __ICC_MediaReader_FWD_DEFINED__
#define __ICC_MediaReader_FWD_DEFINED__
typedef interface ICC_MediaReader ICC_MediaReader;

#endif 	/* __ICC_MediaReader_FWD_DEFINED__ */


#ifndef __ICC_MediaReader2_FWD_DEFINED__
#define __ICC_MediaReader2_FWD_DEFINED__
typedef interface ICC_MediaReader2 ICC_MediaReader2;

#endif 	/* __ICC_MediaReader2_FWD_DEFINED__ */


#ifndef __CinecoderLibrary_FWD_DEFINED__
#define __CinecoderLibrary_FWD_DEFINED__

#ifdef __cplusplus
typedef class CinecoderLibrary CinecoderLibrary;
#else
typedef struct CinecoderLibrary CinecoderLibrary;
#endif /* __cplusplus */

#endif 	/* __CinecoderLibrary_FWD_DEFINED__ */


#ifndef __ICC_Schema_FWD_DEFINED__
#define __ICC_Schema_FWD_DEFINED__
typedef interface ICC_Schema ICC_Schema;

#endif 	/* __ICC_Schema_FWD_DEFINED__ */


#ifndef __ICC_ErrorHandler_FWD_DEFINED__
#define __ICC_ErrorHandler_FWD_DEFINED__
typedef interface ICC_ErrorHandler ICC_ErrorHandler;

#endif 	/* __ICC_ErrorHandler_FWD_DEFINED__ */


#ifndef __ICC_BufferAllocator_FWD_DEFINED__
#define __ICC_BufferAllocator_FWD_DEFINED__
typedef interface ICC_BufferAllocator ICC_BufferAllocator;

#endif 	/* __ICC_BufferAllocator_FWD_DEFINED__ */


#ifndef __ICC_Breakable_FWD_DEFINED__
#define __ICC_Breakable_FWD_DEFINED__
typedef interface ICC_Breakable ICC_Breakable;

#endif 	/* __ICC_Breakable_FWD_DEFINED__ */


#ifndef __ICC_DataReadyCallback_FWD_DEFINED__
#define __ICC_DataReadyCallback_FWD_DEFINED__
typedef interface ICC_DataReadyCallback ICC_DataReadyCallback;

#endif 	/* __ICC_DataReadyCallback_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamCallback_FWD_DEFINED__
#define __ICC_ByteStreamCallback_FWD_DEFINED__
typedef interface ICC_ByteStreamCallback ICC_ByteStreamCallback;

#endif 	/* __ICC_ByteStreamCallback_FWD_DEFINED__ */


#ifndef __ICC_StreamProcessor_FWD_DEFINED__
#define __ICC_StreamProcessor_FWD_DEFINED__
typedef interface ICC_StreamProcessor ICC_StreamProcessor;

#endif 	/* __ICC_StreamProcessor_FWD_DEFINED__ */


#ifndef __ICC_Decoder_FWD_DEFINED__
#define __ICC_Decoder_FWD_DEFINED__
typedef interface ICC_Decoder ICC_Decoder;

#endif 	/* __ICC_Decoder_FWD_DEFINED__ */


#ifndef __ICC_DemultiplexedDataCallback_FWD_DEFINED__
#define __ICC_DemultiplexedDataCallback_FWD_DEFINED__
typedef interface ICC_DemultiplexedDataCallback ICC_DemultiplexedDataCallback;

#endif 	/* __ICC_DemultiplexedDataCallback_FWD_DEFINED__ */


#ifndef __ICC_InitialTimeCodeProp_FWD_DEFINED__
#define __ICC_InitialTimeCodeProp_FWD_DEFINED__
typedef interface ICC_InitialTimeCodeProp ICC_InitialTimeCodeProp;

#endif 	/* __ICC_InitialTimeCodeProp_FWD_DEFINED__ */


#ifndef __ICC_StreamClockReferenceProp_FWD_DEFINED__
#define __ICC_StreamClockReferenceProp_FWD_DEFINED__
typedef interface ICC_StreamClockReferenceProp ICC_StreamClockReferenceProp;

#endif 	/* __ICC_StreamClockReferenceProp_FWD_DEFINED__ */


#ifndef __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__
#define __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__
typedef interface ICC_DebugDumpIncomingDataToFile ICC_DebugDumpIncomingDataToFile;

#endif 	/* __ICC_DebugDumpIncomingDataToFile_FWD_DEFINED__ */


#ifndef __ICC_PsnrCalculationProp_FWD_DEFINED__
#define __ICC_PsnrCalculationProp_FWD_DEFINED__
typedef interface ICC_PsnrCalculationProp ICC_PsnrCalculationProp;

#endif 	/* __ICC_PsnrCalculationProp_FWD_DEFINED__ */


#ifndef __ICC_Settings_FWD_DEFINED__
#define __ICC_Settings_FWD_DEFINED__
typedef interface ICC_Settings ICC_Settings;

#endif 	/* __ICC_Settings_FWD_DEFINED__ */


#ifndef __ICC_MultiplexedDataDescr_FWD_DEFINED__
#define __ICC_MultiplexedDataDescr_FWD_DEFINED__
typedef interface ICC_MultiplexedDataDescr ICC_MultiplexedDataDescr;

#endif 	/* __ICC_MultiplexedDataDescr_FWD_DEFINED__ */


#ifndef __ICC_StreamPositionProp_FWD_DEFINED__
#define __ICC_StreamPositionProp_FWD_DEFINED__
typedef interface ICC_StreamPositionProp ICC_StreamPositionProp;

#endif 	/* __ICC_StreamPositionProp_FWD_DEFINED__ */


#ifndef __ICC_DataWriter_FWD_DEFINED__
#define __ICC_DataWriter_FWD_DEFINED__
typedef interface ICC_DataWriter ICC_DataWriter;

#endif 	/* __ICC_DataWriter_FWD_DEFINED__ */


#ifndef __ICC_DataWriterEx_FWD_DEFINED__
#define __ICC_DataWriterEx_FWD_DEFINED__
typedef interface ICC_DataWriterEx ICC_DataWriterEx;

#endif 	/* __ICC_DataWriterEx_FWD_DEFINED__ */


#ifndef __ICC_TimeBaseProp_FWD_DEFINED__
#define __ICC_TimeBaseProp_FWD_DEFINED__
typedef interface ICC_TimeBaseProp ICC_TimeBaseProp;

#endif 	/* __ICC_TimeBaseProp_FWD_DEFINED__ */


#ifndef __ICC_BitRateProp_FWD_DEFINED__
#define __ICC_BitRateProp_FWD_DEFINED__
typedef interface ICC_BitRateProp ICC_BitRateProp;

#endif 	/* __ICC_BitRateProp_FWD_DEFINED__ */


#ifndef __ICC_ThreadsCountProp_FWD_DEFINED__
#define __ICC_ThreadsCountProp_FWD_DEFINED__
typedef interface ICC_ThreadsCountProp ICC_ThreadsCountProp;

#endif 	/* __ICC_ThreadsCountProp_FWD_DEFINED__ */


#ifndef __ICC_ThreadsAffinityProp_FWD_DEFINED__
#define __ICC_ThreadsAffinityProp_FWD_DEFINED__
typedef interface ICC_ThreadsAffinityProp ICC_ThreadsAffinityProp;

#endif 	/* __ICC_ThreadsAffinityProp_FWD_DEFINED__ */


#ifndef __ICC_ThreadsPriorityProp_FWD_DEFINED__
#define __ICC_ThreadsPriorityProp_FWD_DEFINED__
typedef interface ICC_ThreadsPriorityProp ICC_ThreadsPriorityProp;

#endif 	/* __ICC_ThreadsPriorityProp_FWD_DEFINED__ */


#ifndef __ICC_ProcessDataPolicyProp_FWD_DEFINED__
#define __ICC_ProcessDataPolicyProp_FWD_DEFINED__
typedef interface ICC_ProcessDataPolicyProp ICC_ProcessDataPolicyProp;

#endif 	/* __ICC_ProcessDataPolicyProp_FWD_DEFINED__ */


#ifndef __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__
#define __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__
typedef interface ICC_ExecutiveDeviceMaskProp ICC_ExecutiveDeviceMaskProp;

#endif 	/* __ICC_ExecutiveDeviceMaskProp_FWD_DEFINED__ */


#ifndef __ICC_AddUserDataCtrl_FWD_DEFINED__
#define __ICC_AddUserDataCtrl_FWD_DEFINED__
typedef interface ICC_AddUserDataCtrl ICC_AddUserDataCtrl;

#endif 	/* __ICC_AddUserDataCtrl_FWD_DEFINED__ */


#ifndef __ICC_ElementaryStreamInfo_FWD_DEFINED__
#define __ICC_ElementaryStreamInfo_FWD_DEFINED__
typedef interface ICC_ElementaryStreamInfo ICC_ElementaryStreamInfo;

#endif 	/* __ICC_ElementaryStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoStreamInfo_FWD_DEFINED__
#define __ICC_VideoStreamInfo_FWD_DEFINED__
typedef interface ICC_VideoStreamInfo ICC_VideoStreamInfo;

#endif 	/* __ICC_VideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoStreamInfo_FWD_DEFINED__
#define __ICC_MpegVideoStreamInfo_FWD_DEFINED__
typedef interface ICC_MpegVideoStreamInfo ICC_MpegVideoStreamInfo;

#endif 	/* __ICC_MpegVideoStreamInfo_FWD_DEFINED__ */


#ifndef __ICC_ByteStreamDataInfo_FWD_DEFINED__
#define __ICC_ByteStreamDataInfo_FWD_DEFINED__
typedef interface ICC_ByteStreamDataInfo ICC_ByteStreamDataInfo;

#endif 	/* __ICC_ByteStreamDataInfo_FWD_DEFINED__ */


#ifndef __ICC_ElementaryDataInfo_FWD_DEFINED__
#define __ICC_ElementaryDataInfo_FWD_DEFINED__
typedef interface ICC_ElementaryDataInfo ICC_ElementaryDataInfo;

#endif 	/* __ICC_ElementaryDataInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameInfo_FWD_DEFINED__
#define __ICC_VideoFrameInfo_FWD_DEFINED__
typedef interface ICC_VideoFrameInfo ICC_VideoFrameInfo;

#endif 	/* __ICC_VideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_MpegVideoFrameInfo_FWD_DEFINED__
#define __ICC_MpegVideoFrameInfo_FWD_DEFINED__
typedef interface ICC_MpegVideoFrameInfo ICC_MpegVideoFrameInfo;

#endif 	/* __ICC_MpegVideoFrameInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoFrameQualityInfo_FWD_DEFINED__
#define __ICC_VideoFrameQualityInfo_FWD_DEFINED__
typedef interface ICC_VideoFrameQualityInfo ICC_VideoFrameQualityInfo;

#endif 	/* __ICC_VideoFrameQualityInfo_FWD_DEFINED__ */


#ifndef __ICC_VideoProducer_FWD_DEFINED__
#define __ICC_VideoProducer_FWD_DEFINED__
typedef interface ICC_VideoProducer ICC_VideoProducer;

#endif 	/* __ICC_VideoProducer_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumer_FWD_DEFINED__
#define __ICC_VideoConsumer_FWD_DEFINED__
typedef interface ICC_VideoConsumer ICC_VideoConsumer;

#endif 	/* __ICC_VideoConsumer_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumerExt_FWD_DEFINED__
#define __ICC_VideoConsumerExt_FWD_DEFINED__
typedef interface ICC_VideoConsumerExt ICC_VideoConsumerExt;

#endif 	/* __ICC_VideoConsumerExt_FWD_DEFINED__ */


#ifndef __ICC_VideoConsumerExtAsync_FWD_DEFINED__
#define __ICC_VideoConsumerExtAsync_FWD_DEFINED__
typedef interface ICC_VideoConsumerExtAsync ICC_VideoConsumerExtAsync;

#endif 	/* __ICC_VideoConsumerExtAsync_FWD_DEFINED__ */


#ifndef __ICC_ReadOnlyCollection_FWD_DEFINED__
#define __ICC_ReadOnlyCollection_FWD_DEFINED__
typedef interface ICC_ReadOnlyCollection ICC_ReadOnlyCollection;

#endif 	/* __ICC_ReadOnlyCollection_FWD_DEFINED__ */


#ifndef __ICC_Collection_FWD_DEFINED__
#define __ICC_Collection_FWD_DEFINED__
typedef interface ICC_Collection ICC_Collection;

#endif 	/* __ICC_Collection_FWD_DEFINED__ */


#ifndef __ICC_CollectionHandler_FWD_DEFINED__
#define __ICC_CollectionHandler_FWD_DEFINED__
typedef interface ICC_CollectionHandler ICC_CollectionHandler;

#endif 	/* __ICC_CollectionHandler_FWD_DEFINED__ */


#ifndef __ICC_CollectionChanged_FWD_DEFINED__
#define __ICC_CollectionChanged_FWD_DEFINED__
typedef interface ICC_CollectionChanged ICC_CollectionChanged;

#endif 	/* __ICC_CollectionChanged_FWD_DEFINED__ */


#ifndef __ICC_CollectionFilter_FWD_DEFINED__
#define __ICC_CollectionFilter_FWD_DEFINED__
typedef interface ICC_CollectionFilter ICC_CollectionFilter;

#endif 	/* __ICC_CollectionFilter_FWD_DEFINED__ */


#ifndef __ICC_MP4Fragment_FWD_DEFINED__
#define __ICC_MP4Fragment_FWD_DEFINED__
typedef interface ICC_MP4Fragment ICC_MP4Fragment;

#endif 	/* __ICC_MP4Fragment_FWD_DEFINED__ */


#ifndef __ICC_MP4InitFragment_FWD_DEFINED__
#define __ICC_MP4InitFragment_FWD_DEFINED__
typedef interface ICC_MP4InitFragment ICC_MP4InitFragment;

#endif 	/* __ICC_MP4InitFragment_FWD_DEFINED__ */


#ifndef __ICC_File_FWD_DEFINED__
#define __ICC_File_FWD_DEFINED__
typedef interface ICC_File ICC_File;

#endif 	/* __ICC_File_FWD_DEFINED__ */


#ifndef __ICC_InputFile_FWD_DEFINED__
#define __ICC_InputFile_FWD_DEFINED__
typedef interface ICC_InputFile ICC_InputFile;

#endif 	/* __ICC_InputFile_FWD_DEFINED__ */


#ifndef __ICC_OutputFile_FWD_DEFINED__
#define __ICC_OutputFile_FWD_DEFINED__
typedef interface ICC_OutputFile ICC_OutputFile;

#endif 	/* __ICC_OutputFile_FWD_DEFINED__ */


#ifndef __CC_MpegVideoEncoderSettings_FWD_DEFINED__
#define __CC_MpegVideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoEncoderSettings CC_MpegVideoEncoderSettings;
#else
typedef struct CC_MpegVideoEncoderSettings CC_MpegVideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_MpegVideoEncoder_FWD_DEFINED__
#define __CC_MpegVideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoEncoder CC_MpegVideoEncoder;
#else
typedef struct CC_MpegVideoEncoder CC_MpegVideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoEncoder_FWD_DEFINED__ */


#ifndef __CC_MpegVideoEncoder2_FWD_DEFINED__
#define __CC_MpegVideoEncoder2_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoEncoder2 CC_MpegVideoEncoder2;
#else
typedef struct CC_MpegVideoEncoder2 CC_MpegVideoEncoder2;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoEncoder2_FWD_DEFINED__ */


#ifndef __CC_MpegVideoDecoder_FWD_DEFINED__
#define __CC_MpegVideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoDecoder CC_MpegVideoDecoder;
#else
typedef struct CC_MpegVideoDecoder CC_MpegVideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoDecoder_FWD_DEFINED__ */


#ifndef __CC_MpegVideoDecoder0_FWD_DEFINED__
#define __CC_MpegVideoDecoder0_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoDecoder0 CC_MpegVideoDecoder0;
#else
typedef struct CC_MpegVideoDecoder0 CC_MpegVideoDecoder0;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoDecoder0_FWD_DEFINED__ */


#ifndef __CC_MpegVideoDecoder2_FWD_DEFINED__
#define __CC_MpegVideoDecoder2_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoDecoder2 CC_MpegVideoDecoder2;
#else
typedef struct CC_MpegVideoDecoder2 CC_MpegVideoDecoder2;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoDecoder2_FWD_DEFINED__ */


#ifndef __CC_D10VideoEncoderSettings_FWD_DEFINED__
#define __CC_D10VideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_D10VideoEncoderSettings CC_D10VideoEncoderSettings;
#else
typedef struct CC_D10VideoEncoderSettings CC_D10VideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_D10VideoEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_D10VideoEncoder_FWD_DEFINED__
#define __CC_D10VideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_D10VideoEncoder CC_D10VideoEncoder;
#else
typedef struct CC_D10VideoEncoder CC_D10VideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_D10VideoEncoder_FWD_DEFINED__ */


#ifndef __CC_MpegVideoSplitter_FWD_DEFINED__
#define __CC_MpegVideoSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegVideoSplitter CC_MpegVideoSplitter;
#else
typedef struct CC_MpegVideoSplitter CC_MpegVideoSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_MpegVideoSplitter_FWD_DEFINED__ */


#ifndef __ICC_AudioProducer_FWD_DEFINED__
#define __ICC_AudioProducer_FWD_DEFINED__
typedef interface ICC_AudioProducer ICC_AudioProducer;

#endif 	/* __ICC_AudioProducer_FWD_DEFINED__ */


#ifndef __ICC_AudioConsumer_FWD_DEFINED__
#define __ICC_AudioConsumer_FWD_DEFINED__
typedef interface ICC_AudioConsumer ICC_AudioConsumer;

#endif 	/* __ICC_AudioConsumer_FWD_DEFINED__ */


#ifndef __ICC_AudioDecoder_FWD_DEFINED__
#define __ICC_AudioDecoder_FWD_DEFINED__
typedef interface ICC_AudioDecoder ICC_AudioDecoder;

#endif 	/* __ICC_AudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioDecoder_FWD_DEFINED__
#define __ICC_MpegAudioDecoder_FWD_DEFINED__
typedef interface ICC_MpegAudioDecoder ICC_MpegAudioDecoder;

#endif 	/* __ICC_MpegAudioDecoder_FWD_DEFINED__ */


#ifndef __ICC_Encoder_FWD_DEFINED__
#define __ICC_Encoder_FWD_DEFINED__
typedef interface ICC_Encoder ICC_Encoder;

#endif 	/* __ICC_Encoder_FWD_DEFINED__ */


#ifndef __ICC_AudioEncoder_FWD_DEFINED__
#define __ICC_AudioEncoder_FWD_DEFINED__
typedef interface ICC_AudioEncoder ICC_AudioEncoder;

#endif 	/* __ICC_AudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioEncoder_FWD_DEFINED__
#define __ICC_MpegAudioEncoder_FWD_DEFINED__
typedef interface ICC_MpegAudioEncoder ICC_MpegAudioEncoder;

#endif 	/* __ICC_MpegAudioEncoder_FWD_DEFINED__ */


#ifndef __ICC_AudioEncoderSettings_FWD_DEFINED__
#define __ICC_AudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_AudioEncoderSettings ICC_AudioEncoderSettings;

#endif 	/* __ICC_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __ICC_MpegAudioEncoderSettings_FWD_DEFINED__
#define __ICC_MpegAudioEncoderSettings_FWD_DEFINED__
typedef interface ICC_MpegAudioEncoderSettings ICC_MpegAudioEncoderSettings;

#endif 	/* __ICC_MpegAudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_MpegAudioEncoderSettings_FWD_DEFINED__
#define __CC_MpegAudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioEncoderSettings CC_MpegAudioEncoderSettings;
#else
typedef struct CC_MpegAudioEncoderSettings CC_MpegAudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_MpegAudioEncoder_FWD_DEFINED__
#define __CC_MpegAudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioEncoder CC_MpegAudioEncoder;
#else
typedef struct CC_MpegAudioEncoder CC_MpegAudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioEncoder_FWD_DEFINED__ */


#ifndef __CC_MpegAudioEncoderOld_FWD_DEFINED__
#define __CC_MpegAudioEncoderOld_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioEncoderOld CC_MpegAudioEncoderOld;
#else
typedef struct CC_MpegAudioEncoderOld CC_MpegAudioEncoderOld;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioEncoderOld_FWD_DEFINED__ */


#ifndef __CC_Aes3AudioEncoderSettings_FWD_DEFINED__
#define __CC_Aes3AudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Aes3AudioEncoderSettings CC_Aes3AudioEncoderSettings;
#else
typedef struct CC_Aes3AudioEncoderSettings CC_Aes3AudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_Aes3AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_Aes3AudioEncoder_FWD_DEFINED__
#define __CC_Aes3AudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Aes3AudioEncoder CC_Aes3AudioEncoder;
#else
typedef struct CC_Aes3AudioEncoder CC_Aes3AudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_Aes3AudioEncoder_FWD_DEFINED__ */


#ifndef __CC_MpegAudioDecoder_FWD_DEFINED__
#define __CC_MpegAudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioDecoder CC_MpegAudioDecoder;
#else
typedef struct CC_MpegAudioDecoder CC_MpegAudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioDecoder_FWD_DEFINED__ */


#ifndef __CC_MpegAudioDecoderOld_FWD_DEFINED__
#define __CC_MpegAudioDecoderOld_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioDecoderOld CC_MpegAudioDecoderOld;
#else
typedef struct CC_MpegAudioDecoderOld CC_MpegAudioDecoderOld;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioDecoderOld_FWD_DEFINED__ */


#ifndef __CC_MpegAudioSplitter_FWD_DEFINED__
#define __CC_MpegAudioSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegAudioSplitter CC_MpegAudioSplitter;
#else
typedef struct CC_MpegAudioSplitter CC_MpegAudioSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_MpegAudioSplitter_FWD_DEFINED__ */


#ifndef __CC_Aes3AudioDecoder_FWD_DEFINED__
#define __CC_Aes3AudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Aes3AudioDecoder CC_Aes3AudioDecoder;
#else
typedef struct CC_Aes3AudioDecoder CC_Aes3AudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_Aes3AudioDecoder_FWD_DEFINED__ */


#ifndef __CC_ProgramStreamMultiplexer_FWD_DEFINED__
#define __CC_ProgramStreamMultiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_ProgramStreamMultiplexer CC_ProgramStreamMultiplexer;
#else
typedef struct CC_ProgramStreamMultiplexer CC_ProgramStreamMultiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_ProgramStreamMultiplexer_FWD_DEFINED__ */


#ifndef __CC_TransportStreamMultiplexer_FWD_DEFINED__
#define __CC_TransportStreamMultiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_TransportStreamMultiplexer CC_TransportStreamMultiplexer;
#else
typedef struct CC_TransportStreamMultiplexer CC_TransportStreamMultiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_TransportStreamMultiplexer_FWD_DEFINED__ */


#ifndef __CC_HDV1_Multiplexer_FWD_DEFINED__
#define __CC_HDV1_Multiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HDV1_Multiplexer CC_HDV1_Multiplexer;
#else
typedef struct CC_HDV1_Multiplexer CC_HDV1_Multiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_HDV1_Multiplexer_FWD_DEFINED__ */


#ifndef __CC_HDV2_Multiplexer_FWD_DEFINED__
#define __CC_HDV2_Multiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HDV2_Multiplexer CC_HDV2_Multiplexer;
#else
typedef struct CC_HDV2_Multiplexer CC_HDV2_Multiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_HDV2_Multiplexer_FWD_DEFINED__ */


#ifndef __CC_ProgramMultiplexerSettings_FWD_DEFINED__
#define __CC_ProgramMultiplexerSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_ProgramMultiplexerSettings CC_ProgramMultiplexerSettings;
#else
typedef struct CC_ProgramMultiplexerSettings CC_ProgramMultiplexerSettings;
#endif /* __cplusplus */

#endif 	/* __CC_ProgramMultiplexerSettings_FWD_DEFINED__ */


#ifndef __CC_TransportMultiplexerSettings_FWD_DEFINED__
#define __CC_TransportMultiplexerSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_TransportMultiplexerSettings CC_TransportMultiplexerSettings;
#else
typedef struct CC_TransportMultiplexerSettings CC_TransportMultiplexerSettings;
#endif /* __cplusplus */

#endif 	/* __CC_TransportMultiplexerSettings_FWD_DEFINED__ */


#ifndef __CC_MuxPinSettings_FWD_DEFINED__
#define __CC_MuxPinSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MuxPinSettings CC_MuxPinSettings;
#else
typedef struct CC_MuxPinSettings CC_MuxPinSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MuxPinSettings_FWD_DEFINED__ */


#ifndef __CC_ProgramMuxerPinSettings_FWD_DEFINED__
#define __CC_ProgramMuxerPinSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_ProgramMuxerPinSettings CC_ProgramMuxerPinSettings;
#else
typedef struct CC_ProgramMuxerPinSettings CC_ProgramMuxerPinSettings;
#endif /* __cplusplus */

#endif 	/* __CC_ProgramMuxerPinSettings_FWD_DEFINED__ */


#ifndef __CC_TransportMuxerPinSettings_FWD_DEFINED__
#define __CC_TransportMuxerPinSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_TransportMuxerPinSettings CC_TransportMuxerPinSettings;
#else
typedef struct CC_TransportMuxerPinSettings CC_TransportMuxerPinSettings;
#endif /* __cplusplus */

#endif 	/* __CC_TransportMuxerPinSettings_FWD_DEFINED__ */


#ifndef __CC_SystemsDescriptionManager_FWD_DEFINED__
#define __CC_SystemsDescriptionManager_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_SystemsDescriptionManager CC_SystemsDescriptionManager;
#else
typedef struct CC_SystemsDescriptionManager CC_SystemsDescriptionManager;
#endif /* __cplusplus */

#endif 	/* __CC_SystemsDescriptionManager_FWD_DEFINED__ */


#ifndef __CC_MpegDemultiplexer_FWD_DEFINED__
#define __CC_MpegDemultiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MpegDemultiplexer CC_MpegDemultiplexer;
#else
typedef struct CC_MpegDemultiplexer CC_MpegDemultiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_MpegDemultiplexer_FWD_DEFINED__ */


#ifndef __CC_ProgramStreamDemultiplexer_FWD_DEFINED__
#define __CC_ProgramStreamDemultiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_ProgramStreamDemultiplexer CC_ProgramStreamDemultiplexer;
#else
typedef struct CC_ProgramStreamDemultiplexer CC_ProgramStreamDemultiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_ProgramStreamDemultiplexer_FWD_DEFINED__ */


#ifndef __CC_TransportStreamDemultiplexer_FWD_DEFINED__
#define __CC_TransportStreamDemultiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_TransportStreamDemultiplexer CC_TransportStreamDemultiplexer;
#else
typedef struct CC_TransportStreamDemultiplexer CC_TransportStreamDemultiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_TransportStreamDemultiplexer_FWD_DEFINED__ */


#ifndef __CC_H264VideoDecoder_FWD_DEFINED__
#define __CC_H264VideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_H264VideoDecoder CC_H264VideoDecoder;
#else
typedef struct CC_H264VideoDecoder CC_H264VideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_H264VideoDecoder_FWD_DEFINED__ */


#ifndef __CC_H264VideoDecoder0_FWD_DEFINED__
#define __CC_H264VideoDecoder0_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_H264VideoDecoder0 CC_H264VideoDecoder0;
#else
typedef struct CC_H264VideoDecoder0 CC_H264VideoDecoder0;
#endif /* __cplusplus */

#endif 	/* __CC_H264VideoDecoder0_FWD_DEFINED__ */


#ifndef __CC_AVC1VideoDecoder_FWD_DEFINED__
#define __CC_AVC1VideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVC1VideoDecoder CC_AVC1VideoDecoder;
#else
typedef struct CC_AVC1VideoDecoder CC_AVC1VideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_AVC1VideoDecoder_FWD_DEFINED__ */


#ifndef __CC_AVC1VideoDecoder0_FWD_DEFINED__
#define __CC_AVC1VideoDecoder0_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVC1VideoDecoder0 CC_AVC1VideoDecoder0;
#else
typedef struct CC_AVC1VideoDecoder0 CC_AVC1VideoDecoder0;
#endif /* __cplusplus */

#endif 	/* __CC_AVC1VideoDecoder0_FWD_DEFINED__ */


#ifndef __CC_H264VideoEncoder_FWD_DEFINED__
#define __CC_H264VideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_H264VideoEncoder CC_H264VideoEncoder;
#else
typedef struct CC_H264VideoEncoder CC_H264VideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_H264VideoEncoder_FWD_DEFINED__ */


#ifndef __CC_H264VideoEncoderSettings_FWD_DEFINED__
#define __CC_H264VideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_H264VideoEncoderSettings CC_H264VideoEncoderSettings;
#else
typedef struct CC_H264VideoEncoderSettings CC_H264VideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_H264VideoEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_H264VideoSplitter_FWD_DEFINED__
#define __CC_H264VideoSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_H264VideoSplitter CC_H264VideoSplitter;
#else
typedef struct CC_H264VideoSplitter CC_H264VideoSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_H264VideoSplitter_FWD_DEFINED__ */


#ifndef __CC_MP4_Multiplexer_FWD_DEFINED__
#define __CC_MP4_Multiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MP4_Multiplexer CC_MP4_Multiplexer;
#else
typedef struct CC_MP4_Multiplexer CC_MP4_Multiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_MP4_Multiplexer_FWD_DEFINED__ */


#ifndef __CC_MP4_MultiplexerSettings_FWD_DEFINED__
#define __CC_MP4_MultiplexerSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MP4_MultiplexerSettings CC_MP4_MultiplexerSettings;
#else
typedef struct CC_MP4_MultiplexerSettings CC_MP4_MultiplexerSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MP4_MultiplexerSettings_FWD_DEFINED__ */


#ifndef __CC_MOV_Multiplexer_FWD_DEFINED__
#define __CC_MOV_Multiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MOV_Multiplexer CC_MOV_Multiplexer;
#else
typedef struct CC_MOV_Multiplexer CC_MOV_Multiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_MOV_Multiplexer_FWD_DEFINED__ */


#ifndef __CC_MP4_MuxerPinSettings_FWD_DEFINED__
#define __CC_MP4_MuxerPinSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MP4_MuxerPinSettings CC_MP4_MuxerPinSettings;
#else
typedef struct CC_MP4_MuxerPinSettings CC_MP4_MuxerPinSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MP4_MuxerPinSettings_FWD_DEFINED__ */


#ifndef __CC_MP4_MuxerVideoPinSettings_FWD_DEFINED__
#define __CC_MP4_MuxerVideoPinSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MP4_MuxerVideoPinSettings CC_MP4_MuxerVideoPinSettings;
#else
typedef struct CC_MP4_MuxerVideoPinSettings CC_MP4_MuxerVideoPinSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MP4_MuxerVideoPinSettings_FWD_DEFINED__ */


#ifndef __CC_MP4_MpegDashSettings_FWD_DEFINED__
#define __CC_MP4_MpegDashSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MP4_MpegDashSettings CC_MP4_MpegDashSettings;
#else
typedef struct CC_MP4_MpegDashSettings CC_MP4_MpegDashSettings;
#endif /* __cplusplus */

#endif 	/* __CC_MP4_MpegDashSettings_FWD_DEFINED__ */


#ifndef __CC_AAC_AudioDecoder_FWD_DEFINED__
#define __CC_AAC_AudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AAC_AudioDecoder CC_AAC_AudioDecoder;
#else
typedef struct CC_AAC_AudioDecoder CC_AAC_AudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_AAC_AudioDecoder_FWD_DEFINED__ */


#ifndef __CC_LATM_AAC_AudioDecoder_FWD_DEFINED__
#define __CC_LATM_AAC_AudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_LATM_AAC_AudioDecoder CC_LATM_AAC_AudioDecoder;
#else
typedef struct CC_LATM_AAC_AudioDecoder CC_LATM_AAC_AudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_LATM_AAC_AudioDecoder_FWD_DEFINED__ */


#ifndef __CC_AAC_AudioEncoder_FWD_DEFINED__
#define __CC_AAC_AudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AAC_AudioEncoder CC_AAC_AudioEncoder;
#else
typedef struct CC_AAC_AudioEncoder CC_AAC_AudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_AAC_AudioEncoder_FWD_DEFINED__ */


#ifndef __CC_AAC_AudioEncoderSettings_FWD_DEFINED__
#define __CC_AAC_AudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AAC_AudioEncoderSettings CC_AAC_AudioEncoderSettings;
#else
typedef struct CC_AAC_AudioEncoderSettings CC_AAC_AudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_AAC_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_AAC_AudioSplitter_FWD_DEFINED__
#define __CC_AAC_AudioSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AAC_AudioSplitter CC_AAC_AudioSplitter;
#else
typedef struct CC_AAC_AudioSplitter CC_AAC_AudioSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_AAC_AudioSplitter_FWD_DEFINED__ */


#ifndef __CC_AC3_AudioDecoder_FWD_DEFINED__
#define __CC_AC3_AudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AC3_AudioDecoder CC_AC3_AudioDecoder;
#else
typedef struct CC_AC3_AudioDecoder CC_AC3_AudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_AC3_AudioDecoder_FWD_DEFINED__ */


#ifndef __CC_AC3_AudioSplitter_FWD_DEFINED__
#define __CC_AC3_AudioSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AC3_AudioSplitter CC_AC3_AudioSplitter;
#else
typedef struct CC_AC3_AudioSplitter CC_AC3_AudioSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_AC3_AudioSplitter_FWD_DEFINED__ */


#ifndef __CC_AC3_AudioEncoder_FWD_DEFINED__
#define __CC_AC3_AudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AC3_AudioEncoder CC_AC3_AudioEncoder;
#else
typedef struct CC_AC3_AudioEncoder CC_AC3_AudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_AC3_AudioEncoder_FWD_DEFINED__ */


#ifndef __CC_AC3_AudioEncoderSettings_FWD_DEFINED__
#define __CC_AC3_AudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AC3_AudioEncoderSettings CC_AC3_AudioEncoderSettings;
#else
typedef struct CC_AC3_AudioEncoderSettings CC_AC3_AudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_AC3_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_AVCIntraDecoder_FWD_DEFINED__
#define __CC_AVCIntraDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVCIntraDecoder CC_AVCIntraDecoder;
#else
typedef struct CC_AVCIntraDecoder CC_AVCIntraDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_AVCIntraDecoder_FWD_DEFINED__ */


#ifndef __CC_AVCIntraDecoder2_FWD_DEFINED__
#define __CC_AVCIntraDecoder2_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVCIntraDecoder2 CC_AVCIntraDecoder2;
#else
typedef struct CC_AVCIntraDecoder2 CC_AVCIntraDecoder2;
#endif /* __cplusplus */

#endif 	/* __CC_AVCIntraDecoder2_FWD_DEFINED__ */


#ifndef __CC_AVCIntraEncoder_FWD_DEFINED__
#define __CC_AVCIntraEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVCIntraEncoder CC_AVCIntraEncoder;
#else
typedef struct CC_AVCIntraEncoder CC_AVCIntraEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_AVCIntraEncoder_FWD_DEFINED__ */


#ifndef __CC_AVCIntraEncoderSettings_FWD_DEFINED__
#define __CC_AVCIntraEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_AVCIntraEncoderSettings CC_AVCIntraEncoderSettings;
#else
typedef struct CC_AVCIntraEncoderSettings CC_AVCIntraEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_AVCIntraEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_Mpeg4VideoDecoder_FWD_DEFINED__
#define __CC_Mpeg4VideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Mpeg4VideoDecoder CC_Mpeg4VideoDecoder;
#else
typedef struct CC_Mpeg4VideoDecoder CC_Mpeg4VideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_Mpeg4VideoDecoder_FWD_DEFINED__ */


#ifndef __CC_MvxWriter_FWD_DEFINED__
#define __CC_MvxWriter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MvxWriter CC_MvxWriter;
#else
typedef struct CC_MvxWriter CC_MvxWriter;
#endif /* __cplusplus */

#endif 	/* __CC_MvxWriter_FWD_DEFINED__ */


#ifndef __CC_BluRay_PCM_AudioDecoder_FWD_DEFINED__
#define __CC_BluRay_PCM_AudioDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_BluRay_PCM_AudioDecoder CC_BluRay_PCM_AudioDecoder;
#else
typedef struct CC_BluRay_PCM_AudioDecoder CC_BluRay_PCM_AudioDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_BluRay_PCM_AudioDecoder_FWD_DEFINED__ */


#ifndef __CC_LPCM_AudioEncoder_FWD_DEFINED__
#define __CC_LPCM_AudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_LPCM_AudioEncoder CC_LPCM_AudioEncoder;
#else
typedef struct CC_LPCM_AudioEncoder CC_LPCM_AudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_LPCM_AudioEncoder_FWD_DEFINED__ */


#ifndef __CC_LPCM_AudioEncoderSettings_FWD_DEFINED__
#define __CC_LPCM_AudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_LPCM_AudioEncoderSettings CC_LPCM_AudioEncoderSettings;
#else
typedef struct CC_LPCM_AudioEncoderSettings CC_LPCM_AudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_LPCM_AudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_HLS_Multiplexer_FWD_DEFINED__
#define __CC_HLS_Multiplexer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HLS_Multiplexer CC_HLS_Multiplexer;
#else
typedef struct CC_HLS_Multiplexer CC_HLS_Multiplexer;
#endif /* __cplusplus */

#endif 	/* __CC_HLS_Multiplexer_FWD_DEFINED__ */


#ifndef __CC_HLS_MultiplexerSettings_FWD_DEFINED__
#define __CC_HLS_MultiplexerSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HLS_MultiplexerSettings CC_HLS_MultiplexerSettings;
#else
typedef struct CC_HLS_MultiplexerSettings CC_HLS_MultiplexerSettings;
#endif /* __cplusplus */

#endif 	/* __CC_HLS_MultiplexerSettings_FWD_DEFINED__ */


#ifndef __CC_J2K_VideoSplitter_FWD_DEFINED__
#define __CC_J2K_VideoSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_J2K_VideoSplitter CC_J2K_VideoSplitter;
#else
typedef struct CC_J2K_VideoSplitter CC_J2K_VideoSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_J2K_VideoSplitter_FWD_DEFINED__ */


#ifndef __CC_J2K_VideoDecoder_FWD_DEFINED__
#define __CC_J2K_VideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_J2K_VideoDecoder CC_J2K_VideoDecoder;
#else
typedef struct CC_J2K_VideoDecoder CC_J2K_VideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_J2K_VideoDecoder_FWD_DEFINED__ */


#ifndef __CC_SonyRaw_VideoDecoder_FWD_DEFINED__
#define __CC_SonyRaw_VideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_SonyRaw_VideoDecoder CC_SonyRaw_VideoDecoder;
#else
typedef struct CC_SonyRaw_VideoDecoder CC_SonyRaw_VideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_SonyRaw_VideoDecoder_FWD_DEFINED__ */


#ifndef __CC_DanielVideoSplitter_FWD_DEFINED__
#define __CC_DanielVideoSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoSplitter CC_DanielVideoSplitter;
#else
typedef struct CC_DanielVideoSplitter CC_DanielVideoSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoSplitter_FWD_DEFINED__ */


#ifndef __CC_DanielVideoDecoder_FWD_DEFINED__
#define __CC_DanielVideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoDecoder CC_DanielVideoDecoder;
#else
typedef struct CC_DanielVideoDecoder CC_DanielVideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoDecoder_FWD_DEFINED__ */


#ifndef __CC_DanielVideoDecoder_CUDA_FWD_DEFINED__
#define __CC_DanielVideoDecoder_CUDA_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoDecoder_CUDA CC_DanielVideoDecoder_CUDA;
#else
typedef struct CC_DanielVideoDecoder_CUDA CC_DanielVideoDecoder_CUDA;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoDecoder_CUDA_FWD_DEFINED__ */


#ifndef __CC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__
#define __CC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoDecoder_CudaPlayer CC_DanielVideoDecoder_CudaPlayer;
#else
typedef struct CC_DanielVideoDecoder_CudaPlayer CC_DanielVideoDecoder_CudaPlayer;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoDecoder_CudaPlayer_FWD_DEFINED__ */


#ifndef __CC_DanielVideoEncoder_FWD_DEFINED__
#define __CC_DanielVideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoEncoder CC_DanielVideoEncoder;
#else
typedef struct CC_DanielVideoEncoder CC_DanielVideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoEncoder_FWD_DEFINED__ */


#ifndef __CC_DanielVideoEncoder_CUDA_FWD_DEFINED__
#define __CC_DanielVideoEncoder_CUDA_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoEncoder_CUDA CC_DanielVideoEncoder_CUDA;
#else
typedef struct CC_DanielVideoEncoder_CUDA CC_DanielVideoEncoder_CUDA;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoEncoder_CUDA_FWD_DEFINED__ */


#ifndef __CC_DanielVideoEncoderSettings_FWD_DEFINED__
#define __CC_DanielVideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoEncoderSettings CC_DanielVideoEncoderSettings;
#else
typedef struct CC_DanielVideoEncoderSettings CC_DanielVideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__
#define __CC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_DanielVideoEncoderSettings_CUDA CC_DanielVideoEncoderSettings_CUDA;
#else
typedef struct CC_DanielVideoEncoderSettings_CUDA CC_DanielVideoEncoderSettings_CUDA;
#endif /* __cplusplus */

#endif 	/* __CC_DanielVideoEncoderSettings_CUDA_FWD_DEFINED__ */


#ifndef __CC_MediaReader_FWD_DEFINED__
#define __CC_MediaReader_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_MediaReader CC_MediaReader;
#else
typedef struct CC_MediaReader CC_MediaReader;
#endif /* __cplusplus */

#endif 	/* __CC_MediaReader_FWD_DEFINED__ */


#ifndef __CC_InputFile_FWD_DEFINED__
#define __CC_InputFile_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_InputFile CC_InputFile;
#else
typedef struct CC_InputFile CC_InputFile;
#endif /* __cplusplus */

#endif 	/* __CC_InputFile_FWD_DEFINED__ */


#ifndef __CC_OutputFile_FWD_DEFINED__
#define __CC_OutputFile_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_OutputFile CC_OutputFile;
#else
typedef struct CC_OutputFile CC_OutputFile;
#endif /* __cplusplus */

#endif 	/* __CC_OutputFile_FWD_DEFINED__ */


#ifndef __CC_WavAudioEncoder_FWD_DEFINED__
#define __CC_WavAudioEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_WavAudioEncoder CC_WavAudioEncoder;
#else
typedef struct CC_WavAudioEncoder CC_WavAudioEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_WavAudioEncoder_FWD_DEFINED__ */


#ifndef __CC_WavAudioEncoderSettings_FWD_DEFINED__
#define __CC_WavAudioEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_WavAudioEncoderSettings CC_WavAudioEncoderSettings;
#else
typedef struct CC_WavAudioEncoderSettings CC_WavAudioEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_WavAudioEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_HEVCVideoEncoder_FWD_DEFINED__
#define __CC_HEVCVideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HEVCVideoEncoder CC_HEVCVideoEncoder;
#else
typedef struct CC_HEVCVideoEncoder CC_HEVCVideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_HEVCVideoEncoder_FWD_DEFINED__ */


#ifndef __CC_HEVCVideoEncoderSettings_FWD_DEFINED__
#define __CC_HEVCVideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HEVCVideoEncoderSettings CC_HEVCVideoEncoderSettings;
#else
typedef struct CC_HEVCVideoEncoderSettings CC_HEVCVideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_HEVCVideoEncoderSettings_FWD_DEFINED__ */


#ifndef __CC_HEVCVideoSplitter_FWD_DEFINED__
#define __CC_HEVCVideoSplitter_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HEVCVideoSplitter CC_HEVCVideoSplitter;
#else
typedef struct CC_HEVCVideoSplitter CC_HEVCVideoSplitter;
#endif /* __cplusplus */

#endif 	/* __CC_HEVCVideoSplitter_FWD_DEFINED__ */


#ifndef __CC_HEVCVideoDecoder_FWD_DEFINED__
#define __CC_HEVCVideoDecoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HEVCVideoDecoder CC_HEVCVideoDecoder;
#else
typedef struct CC_HEVCVideoDecoder CC_HEVCVideoDecoder;
#endif /* __cplusplus */

#endif 	/* __CC_HEVCVideoDecoder_FWD_DEFINED__ */


#ifndef __CC_HEVCVideoDecoder0_FWD_DEFINED__
#define __CC_HEVCVideoDecoder0_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_HEVCVideoDecoder0 CC_HEVCVideoDecoder0;
#else
typedef struct CC_HEVCVideoDecoder0 CC_HEVCVideoDecoder0;
#endif /* __cplusplus */

#endif 	/* __CC_HEVCVideoDecoder0_FWD_DEFINED__ */


#ifndef __CC_Y4M_VideoEncoder_FWD_DEFINED__
#define __CC_Y4M_VideoEncoder_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Y4M_VideoEncoder CC_Y4M_VideoEncoder;
#else
typedef struct CC_Y4M_VideoEncoder CC_Y4M_VideoEncoder;
#endif /* __cplusplus */

#endif 	/* __CC_Y4M_VideoEncoder_FWD_DEFINED__ */


#ifndef __CC_Y4M_VideoEncoderSettings_FWD_DEFINED__
#define __CC_Y4M_VideoEncoderSettings_FWD_DEFINED__

#ifdef __cplusplus
typedef class CC_Y4M_VideoEncoderSettings CC_Y4M_VideoEncoderSettings;
#else
typedef struct CC_Y4M_VideoEncoderSettings CC_Y4M_VideoEncoderSettings;
#endif /* __cplusplus */

#endif 	/* __CC_Y4M_VideoEncoderSettings_FWD_DEFINED__ */


/* header files for imported files */
#include "Unknwn.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_Cinecoder_0000_0000 */
/* [local] */ 

#define	CINECODER_VERSION	( 33018 )

#ifndef __CINECODER_DISABLE_PRINT_VERSION__
#pragma message ("------------------------------------------------------------------")
#pragma message (" Cinegy(r) Cinecoder(tm) version " "3.30.18.13164" " (build date " "11-Okt-2017" "11-Okt-2017")
#pragma message ("------------------------------------------------------------------")
#endif

#pragma pack(push, 1)
typedef signed char CC_INT8;

typedef short CC_INT16;

typedef int CC_INT32;

typedef long long CC_INT64;

typedef unsigned char CC_UINT8;

typedef unsigned short CC_UINT16;

typedef unsigned int CC_UINT32;

typedef unsigned long long CC_UINT64;

typedef CC_UINT8 CC_BYTE;

typedef CC_UINT16 CC_WORD;

typedef int CC_INT;

typedef DWORD CC_UINT;

typedef float CC_FLOAT;

typedef double CC_DOUBLE;

typedef VARIANT_BOOL CC_BOOL;

#define	CC_FALSE	( ( CC_BOOL  )0 )

#define	CC_TRUE	( ( CC_BOOL  )-1 )

#define	CC_SOFT_FLUSH	( ( CC_BOOL  )-2 )

typedef struct CC_RATIONAL
    {
    CC_INT num;
    CC_UINT denom;
    } 	CC_RATIONAL;

inline const CC_RATIONAL MK_RATIONAL(CC_INT32  n, CC_UINT32 d) { CC_RATIONAL r={n,d}; return r; }
#define CC_RATIONAL_DEFINED
typedef BYTE *CC_PBYTE;

typedef const BYTE *CC_PCBYTE;

typedef CC_UINT CC_AMOUNT;

typedef BSTR CC_STRING;

typedef CC_STRING CC_TEXT;

typedef POINT CC_POINT;

typedef SIZE CC_SIZE;

typedef RECT CC_RECT;

typedef CC_RATIONAL CC_FRAME_RATE;

typedef CC_RATIONAL CC_SAMPLE_RATE;

typedef LONGLONG CC_BITRATE;

typedef LONGLONG CC_TIME;

typedef CC_UINT CC_TIMEBASE;

typedef CC_UINT CC_PERIOD;

typedef CC_INT64 CC_OFFSET;

typedef INT_PTR CC_AFFINITY;

typedef struct CC_TIME_INTERVAL
    {
    CC_TIME start_time;
    CC_TIME stop_time;
    } 	CC_TIME_INTERVAL;

#define	CC_NO_TIME	( ( CC_TIME  )-1 )

#ifdef __cplusplus
namespace cinecoder {
inline bool CC_TIME_IS_SET(CC_TIME t) { return t >= 0; }
#define CC_TIME_DEFINED
};
#endif
typedef /* [v1_enum] */ 
enum CC_PRIORITY_VALUES
    {
        CC_THREAD_PRIORITY_IDLE	= -15,
        CC_THREAD_PRIORITY_LOWEST	= -2,
        CC_THREAD_PRIORITY_BELOW_NORMAL	= -1,
        CC_THREAD_PRIORITY_NORMAL	= 0,
        CC_THREAD_PRIORITY_ABOVE_NORMAL	= 1,
        CC_THREAD_PRIORITY_HIGHEST	= 2,
        CC_THREAD_PRIORITY_TIME_CRITICAL	= 15
    } 	CC_PRIORITY_VALUES;

typedef CC_PRIORITY_VALUES CC_PRIORITY;

typedef CC_DOUBLE CC_QUALITY_MEASURE;

#define CC_SIZE_DEFINED
#ifdef __cplusplus
namespace cinecoder {
inline const CC_SIZE     MK_SIZE    (CC_INT16 cx, CC_INT16 cy) { CC_SIZE s={cx,cy}; return s; }
};
#endif
typedef struct CC_VERSION_INFO
    {
    CC_BYTE VersionHi;
    CC_BYTE VersionLo;
    CC_WORD EditionNo;
    CC_INT32 RevisionNo;
    } 	CC_VERSION_INFO;

typedef /* [v1_enum] */ 
enum CC_PERIOD_FLAGS
    {
        FRQ_ONCE	= 0,
        FRQ_FOREVER	= 0x1,
        FRQ_TIMEVAL_MS	= 0x80000000,
        FRQ_VALUE_MASK	= 0xffffff,
        FRQ_EVERY_RAP	= 0x1000000,
        FRQ_EVERY_I_FRAME	= 0x2000000,
        FRQ_EVERY_P_FRAME	= 0x3000000,
        FRQ_EVERY_B_FRAME	= 0x4000000,
        FRQ_SYNC_TO_MASTER	= 0x40000000,
        FRQ_FRAME_TYPE_MASK	= 0xf000000,
        FRQ_FRAME_TYPE_SHFT	= 24
    } 	CC_PERIOD_FLAGS;

#define CC_GET_PERIOD_VALUE(p) ((p)&FRQ_VALUE_MASK)
typedef /* [v1_enum] */ 
enum CC_BITRATE_MODE
    {
        CC_BITRATE_MODE_UNKNOWN	= 0,
        CC_CBR	= ( CC_BITRATE_MODE_UNKNOWN + 1 ) ,
        CC_VBR	= ( CC_CBR + 1 ) ,
        CC_CQ	= 77
    } 	CC_BITRATE_MODE;

typedef /* [v1_enum] */ 
enum CC_RECOVER_FLAGS
    {
        CC_RECOVER_NONE	= 0,
        CC_RECOVER_BREAKS	= 1,
        CC_RECOVER_PTS	= 2,
        CC_RECOVER_GOP_TC	= 0x10
    } 	CC_RECOVER_FLAGS;

typedef struct CC_TIMECODE
    {
    CC_BYTE h;
    CC_BYTE m;
    CC_BYTE s;
    CC_BYTE f;
    CC_BOOL drop_frame;
    } 	CC_TIMECODE;

#ifdef __cplusplus
namespace cinecoder {
inline const CC_TIMECODE MK_TIMECODE(CC_BYTE h, CC_BYTE m, CC_BYTE s, CC_BYTE f, bool drop = false) { CC_TIMECODE tc={h,m,s,f,drop?CC_TRUE:CC_FALSE}; return tc; }
};
#endif
#ifdef __cplusplus
namespace cinecoder {
inline HRESULT HRESULT_FROM_ERRNO(int e) { return HRESULT(e ? (0xE0000000U | e) : S_OK); }
};
#endif

#pragma pack(pop)
#ifdef _WIN32
#define _DSO_VISIBLE_
#else
#define _DSO_VISIBLE_ __attribute__ ((visibility("default")))
#endif
STDAPI_(CC_VERSION_INFO)  Cinecoder_GetVersion        ()                   _DSO_VISIBLE_;
STDAPI                    Cinecoder_CreateClassFactory(ICC_ClassFactory**) _DSO_VISIBLE_;
STDAPI                    Cinecoder_SetErrorHandler   (ICC_ErrorHandler *pHandler, ICC_ErrorHandler **pOldHandler = 0) _DSO_VISIBLE_;
STDAPI                    Cinecoder_GetErrorHandler   (ICC_ErrorHandler**pHandler) _DSO_VISIBLE_;
STDAPI_(LPCSTR)           Cinecoder_GetErrorString    (HRESULT code)       _DSO_VISIBLE_;
STDAPI                    Cinecoder_ConvertProfile    (LPCSTR OldProfile, LPTSTR NewProfileBuff, int NewProfileBuffLen, CC_BOOL bScheme) _DSO_VISIBLE_;
#undef _DSO_VISIBLE_




extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0000_v0_0_s_ifspec;

#ifndef __ICC_ClassFactory_INTERFACE_DEFINED__
#define __ICC_ClassFactory_INTERFACE_DEFINED__

/* interface ICC_ClassFactory */
/* [local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ICC_ClassFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e7d4b675-63d4-43f4-91fa-0af230111d10")
    ICC_ClassFactory : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AssignLicense( 
            /* [in] */ LPCSTR pCompanyName,
            /* [in] */ LPCSTR pLicense) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFIID riid,
            /* [iid_is][retval][out] */ IUnknown **ppu) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateInstanceByName( 
            /* [in] */ CC_STRING pObjName,
            /* [retval][out] */ IUnknown **ppu) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateSchema( 
            /* [in] */ CC_STRING strXML,
            /* [retval][out] */ ICC_Schema **p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddClassCreator( 
            /* [in] */ CLSID clsid,
            /* [in] */ CC_STRING pClassName,
            /* [in] */ ICC_ClassCreator *pMaker) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultTimeBase( 
            /* [retval][out] */ CC_TIMEBASE *__MIDL__ICC_ClassFactory0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DefaultTimeBase( 
            /* [in] */ CC_TIMEBASE __MIDL__ICC_ClassFactory0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultThreadsAffinity( 
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_ClassFactory0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DefaultThreadsAffinity( 
            /* [in] */ CC_AFFINITY __MIDL__ICC_ClassFactory0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultThreadsPriority( 
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_ClassFactory0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DefaultThreadsPriority( 
            /* [in] */ CC_PRIORITY __MIDL__ICC_ClassFactory0005) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadPlugin( 
            /* [in] */ CC_STRING pFileName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ClassFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ClassFactory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ClassFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ClassFactory * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AssignLicense )( 
            ICC_ClassFactory * This,
            /* [in] */ LPCSTR pCompanyName,
            /* [in] */ LPCSTR pLicense);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            ICC_ClassFactory * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFIID riid,
            /* [iid_is][retval][out] */ IUnknown **ppu);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstanceByName )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_STRING pObjName,
            /* [retval][out] */ IUnknown **ppu);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSchema )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_STRING strXML,
            /* [retval][out] */ ICC_Schema **p);
        
        HRESULT ( STDMETHODCALLTYPE *AddClassCreator )( 
            ICC_ClassFactory * This,
            /* [in] */ CLSID clsid,
            /* [in] */ CC_STRING pClassName,
            /* [in] */ ICC_ClassCreator *pMaker);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTimeBase )( 
            ICC_ClassFactory * This,
            /* [retval][out] */ CC_TIMEBASE *__MIDL__ICC_ClassFactory0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTimeBase )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_TIMEBASE __MIDL__ICC_ClassFactory0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultThreadsAffinity )( 
            ICC_ClassFactory * This,
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_ClassFactory0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultThreadsAffinity )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_AFFINITY __MIDL__ICC_ClassFactory0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultThreadsPriority )( 
            ICC_ClassFactory * This,
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_ClassFactory0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultThreadsPriority )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_PRIORITY __MIDL__ICC_ClassFactory0005);
        
        HRESULT ( STDMETHODCALLTYPE *LoadPlugin )( 
            ICC_ClassFactory * This,
            /* [in] */ CC_STRING pFileName);
        
        END_INTERFACE
    } ICC_ClassFactoryVtbl;

    interface ICC_ClassFactory
    {
        CONST_VTBL struct ICC_ClassFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ClassFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ClassFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ClassFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ClassFactory_AssignLicense(This,pCompanyName,pLicense)	\
    ( (This)->lpVtbl -> AssignLicense(This,pCompanyName,pLicense) ) 

#define ICC_ClassFactory_CreateInstance(This,rclsid,riid,ppu)	\
    ( (This)->lpVtbl -> CreateInstance(This,rclsid,riid,ppu) ) 

#define ICC_ClassFactory_CreateInstanceByName(This,pObjName,ppu)	\
    ( (This)->lpVtbl -> CreateInstanceByName(This,pObjName,ppu) ) 

#define ICC_ClassFactory_CreateSchema(This,strXML,p)	\
    ( (This)->lpVtbl -> CreateSchema(This,strXML,p) ) 

#define ICC_ClassFactory_AddClassCreator(This,clsid,pClassName,pMaker)	\
    ( (This)->lpVtbl -> AddClassCreator(This,clsid,pClassName,pMaker) ) 

#define ICC_ClassFactory_get_DefaultTimeBase(This,__MIDL__ICC_ClassFactory0000)	\
    ( (This)->lpVtbl -> get_DefaultTimeBase(This,__MIDL__ICC_ClassFactory0000) ) 

#define ICC_ClassFactory_put_DefaultTimeBase(This,__MIDL__ICC_ClassFactory0001)	\
    ( (This)->lpVtbl -> put_DefaultTimeBase(This,__MIDL__ICC_ClassFactory0001) ) 

#define ICC_ClassFactory_get_DefaultThreadsAffinity(This,__MIDL__ICC_ClassFactory0002)	\
    ( (This)->lpVtbl -> get_DefaultThreadsAffinity(This,__MIDL__ICC_ClassFactory0002) ) 

#define ICC_ClassFactory_put_DefaultThreadsAffinity(This,__MIDL__ICC_ClassFactory0003)	\
    ( (This)->lpVtbl -> put_DefaultThreadsAffinity(This,__MIDL__ICC_ClassFactory0003) ) 

#define ICC_ClassFactory_get_DefaultThreadsPriority(This,__MIDL__ICC_ClassFactory0004)	\
    ( (This)->lpVtbl -> get_DefaultThreadsPriority(This,__MIDL__ICC_ClassFactory0004) ) 

#define ICC_ClassFactory_put_DefaultThreadsPriority(This,__MIDL__ICC_ClassFactory0005)	\
    ( (This)->lpVtbl -> put_DefaultThreadsPriority(This,__MIDL__ICC_ClassFactory0005) ) 

#define ICC_ClassFactory_LoadPlugin(This,pFileName)	\
    ( (This)->lpVtbl -> LoadPlugin(This,pFileName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ClassFactory_INTERFACE_DEFINED__ */


#ifndef __ICC_Schema_INTERFACE_DEFINED__
#define __ICC_Schema_INTERFACE_DEFINED__

/* interface ICC_Schema */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Schema;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("48b6acc6-3d65-41f4-8005-cf19058afc7e")
    ICC_Schema : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Done( 
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ CC_UINT OrderNumber,
            /* [retval][out] */ IUnknown **ppObj) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ObjectCount( 
            /* [retval][out] */ CC_UINT *pNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindObjectByName( 
            /* [in] */ CC_STRING pObjName,
            /* [retval][out] */ IUnknown **ppObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindObjectByInterface( 
            /* [in] */ IID ObjIID,
            /* [in] */ CC_UINT OrderNumber,
            /* [retval][out] */ IUnknown **ppObj) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectCountByInterface( 
            /* [in] */ IID ObjIID,
            /* [retval][out] */ CC_UINT *ObjNumber) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ CC_STRING *ppName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SchemaVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Schema * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Schema * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Schema * This);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Schema * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            ICC_Schema * This,
            /* [in] */ CC_UINT OrderNumber,
            /* [retval][out] */ IUnknown **ppObj);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectCount )( 
            ICC_Schema * This,
            /* [retval][out] */ CC_UINT *pNumber);
        
        HRESULT ( STDMETHODCALLTYPE *FindObjectByName )( 
            ICC_Schema * This,
            /* [in] */ CC_STRING pObjName,
            /* [retval][out] */ IUnknown **ppObj);
        
        HRESULT ( STDMETHODCALLTYPE *FindObjectByInterface )( 
            ICC_Schema * This,
            /* [in] */ IID ObjIID,
            /* [in] */ CC_UINT OrderNumber,
            /* [retval][out] */ IUnknown **ppObj);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectCountByInterface )( 
            ICC_Schema * This,
            /* [in] */ IID ObjIID,
            /* [retval][out] */ CC_UINT *ObjNumber);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICC_Schema * This,
            /* [retval][out] */ CC_STRING *ppName);
        
        END_INTERFACE
    } ICC_SchemaVtbl;

    interface ICC_Schema
    {
        CONST_VTBL struct ICC_SchemaVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Schema_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Schema_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Schema_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Schema_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Schema_GetObject(This,OrderNumber,ppObj)	\
    ( (This)->lpVtbl -> GetObject(This,OrderNumber,ppObj) ) 

#define ICC_Schema_get_ObjectCount(This,pNumber)	\
    ( (This)->lpVtbl -> get_ObjectCount(This,pNumber) ) 

#define ICC_Schema_FindObjectByName(This,pObjName,ppObj)	\
    ( (This)->lpVtbl -> FindObjectByName(This,pObjName,ppObj) ) 

#define ICC_Schema_FindObjectByInterface(This,ObjIID,OrderNumber,ppObj)	\
    ( (This)->lpVtbl -> FindObjectByInterface(This,ObjIID,OrderNumber,ppObj) ) 

#define ICC_Schema_GetObjectCountByInterface(This,ObjIID,ObjNumber)	\
    ( (This)->lpVtbl -> GetObjectCountByInterface(This,ObjIID,ObjNumber) ) 

#define ICC_Schema_get_Name(This,ppName)	\
    ( (This)->lpVtbl -> get_Name(This,ppName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Schema_INTERFACE_DEFINED__ */


#ifndef __ICC_ClassCreator_INTERFACE_DEFINED__
#define __ICC_ClassCreator_INTERFACE_DEFINED__

/* interface ICC_ClassCreator */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ClassCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4735fb44-54bc-478a-8ffa-3ac6cb320a1a")
    ICC_ClassCreator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateInstance( 
            /* [in] */ REFCLSID rclsid,
            /* [retval][out] */ IUnknown **ppu) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ClassCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ClassCreator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ClassCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ClassCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
            ICC_ClassCreator * This,
            /* [in] */ REFCLSID rclsid,
            /* [retval][out] */ IUnknown **ppu);
        
        END_INTERFACE
    } ICC_ClassCreatorVtbl;

    interface ICC_ClassCreator
    {
        CONST_VTBL struct ICC_ClassCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ClassCreator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ClassCreator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ClassCreator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ClassCreator_CreateInstance(This,rclsid,ppu)	\
    ( (This)->lpVtbl -> CreateInstance(This,rclsid,ppu) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ClassCreator_INTERFACE_DEFINED__ */


#ifndef __ICC_ErrorHandler_INTERFACE_DEFINED__
#define __ICC_ErrorHandler_INTERFACE_DEFINED__

/* interface ICC_ErrorHandler */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ErrorHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1fb875da-bdf4-4de9-b591-a3dc77d370c9")
    ICC_ErrorHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ErrorHandlerFunc( 
            HRESULT ErrCode,
            LPCSTR ErrDescription,
            LPCSTR pFileName,
            INT LineNo) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ErrorHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ErrorHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ErrorHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ErrorHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *ErrorHandlerFunc )( 
            ICC_ErrorHandler * This,
            HRESULT ErrCode,
            LPCSTR ErrDescription,
            LPCSTR pFileName,
            INT LineNo);
        
        END_INTERFACE
    } ICC_ErrorHandlerVtbl;

    interface ICC_ErrorHandler
    {
        CONST_VTBL struct ICC_ErrorHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ErrorHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ErrorHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ErrorHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ErrorHandler_ErrorHandlerFunc(This,ErrCode,ErrDescription,pFileName,LineNo)	\
    ( (This)->lpVtbl -> ErrorHandlerFunc(This,ErrCode,ErrDescription,pFileName,LineNo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ErrorHandler_INTERFACE_DEFINED__ */


#ifndef __ICC_ErrorHandlerGetter_INTERFACE_DEFINED__
#define __ICC_ErrorHandlerGetter_INTERFACE_DEFINED__

/* interface ICC_ErrorHandlerGetter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ErrorHandlerGetter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a84dee36-545b-4c77-b688-08b213b1c154")
    ICC_ErrorHandlerGetter : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ErrorHandler( 
            /* [retval][out] */ ICC_ErrorHandler **__MIDL__ICC_ErrorHandlerGetter0000) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ErrorHandlerGetterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ErrorHandlerGetter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ErrorHandlerGetter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ErrorHandlerGetter * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorHandler )( 
            ICC_ErrorHandlerGetter * This,
            /* [retval][out] */ ICC_ErrorHandler **__MIDL__ICC_ErrorHandlerGetter0000);
        
        END_INTERFACE
    } ICC_ErrorHandlerGetterVtbl;

    interface ICC_ErrorHandlerGetter
    {
        CONST_VTBL struct ICC_ErrorHandlerGetterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ErrorHandlerGetter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ErrorHandlerGetter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ErrorHandlerGetter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ErrorHandlerGetter_get_ErrorHandler(This,__MIDL__ICC_ErrorHandlerGetter0000)	\
    ( (This)->lpVtbl -> get_ErrorHandler(This,__MIDL__ICC_ErrorHandlerGetter0000) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ErrorHandlerGetter_INTERFACE_DEFINED__ */


#ifndef __ICC_ErrorHandlerProp_INTERFACE_DEFINED__
#define __ICC_ErrorHandlerProp_INTERFACE_DEFINED__

/* interface ICC_ErrorHandlerProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ErrorHandlerProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2cff007c-31c3-45bf-8ac1-3b169c4ccd7b")
    ICC_ErrorHandlerProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ErrorHandler( 
            /* [retval][out] */ ICC_ErrorHandler **__MIDL__ICC_ErrorHandlerProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ErrorHandler( 
            /* [in] */ ICC_ErrorHandler *__MIDL__ICC_ErrorHandlerProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ErrorHandlerPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ErrorHandlerProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ErrorHandlerProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ErrorHandlerProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorHandler )( 
            ICC_ErrorHandlerProp * This,
            /* [retval][out] */ ICC_ErrorHandler **__MIDL__ICC_ErrorHandlerProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorHandler )( 
            ICC_ErrorHandlerProp * This,
            /* [in] */ ICC_ErrorHandler *__MIDL__ICC_ErrorHandlerProp0001);
        
        END_INTERFACE
    } ICC_ErrorHandlerPropVtbl;

    interface ICC_ErrorHandlerProp
    {
        CONST_VTBL struct ICC_ErrorHandlerPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ErrorHandlerProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ErrorHandlerProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ErrorHandlerProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ErrorHandlerProp_get_ErrorHandler(This,__MIDL__ICC_ErrorHandlerProp0000)	\
    ( (This)->lpVtbl -> get_ErrorHandler(This,__MIDL__ICC_ErrorHandlerProp0000) ) 

#define ICC_ErrorHandlerProp_put_ErrorHandler(This,__MIDL__ICC_ErrorHandlerProp0001)	\
    ( (This)->lpVtbl -> put_ErrorHandler(This,__MIDL__ICC_ErrorHandlerProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ErrorHandlerProp_INTERFACE_DEFINED__ */


#ifndef __ICC_ClassFactoryProvider_INTERFACE_DEFINED__
#define __ICC_ClassFactoryProvider_INTERFACE_DEFINED__

/* interface ICC_ClassFactoryProvider */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ClassFactoryProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dea107a0-559e-4908-94fc-8e17b9f0e1ad")
    ICC_ClassFactoryProvider : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Factory( 
            /* [retval][out] */ ICC_ClassFactory **__MIDL__ICC_ClassFactoryProvider0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Factory( 
            /* [in] */ ICC_ClassFactory *__MIDL__ICC_ClassFactoryProvider0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ClassFactoryProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ClassFactoryProvider * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ClassFactoryProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ClassFactoryProvider * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Factory )( 
            ICC_ClassFactoryProvider * This,
            /* [retval][out] */ ICC_ClassFactory **__MIDL__ICC_ClassFactoryProvider0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Factory )( 
            ICC_ClassFactoryProvider * This,
            /* [in] */ ICC_ClassFactory *__MIDL__ICC_ClassFactoryProvider0001);
        
        END_INTERFACE
    } ICC_ClassFactoryProviderVtbl;

    interface ICC_ClassFactoryProvider
    {
        CONST_VTBL struct ICC_ClassFactoryProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ClassFactoryProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ClassFactoryProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ClassFactoryProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ClassFactoryProvider_get_Factory(This,__MIDL__ICC_ClassFactoryProvider0000)	\
    ( (This)->lpVtbl -> get_Factory(This,__MIDL__ICC_ClassFactoryProvider0000) ) 

#define ICC_ClassFactoryProvider_put_Factory(This,__MIDL__ICC_ClassFactoryProvider0001)	\
    ( (This)->lpVtbl -> put_Factory(This,__MIDL__ICC_ClassFactoryProvider0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ClassFactoryProvider_INTERFACE_DEFINED__ */


#ifndef __ICC_PluginDescr_INTERFACE_DEFINED__
#define __ICC_PluginDescr_INTERFACE_DEFINED__

/* interface ICC_PluginDescr */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_PluginDescr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa304da6-c855-4fda-822c-32da58bcbaf3")
    ICC_PluginDescr : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LibId( 
            /* [retval][out] */ GUID *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ CC_STRING *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ CC_VERSION_INFO *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumClasses( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassCreator( 
            /* [in] */ CC_UINT idx,
            /* [out] */ CLSID *clsid,
            /* [out] */ CC_STRING *name,
            /* [out] */ ICC_ClassCreator **pmaker) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetErrorHandlerGetter( 
            /* [in] */ ICC_ErrorHandlerGetter *pHandler) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_PluginDescrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_PluginDescr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_PluginDescr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_PluginDescr * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LibId )( 
            ICC_PluginDescr * This,
            /* [retval][out] */ GUID *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ICC_PluginDescr * This,
            /* [retval][out] */ CC_STRING *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            ICC_PluginDescr * This,
            /* [retval][out] */ CC_VERSION_INFO *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumClasses )( 
            ICC_PluginDescr * This,
            /* [retval][out] */ CC_UINT *p);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassCreator )( 
            ICC_PluginDescr * This,
            /* [in] */ CC_UINT idx,
            /* [out] */ CLSID *clsid,
            /* [out] */ CC_STRING *name,
            /* [out] */ ICC_ClassCreator **pmaker);
        
        HRESULT ( STDMETHODCALLTYPE *SetErrorHandlerGetter )( 
            ICC_PluginDescr * This,
            /* [in] */ ICC_ErrorHandlerGetter *pHandler);
        
        END_INTERFACE
    } ICC_PluginDescrVtbl;

    interface ICC_PluginDescr
    {
        CONST_VTBL struct ICC_PluginDescrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_PluginDescr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_PluginDescr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_PluginDescr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_PluginDescr_get_LibId(This,p)	\
    ( (This)->lpVtbl -> get_LibId(This,p) ) 

#define ICC_PluginDescr_get_Name(This,p)	\
    ( (This)->lpVtbl -> get_Name(This,p) ) 

#define ICC_PluginDescr_get_Version(This,p)	\
    ( (This)->lpVtbl -> get_Version(This,p) ) 

#define ICC_PluginDescr_get_NumClasses(This,p)	\
    ( (This)->lpVtbl -> get_NumClasses(This,p) ) 

#define ICC_PluginDescr_GetClassCreator(This,idx,clsid,name,pmaker)	\
    ( (This)->lpVtbl -> GetClassCreator(This,idx,clsid,name,pmaker) ) 

#define ICC_PluginDescr_SetErrorHandlerGetter(This,pHandler)	\
    ( (This)->lpVtbl -> SetErrorHandlerGetter(This,pHandler) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_PluginDescr_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0008 */
/* [local] */ 

typedef HRESULT (STDAPICALLTYPE *GetPluginDescrProc)(ICC_PluginDescr**);


extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0008_v0_0_s_ifspec;

#ifndef __ICC_Object_INTERFACE_DEFINED__
#define __ICC_Object_INTERFACE_DEFINED__

/* interface ICC_Object */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Object;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42d33946-c343-43c5-9ca0-85a3362102c4")
    ICC_Object : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CLSID( 
            /* [retval][out] */ CLSID *pclsid) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CLSName( 
            /* [retval][out] */ CC_STRING *pName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Object * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Object * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Object * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CLSID )( 
            ICC_Object * This,
            /* [retval][out] */ CLSID *pclsid);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CLSName )( 
            ICC_Object * This,
            /* [retval][out] */ CC_STRING *pName);
        
        END_INTERFACE
    } ICC_ObjectVtbl;

    interface ICC_Object
    {
        CONST_VTBL struct ICC_ObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Object_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Object_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Object_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Object_get_CLSID(This,pclsid)	\
    ( (This)->lpVtbl -> get_CLSID(This,pclsid) ) 

#define ICC_Object_get_CLSName(This,pName)	\
    ( (This)->lpVtbl -> get_CLSName(This,pName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Object_INTERFACE_DEFINED__ */


#ifndef __ICC_Settings_INTERFACE_DEFINED__
#define __ICC_Settings_INTERFACE_DEFINED__

/* interface ICC_Settings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Settings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AA8AE4DE-938F-4eb3-AD44-363464D10A5D")
    ICC_Settings : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clear( 
            /* [in] */ LPCSTR strVarName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Assigned( 
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000 = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XML( 
            /* [retval][out] */ CC_STRING *pstrXml) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_XML( 
            /* [in] */ CC_STRING strXml) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Settings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Settings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Settings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Settings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Settings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Settings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Settings * This,
            /* [in] */ CC_STRING strXml);
        
        END_INTERFACE
    } ICC_SettingsVtbl;

    interface ICC_Settings
    {
        CONST_VTBL struct ICC_SettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Settings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Settings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Settings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Settings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Settings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Settings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Settings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Settings_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamProcessor_INTERFACE_DEFINED__
#define __ICC_StreamProcessor_INTERFACE_DEFINED__

/* interface ICC_StreamProcessor */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamProcessor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f43bfdf8-1ae4-4626-8535-15c49213d208")
    ICC_StreamProcessor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [defaultvalue][in] */ ICC_Settings *pSettings = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitByXml( 
            /* [in] */ CC_STRING strXML) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Done( 
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsActive( 
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000 = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimeBase( 
            /* [retval][out] */ CC_TIMEBASE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimeBase( 
            /* [in] */ CC_TIMEBASE p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamInfo( 
            /* [retval][out] */ ICC_Settings **p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsDataReady( 
            /* [defaultvalue][retval][out] */ CC_BOOL *p = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataInfo( 
            /* [retval][out] */ ICC_Settings **s) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutputCallback( 
            /* [retval][out] */ IUnknown **p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutputCallback( 
            /* [in] */ IUnknown *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamProcessorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamProcessor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamProcessor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamProcessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_StreamProcessor * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_StreamProcessor * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_StreamProcessor * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_StreamProcessor * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_StreamProcessor * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_StreamProcessor * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_StreamProcessor * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_StreamProcessor * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_StreamProcessor * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_StreamProcessor * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_StreamProcessor * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_StreamProcessor * This,
            /* [in] */ IUnknown *p);
        
        END_INTERFACE
    } ICC_StreamProcessorVtbl;

    interface ICC_StreamProcessor
    {
        CONST_VTBL struct ICC_StreamProcessorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamProcessor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamProcessor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamProcessor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamProcessor_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_StreamProcessor_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_StreamProcessor_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_StreamProcessor_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_StreamProcessor_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_StreamProcessor_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_StreamProcessor_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_StreamProcessor_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_StreamProcessor_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_StreamProcessor_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_StreamProcessor_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_StreamProcessor_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamProcessor_INTERFACE_DEFINED__ */


#ifndef __ICC_ByteStreamProducer_INTERFACE_DEFINED__
#define __ICC_ByteStreamProducer_INTERFACE_DEFINED__

/* interface ICC_ByteStreamProducer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ByteStreamProducer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA54F9EB-498D-471c-8C01-A88830C6EC01")
    ICC_ByteStreamProducer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetData( 
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ByteStreamProducerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ByteStreamProducer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ByteStreamProducer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ByteStreamProducer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_ByteStreamProducer * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        END_INTERFACE
    } ICC_ByteStreamProducerVtbl;

    interface ICC_ByteStreamProducer
    {
        CONST_VTBL struct ICC_ByteStreamProducerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ByteStreamProducer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ByteStreamProducer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ByteStreamProducer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ByteStreamProducer_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ByteStreamProducer_INTERFACE_DEFINED__ */


#ifndef __ICC_ByteStreamConsumer_INTERFACE_DEFINED__
#define __ICC_ByteStreamConsumer_INTERFACE_DEFINED__

/* interface ICC_ByteStreamConsumer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ByteStreamConsumer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2D8791E2-227D-4898-A64B-525ABAE583DA")
    ICC_ByteStreamConsumer : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE ProcessData( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset = 0,
            /* [defaultvalue][in] */ CC_TIME pts = CC_NO_TIME,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ByteStreamConsumerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ByteStreamConsumer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ByteStreamConsumer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ByteStreamConsumer * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_ByteStreamConsumer * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        END_INTERFACE
    } ICC_ByteStreamConsumerVtbl;

    interface ICC_ByteStreamConsumer
    {
        CONST_VTBL struct ICC_ByteStreamConsumerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ByteStreamConsumer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ByteStreamConsumer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ByteStreamConsumer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ByteStreamConsumer_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ByteStreamConsumer_INTERFACE_DEFINED__ */


#ifndef __ICC_Breakable_INTERFACE_DEFINED__
#define __ICC_Breakable_INTERFACE_DEFINED__

/* interface ICC_Breakable */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Breakable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("96218572-1941-41de-854B-0FD5F938BA0E")
    ICC_Breakable : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Break( 
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BreakableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Breakable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Breakable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Breakable * This);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Breakable * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        END_INTERFACE
    } ICC_BreakableVtbl;

    interface ICC_Breakable
    {
        CONST_VTBL struct ICC_BreakableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Breakable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Breakable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Breakable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Breakable_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Breakable_INTERFACE_DEFINED__ */


#ifndef __ICC_Decoder_INTERFACE_DEFINED__
#define __ICC_Decoder_INTERFACE_DEFINED__

/* interface ICC_Decoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Decoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5E8AF531-FB3F-4345-A6E9-50DF4A4030EB")
    ICC_Decoder : public ICC_StreamProcessor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessData( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset = 0,
            /* [defaultvalue][in] */ CC_TIME pts = CC_NO_TIME,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Break( 
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Decoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Decoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Decoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Decoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Decoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Decoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Decoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Decoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Decoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Decoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Decoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Decoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Decoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Decoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Decoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Decoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Decoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        END_INTERFACE
    } ICC_DecoderVtbl;

    interface ICC_Decoder
    {
        CONST_VTBL struct ICC_DecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Decoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Decoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Decoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Decoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Decoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Decoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Decoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Decoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Decoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Decoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Decoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Decoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Decoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Decoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Decoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Decoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Decoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Decoder_INTERFACE_DEFINED__ */


#ifndef __ICC_Encoder_INTERFACE_DEFINED__
#define __ICC_Encoder_INTERFACE_DEFINED__

/* interface ICC_Encoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Encoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c5352932-d890-4631-a41b-054ef932d58f")
    ICC_Encoder : public ICC_StreamProcessor
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSize( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetData( 
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_EncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Encoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Encoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Encoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Encoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Encoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Encoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Encoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Encoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Encoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Encoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Encoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Encoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Encoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Encoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Encoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Encoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Encoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        END_INTERFACE
    } ICC_EncoderVtbl;

    interface ICC_Encoder
    {
        CONST_VTBL struct ICC_EncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Encoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Encoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Encoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Encoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Encoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Encoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Encoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Encoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Encoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Encoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Encoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Encoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Encoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Encoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Encoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Encoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_Encoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Encoder_INTERFACE_DEFINED__ */


#ifndef __ICC_Transcoder_INTERFACE_DEFINED__
#define __ICC_Transcoder_INTERFACE_DEFINED__

/* interface ICC_Transcoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Transcoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eb28dcba-d1a5-4a53-a69d-9e000efd9804")
    ICC_Transcoder : public ICC_Decoder
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSize( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetData( 
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_TranscoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Transcoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Transcoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Transcoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Transcoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Transcoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Transcoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Transcoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Transcoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Transcoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Transcoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Transcoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Transcoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Transcoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Transcoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Transcoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Transcoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Transcoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Transcoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Transcoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        END_INTERFACE
    } ICC_TranscoderVtbl;

    interface ICC_Transcoder
    {
        CONST_VTBL struct ICC_TranscoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Transcoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Transcoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Transcoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Transcoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Transcoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Transcoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Transcoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Transcoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Transcoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Transcoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Transcoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Transcoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Transcoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Transcoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Transcoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Transcoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Transcoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Transcoder_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_Transcoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Transcoder_INTERFACE_DEFINED__ */


#ifndef __ICC_Splitter_INTERFACE_DEFINED__
#define __ICC_Splitter_INTERFACE_DEFINED__

/* interface ICC_Splitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Splitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0920768f-e355-40df-a9c9-2e5b0871db7f")
    ICC_Splitter : public ICC_Transcoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Splitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Splitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Splitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Splitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Splitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Splitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Splitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Splitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Splitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Splitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Splitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Splitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Splitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Splitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Splitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Splitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Splitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Splitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Splitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        END_INTERFACE
    } ICC_SplitterVtbl;

    interface ICC_Splitter
    {
        CONST_VTBL struct ICC_SplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Splitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Splitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Splitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Splitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Splitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Splitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Splitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Splitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Splitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Splitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Splitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Splitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Splitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Splitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Splitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Splitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Splitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Splitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_Splitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Splitter_INTERFACE_DEFINED__ */


#ifndef __ICC_Cutter_INTERFACE_DEFINED__
#define __ICC_Cutter_INTERFACE_DEFINED__

/* interface ICC_Cutter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Cutter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("562e7dae-48ab-4805-a583-108ddb87aa33")
    ICC_Cutter : public ICC_Transcoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetCuttingArea( 
            /* [in] */ CC_TIME_INTERVAL SafeZone,
            /* [in] */ CC_INT leadIn,
            /* [in] */ CC_INT leadOut) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CutterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Cutter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Cutter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Cutter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Cutter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Cutter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Cutter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Cutter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Cutter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Cutter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Cutter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Cutter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Cutter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Cutter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Cutter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Cutter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Cutter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Cutter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Cutter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Cutter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetCuttingArea )( 
            ICC_Cutter * This,
            /* [in] */ CC_TIME_INTERVAL SafeZone,
            /* [in] */ CC_INT leadIn,
            /* [in] */ CC_INT leadOut);
        
        END_INTERFACE
    } ICC_CutterVtbl;

    interface ICC_Cutter
    {
        CONST_VTBL struct ICC_CutterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Cutter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Cutter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Cutter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Cutter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Cutter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Cutter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Cutter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Cutter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Cutter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Cutter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Cutter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Cutter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Cutter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Cutter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Cutter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Cutter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Cutter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Cutter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_Cutter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_Cutter_SetCuttingArea(This,SafeZone,leadIn,leadOut)	\
    ( (This)->lpVtbl -> SetCuttingArea(This,SafeZone,leadIn,leadOut) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Cutter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0019 */
/* [local] */ 




extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0019_v0_0_s_ifspec;

#ifndef __ICC_IndexWriter_INTERFACE_DEFINED__
#define __ICC_IndexWriter_INTERFACE_DEFINED__

/* interface ICC_IndexWriter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_IndexWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("52911b83-e54e-401a-b952-a1413eec82aa")
    ICC_IndexWriter : public ICC_StreamProcessor
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IndexCallback( 
            /* [retval][out] */ ICC_DataWriterEx **p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IndexCallback( 
            /* [in] */ ICC_DataWriterEx *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumActualEntries( 
            /* [retval][out] */ CC_UINT *n) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_IndexWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_IndexWriter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_IndexWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_IndexWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_IndexWriter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_IndexWriter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_IndexWriter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_IndexWriter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_IndexWriter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_IndexWriter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_IndexWriter * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndexCallback )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ ICC_DataWriterEx **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndexCallback )( 
            ICC_IndexWriter * This,
            /* [in] */ ICC_DataWriterEx *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumActualEntries )( 
            ICC_IndexWriter * This,
            /* [retval][out] */ CC_UINT *n);
        
        END_INTERFACE
    } ICC_IndexWriterVtbl;

    interface ICC_IndexWriter
    {
        CONST_VTBL struct ICC_IndexWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_IndexWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_IndexWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_IndexWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_IndexWriter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_IndexWriter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_IndexWriter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_IndexWriter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_IndexWriter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_IndexWriter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_IndexWriter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_IndexWriter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_IndexWriter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_IndexWriter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_IndexWriter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_IndexWriter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_IndexWriter_get_IndexCallback(This,p)	\
    ( (This)->lpVtbl -> get_IndexCallback(This,p) ) 

#define ICC_IndexWriter_put_IndexCallback(This,p)	\
    ( (This)->lpVtbl -> put_IndexCallback(This,p) ) 

#define ICC_IndexWriter_get_NumActualEntries(This,n)	\
    ( (This)->lpVtbl -> get_NumActualEntries(This,n) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_IndexWriter_INTERFACE_DEFINED__ */


#ifndef __ICC_ByteStreamCallback_INTERFACE_DEFINED__
#define __ICC_ByteStreamCallback_INTERFACE_DEFINED__

/* interface ICC_ByteStreamCallback */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ByteStreamCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3190F038-CC19-405b-B65B-FED981E38F0D")
    ICC_ByteStreamCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessData( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [defaultvalue][in] */ CC_TIME pts = CC_NO_TIME,
            /* [defaultvalue][in] */ IUnknown *pSender = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ByteStreamCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ByteStreamCallback * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ByteStreamCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ByteStreamCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_ByteStreamCallback * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][in] */ IUnknown *pSender);
        
        END_INTERFACE
    } ICC_ByteStreamCallbackVtbl;

    interface ICC_ByteStreamCallback
    {
        CONST_VTBL struct ICC_ByteStreamCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ByteStreamCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ByteStreamCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ByteStreamCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ByteStreamCallback_ProcessData(This,pbData,cbSize,pts,pSender)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,pts,pSender) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ByteStreamCallback_INTERFACE_DEFINED__ */


#ifndef __ICC_DataReadyCallback_INTERFACE_DEFINED__
#define __ICC_DataReadyCallback_INTERFACE_DEFINED__

/* interface ICC_DataReadyCallback */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DataReadyCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55813708-a883-4bca-be08-061a546e0d3f")
    ICC_DataReadyCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DataReady( 
            /* [in] */ IUnknown *pDataProducer) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DataReadyCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DataReadyCallback * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DataReadyCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DataReadyCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *DataReady )( 
            ICC_DataReadyCallback * This,
            /* [in] */ IUnknown *pDataProducer);
        
        END_INTERFACE
    } ICC_DataReadyCallbackVtbl;

    interface ICC_DataReadyCallback
    {
        CONST_VTBL struct ICC_DataReadyCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DataReadyCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DataReadyCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DataReadyCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DataReadyCallback_DataReady(This,pDataProducer)	\
    ( (This)->lpVtbl -> DataReady(This,pDataProducer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DataReadyCallback_INTERFACE_DEFINED__ */


#ifndef __ICC_TimeBaseProp_INTERFACE_DEFINED__
#define __ICC_TimeBaseProp_INTERFACE_DEFINED__

/* interface ICC_TimeBaseProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_TimeBaseProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF96E276-449C-47ec-BFA0-0BACB3447F1D")
    ICC_TimeBaseProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimeBase( 
            /* [retval][out] */ CC_TIMEBASE *__MIDL__ICC_TimeBaseProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimeBase( 
            /* [in] */ CC_TIMEBASE __MIDL__ICC_TimeBaseProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_TimeBasePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_TimeBaseProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_TimeBaseProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_TimeBaseProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_TimeBaseProp * This,
            /* [retval][out] */ CC_TIMEBASE *__MIDL__ICC_TimeBaseProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_TimeBaseProp * This,
            /* [in] */ CC_TIMEBASE __MIDL__ICC_TimeBaseProp0001);
        
        END_INTERFACE
    } ICC_TimeBasePropVtbl;

    interface ICC_TimeBaseProp
    {
        CONST_VTBL struct ICC_TimeBasePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_TimeBaseProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_TimeBaseProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_TimeBaseProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_TimeBaseProp_get_TimeBase(This,__MIDL__ICC_TimeBaseProp0000)	\
    ( (This)->lpVtbl -> get_TimeBase(This,__MIDL__ICC_TimeBaseProp0000) ) 

#define ICC_TimeBaseProp_put_TimeBase(This,__MIDL__ICC_TimeBaseProp0001)	\
    ( (This)->lpVtbl -> put_TimeBase(This,__MIDL__ICC_TimeBaseProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_TimeBaseProp_INTERFACE_DEFINED__ */


#ifndef __ICC_InitialTimeCodeProp_INTERFACE_DEFINED__
#define __ICC_InitialTimeCodeProp_INTERFACE_DEFINED__

/* interface ICC_InitialTimeCodeProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_InitialTimeCodeProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("020CC64E-0BCD-4d5b-B68A-E210716F2D9E")
    ICC_InitialTimeCodeProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialTimeCode( 
            /* [retval][out] */ CC_TIMECODE *t) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE t) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_InitialTimeCodePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_InitialTimeCodeProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_InitialTimeCodeProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_InitialTimeCodeProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_InitialTimeCodeProp * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_InitialTimeCodeProp * This,
            /* [in] */ CC_TIMECODE t);
        
        END_INTERFACE
    } ICC_InitialTimeCodePropVtbl;

    interface ICC_InitialTimeCodeProp
    {
        CONST_VTBL struct ICC_InitialTimeCodePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_InitialTimeCodeProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_InitialTimeCodeProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_InitialTimeCodeProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_InitialTimeCodeProp_get_InitialTimeCode(This,t)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,t) ) 

#define ICC_InitialTimeCodeProp_put_InitialTimeCode(This,t)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,t) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_InitialTimeCodeProp_INTERFACE_DEFINED__ */


#ifndef __ICC_BitRateProp_INTERFACE_DEFINED__
#define __ICC_BitRateProp_INTERFACE_DEFINED__

/* interface ICC_BitRateProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_BitRateProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("146273cc-9a1e-4faa-b45a-a34a6dc80a7a")
    ICC_BitRateProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE b) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BitRatePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_BitRateProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_BitRateProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_BitRateProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_BitRateProp * This,
            /* [retval][out] */ CC_BITRATE *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_BitRateProp * This,
            /* [in] */ CC_BITRATE b);
        
        END_INTERFACE
    } ICC_BitRatePropVtbl;

    interface ICC_BitRateProp
    {
        CONST_VTBL struct ICC_BitRatePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_BitRateProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_BitRateProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_BitRateProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_BitRateProp_get_BitRate(This,b)	\
    ( (This)->lpVtbl -> get_BitRate(This,b) ) 

#define ICC_BitRateProp_put_BitRate(This,b)	\
    ( (This)->lpVtbl -> put_BitRate(This,b) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_BitRateProp_INTERFACE_DEFINED__ */


#ifndef __ICC_FrameRateProp_INTERFACE_DEFINED__
#define __ICC_FrameRateProp_INTERFACE_DEFINED__

/* interface ICC_FrameRateProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_FrameRateProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("003f7114-3a9c-41f3-b034-60801da85d6f")
    ICC_FrameRateProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE b) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_FrameRatePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_FrameRateProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_FrameRateProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_FrameRateProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_FrameRateProp * This,
            /* [retval][out] */ CC_FRAME_RATE *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_FrameRateProp * This,
            /* [in] */ CC_FRAME_RATE b);
        
        END_INTERFACE
    } ICC_FrameRatePropVtbl;

    interface ICC_FrameRateProp
    {
        CONST_VTBL struct ICC_FrameRatePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_FrameRateProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_FrameRateProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_FrameRateProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_FrameRateProp_get_FrameRate(This,b)	\
    ( (This)->lpVtbl -> get_FrameRate(This,b) ) 

#define ICC_FrameRateProp_put_FrameRate(This,b)	\
    ( (This)->lpVtbl -> put_FrameRate(This,b) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_FrameRateProp_INTERFACE_DEFINED__ */


#ifndef __ICC_BufferAllocator_INTERFACE_DEFINED__
#define __ICC_BufferAllocator_INTERFACE_DEFINED__

/* interface ICC_BufferAllocator */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_BufferAllocator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CFB56A68-B3F4-422d-B976-1C265A1D3064")
    ICC_BufferAllocator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Alloc( 
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ BYTE **pBuffer) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BufferAllocatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_BufferAllocator * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_BufferAllocator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_BufferAllocator * This);
        
        HRESULT ( STDMETHODCALLTYPE *Alloc )( 
            ICC_BufferAllocator * This,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ BYTE **pBuffer);
        
        END_INTERFACE
    } ICC_BufferAllocatorVtbl;

    interface ICC_BufferAllocator
    {
        CONST_VTBL struct ICC_BufferAllocatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_BufferAllocator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_BufferAllocator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_BufferAllocator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_BufferAllocator_Alloc(This,cbSize,pBuffer)	\
    ( (This)->lpVtbl -> Alloc(This,cbSize,pBuffer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_BufferAllocator_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamRecovery_INTERFACE_DEFINED__
#define __ICC_StreamRecovery_INTERFACE_DEFINED__

/* interface ICC_StreamRecovery */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamRecovery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DE7A69AB-560E-4777-BAAA-573F9DEFE7EC")
    ICC_StreamRecovery : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamRecoveryMode( 
            /* [retval][out] */ DWORD *m) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamRecoveryMode( 
            /* [in] */ DWORD m) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxPatchDuration( 
            /* [retval][out] */ CC_TIME *d) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaxPatchDuration( 
            /* [in] */ CC_TIME d) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamRecoveryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamRecovery * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamRecovery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamRecovery * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamRecoveryMode )( 
            ICC_StreamRecovery * This,
            /* [retval][out] */ DWORD *m);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamRecoveryMode )( 
            ICC_StreamRecovery * This,
            /* [in] */ DWORD m);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxPatchDuration )( 
            ICC_StreamRecovery * This,
            /* [retval][out] */ CC_TIME *d);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxPatchDuration )( 
            ICC_StreamRecovery * This,
            /* [in] */ CC_TIME d);
        
        END_INTERFACE
    } ICC_StreamRecoveryVtbl;

    interface ICC_StreamRecovery
    {
        CONST_VTBL struct ICC_StreamRecoveryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamRecovery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamRecovery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamRecovery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamRecovery_get_StreamRecoveryMode(This,m)	\
    ( (This)->lpVtbl -> get_StreamRecoveryMode(This,m) ) 

#define ICC_StreamRecovery_put_StreamRecoveryMode(This,m)	\
    ( (This)->lpVtbl -> put_StreamRecoveryMode(This,m) ) 

#define ICC_StreamRecovery_get_MaxPatchDuration(This,d)	\
    ( (This)->lpVtbl -> get_MaxPatchDuration(This,d) ) 

#define ICC_StreamRecovery_put_MaxPatchDuration(This,d)	\
    ( (This)->lpVtbl -> put_MaxPatchDuration(This,d) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamRecovery_INTERFACE_DEFINED__ */


#ifndef __ICC_ThreadsCountProp_INTERFACE_DEFINED__
#define __ICC_ThreadsCountProp_INTERFACE_DEFINED__

/* interface ICC_ThreadsCountProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ThreadsCountProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f73a09e-3419-42f9-b6e5-28425443fc5d")
    ICC_ThreadsCountProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsCount( 
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_ThreadsCountProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsCount( 
            /* [in] */ CC_AMOUNT __MIDL__ICC_ThreadsCountProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ThreadsCountPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ThreadsCountProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ThreadsCountProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ThreadsCountProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_ThreadsCountProp * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_ThreadsCountProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_ThreadsCountProp * This,
            /* [in] */ CC_AMOUNT __MIDL__ICC_ThreadsCountProp0001);
        
        END_INTERFACE
    } ICC_ThreadsCountPropVtbl;

    interface ICC_ThreadsCountProp
    {
        CONST_VTBL struct ICC_ThreadsCountPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ThreadsCountProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ThreadsCountProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ThreadsCountProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ThreadsCountProp_get_ThreadsCount(This,__MIDL__ICC_ThreadsCountProp0000)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,__MIDL__ICC_ThreadsCountProp0000) ) 

#define ICC_ThreadsCountProp_put_ThreadsCount(This,__MIDL__ICC_ThreadsCountProp0001)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,__MIDL__ICC_ThreadsCountProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ThreadsCountProp_INTERFACE_DEFINED__ */


#ifndef __ICC_ThreadsAffinityProp_INTERFACE_DEFINED__
#define __ICC_ThreadsAffinityProp_INTERFACE_DEFINED__

/* interface ICC_ThreadsAffinityProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ThreadsAffinityProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("452854e9-2033-46a3-a3cd-a95aa1f466c1")
    ICC_ThreadsAffinityProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsAffinity( 
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_ThreadsAffinityProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsAffinity( 
            /* [in] */ CC_AFFINITY __MIDL__ICC_ThreadsAffinityProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ThreadsAffinityPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ThreadsAffinityProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ThreadsAffinityProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ThreadsAffinityProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_ThreadsAffinityProp * This,
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_ThreadsAffinityProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_ThreadsAffinityProp * This,
            /* [in] */ CC_AFFINITY __MIDL__ICC_ThreadsAffinityProp0001);
        
        END_INTERFACE
    } ICC_ThreadsAffinityPropVtbl;

    interface ICC_ThreadsAffinityProp
    {
        CONST_VTBL struct ICC_ThreadsAffinityPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ThreadsAffinityProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ThreadsAffinityProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ThreadsAffinityProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ThreadsAffinityProp_get_ThreadsAffinity(This,__MIDL__ICC_ThreadsAffinityProp0000)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,__MIDL__ICC_ThreadsAffinityProp0000) ) 

#define ICC_ThreadsAffinityProp_put_ThreadsAffinity(This,__MIDL__ICC_ThreadsAffinityProp0001)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,__MIDL__ICC_ThreadsAffinityProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ThreadsAffinityProp_INTERFACE_DEFINED__ */


#ifndef __ICC_ThreadsPriorityProp_INTERFACE_DEFINED__
#define __ICC_ThreadsPriorityProp_INTERFACE_DEFINED__

/* interface ICC_ThreadsPriorityProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ThreadsPriorityProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("635a623f-f077-4083-963d-6aa66268b0c8")
    ICC_ThreadsPriorityProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsPriority( 
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_ThreadsPriorityProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsPriority( 
            /* [in] */ CC_PRIORITY __MIDL__ICC_ThreadsPriorityProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ThreadsPriorityPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ThreadsPriorityProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ThreadsPriorityProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ThreadsPriorityProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_ThreadsPriorityProp * This,
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_ThreadsPriorityProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_ThreadsPriorityProp * This,
            /* [in] */ CC_PRIORITY __MIDL__ICC_ThreadsPriorityProp0001);
        
        END_INTERFACE
    } ICC_ThreadsPriorityPropVtbl;

    interface ICC_ThreadsPriorityProp
    {
        CONST_VTBL struct ICC_ThreadsPriorityPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ThreadsPriorityProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ThreadsPriorityProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ThreadsPriorityProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ThreadsPriorityProp_get_ThreadsPriority(This,__MIDL__ICC_ThreadsPriorityProp0000)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,__MIDL__ICC_ThreadsPriorityProp0000) ) 

#define ICC_ThreadsPriorityProp_put_ThreadsPriority(This,__MIDL__ICC_ThreadsPriorityProp0001)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,__MIDL__ICC_ThreadsPriorityProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ThreadsPriorityProp_INTERFACE_DEFINED__ */


#ifndef __ICC_InputBufferControl_INTERFACE_DEFINED__
#define __ICC_InputBufferControl_INTERFACE_DEFINED__

/* interface ICC_InputBufferControl */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_InputBufferControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d96ad003-b4ed-4154-afed-c0f778051415")
    ICC_InputBufferControl : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InputBufferSize( 
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InputBufferSize( 
            /* [in] */ CC_AMOUNT __MIDL__ICC_InputBufferControl0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InputBufferUsage( 
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0002) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InputBufferSpace( 
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0003) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_InputBufferControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_InputBufferControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_InputBufferControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_InputBufferControl * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputBufferSize )( 
            ICC_InputBufferControl * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InputBufferSize )( 
            ICC_InputBufferControl * This,
            /* [in] */ CC_AMOUNT __MIDL__ICC_InputBufferControl0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputBufferUsage )( 
            ICC_InputBufferControl * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputBufferSpace )( 
            ICC_InputBufferControl * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_InputBufferControl0003);
        
        END_INTERFACE
    } ICC_InputBufferControlVtbl;

    interface ICC_InputBufferControl
    {
        CONST_VTBL struct ICC_InputBufferControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_InputBufferControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_InputBufferControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_InputBufferControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_InputBufferControl_get_InputBufferSize(This,__MIDL__ICC_InputBufferControl0000)	\
    ( (This)->lpVtbl -> get_InputBufferSize(This,__MIDL__ICC_InputBufferControl0000) ) 

#define ICC_InputBufferControl_put_InputBufferSize(This,__MIDL__ICC_InputBufferControl0001)	\
    ( (This)->lpVtbl -> put_InputBufferSize(This,__MIDL__ICC_InputBufferControl0001) ) 

#define ICC_InputBufferControl_get_InputBufferUsage(This,__MIDL__ICC_InputBufferControl0002)	\
    ( (This)->lpVtbl -> get_InputBufferUsage(This,__MIDL__ICC_InputBufferControl0002) ) 

#define ICC_InputBufferControl_get_InputBufferSpace(This,__MIDL__ICC_InputBufferControl0003)	\
    ( (This)->lpVtbl -> get_InputBufferSpace(This,__MIDL__ICC_InputBufferControl0003) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_InputBufferControl_INTERFACE_DEFINED__ */


#ifndef __ICC_ReferenceAlisProp_INTERFACE_DEFINED__
#define __ICC_ReferenceAlisProp_INTERFACE_DEFINED__

/* interface ICC_ReferenceAlisProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ReferenceAlisProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8CDA674D-A513-4b24-8B6C-0D34B2E8FCD1")
    ICC_ReferenceAlisProp : public IUnknown
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReferenceAlis( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ReferenceAlisPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ReferenceAlisProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ReferenceAlisProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ReferenceAlisProp * This);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReferenceAlis )( 
            ICC_ReferenceAlisProp * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize);
        
        END_INTERFACE
    } ICC_ReferenceAlisPropVtbl;

    interface ICC_ReferenceAlisProp
    {
        CONST_VTBL struct ICC_ReferenceAlisPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ReferenceAlisProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ReferenceAlisProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ReferenceAlisProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ReferenceAlisProp_put_ReferenceAlis(This,pbData,cbSize)	\
    ( (This)->lpVtbl -> put_ReferenceAlis(This,pbData,cbSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ReferenceAlisProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0033 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_PROCESS_DATA_POLICY
    {
        CC_PDP_RAW_STREAM	= 0,
        CC_PDP_PARSED_DATA	= 1
    } 	CC_PROCESS_DATA_POLICY;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0033_v0_0_s_ifspec;

#ifndef __ICC_ProcessDataPolicyProp_INTERFACE_DEFINED__
#define __ICC_ProcessDataPolicyProp_INTERFACE_DEFINED__

/* interface ICC_ProcessDataPolicyProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ProcessDataPolicyProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9bfc95b3-67ff-4dce-9258-6545a51fd008")
    ICC_ProcessDataPolicyProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProcessDataPolicy( 
            /* [retval][out] */ CC_PROCESS_DATA_POLICY *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProcessDataPolicy( 
            /* [in] */ CC_PROCESS_DATA_POLICY v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ProcessDataPolicyPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ProcessDataPolicyProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ProcessDataPolicyProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ProcessDataPolicyProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessDataPolicy )( 
            ICC_ProcessDataPolicyProp * This,
            /* [retval][out] */ CC_PROCESS_DATA_POLICY *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProcessDataPolicy )( 
            ICC_ProcessDataPolicyProp * This,
            /* [in] */ CC_PROCESS_DATA_POLICY v);
        
        END_INTERFACE
    } ICC_ProcessDataPolicyPropVtbl;

    interface ICC_ProcessDataPolicyProp
    {
        CONST_VTBL struct ICC_ProcessDataPolicyPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ProcessDataPolicyProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ProcessDataPolicyProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ProcessDataPolicyProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ProcessDataPolicyProp_get_ProcessDataPolicy(This,p)	\
    ( (This)->lpVtbl -> get_ProcessDataPolicy(This,p) ) 

#define ICC_ProcessDataPolicyProp_put_ProcessDataPolicy(This,v)	\
    ( (This)->lpVtbl -> put_ProcessDataPolicy(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ProcessDataPolicyProp_INTERFACE_DEFINED__ */


#ifndef __ICC_AddUserDataCtrl_INTERFACE_DEFINED__
#define __ICC_AddUserDataCtrl_INTERFACE_DEFINED__

/* interface ICC_AddUserDataCtrl */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AddUserDataCtrl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8616e94c-3950-4df7-8c90-d776e8645061")
    ICC_AddUserDataCtrl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField = CC_FALSE) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AddUserDataCtrlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AddUserDataCtrl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AddUserDataCtrl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AddUserDataCtrl * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_AddUserDataCtrl * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        END_INTERFACE
    } ICC_AddUserDataCtrlVtbl;

    interface ICC_AddUserDataCtrl
    {
        CONST_VTBL struct ICC_AddUserDataCtrlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AddUserDataCtrl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AddUserDataCtrl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AddUserDataCtrl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AddUserDataCtrl_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AddUserDataCtrl_INTERFACE_DEFINED__ */


#ifndef __ICC_ConcurrencyLevelProp_INTERFACE_DEFINED__
#define __ICC_ConcurrencyLevelProp_INTERFACE_DEFINED__

/* interface ICC_ConcurrencyLevelProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ConcurrencyLevelProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("610330b7-3359-471e-bdc0-2a5ac72be372")
    ICC_ConcurrencyLevelProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ConcurrencyLevel( 
            /* [retval][out] */ CC_AMOUNT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ConcurrencyLevel( 
            /* [in] */ CC_AMOUNT v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ConcurrencyLevelPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ConcurrencyLevelProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ConcurrencyLevelProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ConcurrencyLevelProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConcurrencyLevel )( 
            ICC_ConcurrencyLevelProp * This,
            /* [retval][out] */ CC_AMOUNT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConcurrencyLevel )( 
            ICC_ConcurrencyLevelProp * This,
            /* [in] */ CC_AMOUNT v);
        
        END_INTERFACE
    } ICC_ConcurrencyLevelPropVtbl;

    interface ICC_ConcurrencyLevelProp
    {
        CONST_VTBL struct ICC_ConcurrencyLevelPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ConcurrencyLevelProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ConcurrencyLevelProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ConcurrencyLevelProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ConcurrencyLevelProp_get_ConcurrencyLevel(This,p)	\
    ( (This)->lpVtbl -> get_ConcurrencyLevel(This,p) ) 

#define ICC_ConcurrencyLevelProp_put_ConcurrencyLevel(This,v)	\
    ( (This)->lpVtbl -> put_ConcurrencyLevel(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ConcurrencyLevelProp_INTERFACE_DEFINED__ */


#ifndef __ICC_DataWriter_INTERFACE_DEFINED__
#define __ICC_DataWriter_INTERFACE_DEFINED__

/* interface ICC_DataWriter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DataWriter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c7689044-8834-41b0-8dfe-a5c407f8a25b")
    ICC_DataWriter : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DataWriterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DataWriter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DataWriter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DataWriter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            ICC_DataWriter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize);
        
        END_INTERFACE
    } ICC_DataWriterVtbl;

    interface ICC_DataWriter
    {
        CONST_VTBL struct ICC_DataWriterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DataWriter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DataWriter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DataWriter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DataWriter_Write(This,pbData,cbSize)	\
    ( (This)->lpVtbl -> Write(This,pbData,cbSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DataWriter_INTERFACE_DEFINED__ */


#ifndef __ICC_DataWriterEx_INTERFACE_DEFINED__
#define __ICC_DataWriterEx_INTERFACE_DEFINED__

/* interface ICC_DataWriterEx */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DataWriterEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07d72818-5aa6-4f0d-bdf2-c0f815901537")
    ICC_DataWriterEx : public ICC_DataWriter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WriteDirect( 
            /* [in] */ CC_OFFSET offs,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DataWriterExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DataWriterEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DataWriterEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DataWriterEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            ICC_DataWriterEx * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *WriteDirect )( 
            ICC_DataWriterEx * This,
            /* [in] */ CC_OFFSET offs,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize);
        
        END_INTERFACE
    } ICC_DataWriterExVtbl;

    interface ICC_DataWriterEx
    {
        CONST_VTBL struct ICC_DataWriterExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DataWriterEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DataWriterEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DataWriterEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DataWriterEx_Write(This,pbData,cbSize)	\
    ( (This)->lpVtbl -> Write(This,pbData,cbSize) ) 


#define ICC_DataWriterEx_WriteDirect(This,offs,pbData,cbSize)	\
    ( (This)->lpVtbl -> WriteDirect(This,offs,pbData,cbSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DataWriterEx_INTERFACE_DEFINED__ */


#ifndef __ICC_DataReader_INTERFACE_DEFINED__
#define __ICC_DataReader_INTERFACE_DEFINED__

/* interface ICC_DataReader */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DataReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05ebcab5-b9d7-4024-aa3e-b63b1d5e046d")
    ICC_DataReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DataReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DataReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DataReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DataReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            ICC_DataReader * This,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead);
        
        END_INTERFACE
    } ICC_DataReaderVtbl;

    interface ICC_DataReader
    {
        CONST_VTBL struct ICC_DataReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DataReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DataReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DataReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DataReader_Read(This,pbData,cbSize,pcbRead)	\
    ( (This)->lpVtbl -> Read(This,pbData,cbSize,pcbRead) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DataReader_INTERFACE_DEFINED__ */


#ifndef __ICC_DataReaderEx_INTERFACE_DEFINED__
#define __ICC_DataReaderEx_INTERFACE_DEFINED__

/* interface ICC_DataReaderEx */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DataReaderEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b7f45fbd-8e48-4c72-9bf6-51f4753fb723")
    ICC_DataReaderEx : public ICC_DataReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ReadDirect( 
            /* [in] */ CC_OFFSET offs,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DataReaderExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DataReaderEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DataReaderEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DataReaderEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            ICC_DataReaderEx * This,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead);
        
        HRESULT ( STDMETHODCALLTYPE *ReadDirect )( 
            ICC_DataReaderEx * This,
            /* [in] */ CC_OFFSET offs,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead);
        
        END_INTERFACE
    } ICC_DataReaderExVtbl;

    interface ICC_DataReaderEx
    {
        CONST_VTBL struct ICC_DataReaderExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DataReaderEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DataReaderEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DataReaderEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DataReaderEx_Read(This,pbData,cbSize,pcbRead)	\
    ( (This)->lpVtbl -> Read(This,pbData,cbSize,pcbRead) ) 


#define ICC_DataReaderEx_ReadDirect(This,offs,pbData,cbSize,pcbRead)	\
    ( (This)->lpVtbl -> ReadDirect(This,offs,pbData,cbSize,pcbRead) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DataReaderEx_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamPositionProp_INTERFACE_DEFINED__
#define __ICC_StreamPositionProp_INTERFACE_DEFINED__

/* interface ICC_StreamPositionProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamPositionProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7082a2e8-e87b-4f0b-b1eb-c071aca2b676")
    ICC_StreamPositionProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ CC_OFFSET o) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamPositionPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamPositionProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamPositionProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamPositionProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICC_StreamPositionProp * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ICC_StreamPositionProp * This,
            /* [in] */ CC_OFFSET o);
        
        END_INTERFACE
    } ICC_StreamPositionPropVtbl;

    interface ICC_StreamPositionProp
    {
        CONST_VTBL struct ICC_StreamPositionPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamPositionProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamPositionProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamPositionProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamPositionProp_get_Position(This,o)	\
    ( (This)->lpVtbl -> get_Position(This,o) ) 

#define ICC_StreamPositionProp_put_Position(This,o)	\
    ( (This)->lpVtbl -> put_Position(This,o) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamPositionProp_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamLengthProp_INTERFACE_DEFINED__
#define __ICC_StreamLengthProp_INTERFACE_DEFINED__

/* interface ICC_StreamLengthProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamLengthProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56e7b348-2a5c-4d67-b624-550dc87e87db")
    ICC_StreamLengthProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamLengthPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamLengthProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamLengthProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamLengthProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            ICC_StreamLengthProp * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        END_INTERFACE
    } ICC_StreamLengthPropVtbl;

    interface ICC_StreamLengthProp
    {
        CONST_VTBL struct ICC_StreamLengthPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamLengthProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamLengthProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamLengthProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamLengthProp_get_Length(This,o)	\
    ( (This)->lpVtbl -> get_Length(This,o) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamLengthProp_INTERFACE_DEFINED__ */


#ifndef __ICC_InputStream_INTERFACE_DEFINED__
#define __ICC_InputStream_INTERFACE_DEFINED__

/* interface ICC_InputStream */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_InputStream;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1fe2f5d7-ed48-4362-9ebd-2aa00429b0dd")
    ICC_InputStream : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EOF( 
            /* [retval][out] */ CC_BOOL *b) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ CC_OFFSET o) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_InputStreamVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_InputStream * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_InputStream * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_InputStream * This);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            ICC_InputStream * This,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EOF )( 
            ICC_InputStream * This,
            /* [retval][out] */ CC_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICC_InputStream * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ICC_InputStream * This,
            /* [in] */ CC_OFFSET o);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            ICC_InputStream * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        END_INTERFACE
    } ICC_InputStreamVtbl;

    interface ICC_InputStream
    {
        CONST_VTBL struct ICC_InputStreamVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_InputStream_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_InputStream_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_InputStream_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_InputStream_Read(This,pbData,cbSize,pcbRead)	\
    ( (This)->lpVtbl -> Read(This,pbData,cbSize,pcbRead) ) 

#define ICC_InputStream_get_EOF(This,b)	\
    ( (This)->lpVtbl -> get_EOF(This,b) ) 

#define ICC_InputStream_get_Position(This,o)	\
    ( (This)->lpVtbl -> get_Position(This,o) ) 

#define ICC_InputStream_put_Position(This,o)	\
    ( (This)->lpVtbl -> put_Position(This,o) ) 

#define ICC_InputStream_get_Length(This,o)	\
    ( (This)->lpVtbl -> get_Length(This,o) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_InputStream_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0043 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_OPEN_FLAGS
    {
        CC_FILE_OPEN_DEFAULT	= 0
    } 	CC_OPEN_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0043_v0_0_s_ifspec;

#ifndef __ICC_File_INTERFACE_DEFINED__
#define __ICC_File_INTERFACE_DEFINED__

/* interface ICC_File */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_File;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4a4806fb-d622-4c14-a19c-935accc9b450")
    ICC_File : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ CC_STRING *pName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsOpened( 
            /* [retval][out] */ CC_BOOL *pFlag) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ CC_OFFSET o) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ CC_OFFSET *o) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_FileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_File * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_File * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_File * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            ICC_File * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ICC_File * This,
            /* [retval][out] */ CC_STRING *pName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpened )( 
            ICC_File * This,
            /* [retval][out] */ CC_BOOL *pFlag);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICC_File * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ICC_File * This,
            /* [in] */ CC_OFFSET o);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            ICC_File * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        END_INTERFACE
    } ICC_FileVtbl;

    interface ICC_File
    {
        CONST_VTBL struct ICC_FileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_File_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_File_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_File_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_File_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ICC_File_get_FileName(This,pName)	\
    ( (This)->lpVtbl -> get_FileName(This,pName) ) 

#define ICC_File_get_IsOpened(This,pFlag)	\
    ( (This)->lpVtbl -> get_IsOpened(This,pFlag) ) 

#define ICC_File_get_Position(This,o)	\
    ( (This)->lpVtbl -> get_Position(This,o) ) 

#define ICC_File_put_Position(This,o)	\
    ( (This)->lpVtbl -> put_Position(This,o) ) 

#define ICC_File_get_Length(This,o)	\
    ( (This)->lpVtbl -> get_Length(This,o) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_File_INTERFACE_DEFINED__ */


#ifndef __ICC_InputFile_INTERFACE_DEFINED__
#define __ICC_InputFile_INTERFACE_DEFINED__

/* interface ICC_InputFile */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_InputFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fac59d98-7bd4-4100-b807-eccd2fbe1cbf")
    ICC_InputFile : public ICC_File
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ CC_STRING FileName,
            /* [defaultvalue][in] */ DWORD OpenFlags = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Read( 
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EOF( 
            /* [retval][out] */ CC_BOOL *b) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_InputFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_InputFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_InputFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_InputFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            ICC_InputFile * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ICC_InputFile * This,
            /* [retval][out] */ CC_STRING *pName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpened )( 
            ICC_InputFile * This,
            /* [retval][out] */ CC_BOOL *pFlag);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICC_InputFile * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ICC_InputFile * This,
            /* [in] */ CC_OFFSET o);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            ICC_InputFile * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            ICC_InputFile * This,
            /* [in] */ CC_STRING FileName,
            /* [defaultvalue][in] */ DWORD OpenFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Read )( 
            ICC_InputFile * This,
            /* [length_is][size_is][out][in] */ CC_PBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbRead);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EOF )( 
            ICC_InputFile * This,
            /* [retval][out] */ CC_BOOL *b);
        
        END_INTERFACE
    } ICC_InputFileVtbl;

    interface ICC_InputFile
    {
        CONST_VTBL struct ICC_InputFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_InputFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_InputFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_InputFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_InputFile_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ICC_InputFile_get_FileName(This,pName)	\
    ( (This)->lpVtbl -> get_FileName(This,pName) ) 

#define ICC_InputFile_get_IsOpened(This,pFlag)	\
    ( (This)->lpVtbl -> get_IsOpened(This,pFlag) ) 

#define ICC_InputFile_get_Position(This,o)	\
    ( (This)->lpVtbl -> get_Position(This,o) ) 

#define ICC_InputFile_put_Position(This,o)	\
    ( (This)->lpVtbl -> put_Position(This,o) ) 

#define ICC_InputFile_get_Length(This,o)	\
    ( (This)->lpVtbl -> get_Length(This,o) ) 


#define ICC_InputFile_Open(This,FileName,OpenFlags)	\
    ( (This)->lpVtbl -> Open(This,FileName,OpenFlags) ) 

#define ICC_InputFile_Read(This,pbData,cbSize,pcbRead)	\
    ( (This)->lpVtbl -> Read(This,pbData,cbSize,pcbRead) ) 

#define ICC_InputFile_get_EOF(This,b)	\
    ( (This)->lpVtbl -> get_EOF(This,b) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_InputFile_INTERFACE_DEFINED__ */


#ifndef __ICC_OutputFile_INTERFACE_DEFINED__
#define __ICC_OutputFile_INTERFACE_DEFINED__

/* interface ICC_OutputFile */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_OutputFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4682af7b-926a-4d47-be2b-8bb5d555331d")
    ICC_OutputFile : public ICC_File
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Create( 
            /* [in] */ CC_STRING FileName,
            /* [defaultvalue][in] */ DWORD OpenFlags = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Write( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbWrite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_OutputFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_OutputFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_OutputFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_OutputFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            ICC_OutputFile * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ICC_OutputFile * This,
            /* [retval][out] */ CC_STRING *pName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpened )( 
            ICC_OutputFile * This,
            /* [retval][out] */ CC_BOOL *pFlag);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ICC_OutputFile * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ICC_OutputFile * This,
            /* [in] */ CC_OFFSET o);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            ICC_OutputFile * This,
            /* [retval][out] */ CC_OFFSET *o);
        
        HRESULT ( STDMETHODCALLTYPE *Create )( 
            ICC_OutputFile * This,
            /* [in] */ CC_STRING FileName,
            /* [defaultvalue][in] */ DWORD OpenFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Write )( 
            ICC_OutputFile * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_AMOUNT cbSize,
            /* [retval][out] */ CC_AMOUNT *pcbWrite);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            ICC_OutputFile * This);
        
        END_INTERFACE
    } ICC_OutputFileVtbl;

    interface ICC_OutputFile
    {
        CONST_VTBL struct ICC_OutputFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_OutputFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_OutputFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_OutputFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_OutputFile_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ICC_OutputFile_get_FileName(This,pName)	\
    ( (This)->lpVtbl -> get_FileName(This,pName) ) 

#define ICC_OutputFile_get_IsOpened(This,pFlag)	\
    ( (This)->lpVtbl -> get_IsOpened(This,pFlag) ) 

#define ICC_OutputFile_get_Position(This,o)	\
    ( (This)->lpVtbl -> get_Position(This,o) ) 

#define ICC_OutputFile_put_Position(This,o)	\
    ( (This)->lpVtbl -> put_Position(This,o) ) 

#define ICC_OutputFile_get_Length(This,o)	\
    ( (This)->lpVtbl -> get_Length(This,o) ) 


#define ICC_OutputFile_Create(This,FileName,OpenFlags)	\
    ( (This)->lpVtbl -> Create(This,FileName,OpenFlags) ) 

#define ICC_OutputFile_Write(This,pbData,cbSize,pcbWrite)	\
    ( (This)->lpVtbl -> Write(This,pbData,cbSize,pcbWrite) ) 

#define ICC_OutputFile_Flush(This)	\
    ( (This)->lpVtbl -> Flush(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_OutputFile_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0046 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_ELEMENTARY_STREAM_TYPE
    {
        CC_ES_TYPE_UNKNOWN	= 0,
        CC_ES_TYPE_VIDEO_MPEG1	= 0x1,
        CC_ES_TYPE_VIDEO_MPEG2	= 0x2,
        CC_ES_TYPE_AUDIO_MPEG1	= 0x3,
        CC_ES_TYPE_AUDIO_MPEG2	= 0x4,
        CC_ES_TYPE_PRIVATE_SECTION	= 0x5,
        CC_ES_TYPE_PRIVATE_DATA	= 0x6,
        CC_ES_TYPE_MHEG	= 0x7,
        CC_ES_TYPE_DSM_CC	= 0x8,
        CC_ES_TYPE_H_222_1	= 0x9,
        CC_ES_TYPE_13818_6_A	= 0xa,
        CC_ES_TYPE_13818_6_B	= 0xb,
        CC_ES_TYPE_13818_6_C	= 0xc,
        CC_ES_TYPE_13818_6_D	= 0xd,
        CC_ES_TYPE_13818_1_AUX	= 0xe,
        CC_ES_TYPE_AUDIO_AAC	= 0xf,
        CC_ES_TYPE_VIDEO_MPEG4	= 0x10,
        CC_ES_TYPE_AUDIO_LATM	= 0x11,
        CC_ES_TYPE_FLEXMUX_1	= 0x12,
        CC_ES_TYPE_FLEXMUX_2	= 0x13,
        CC_ES_TYPE_SYNC_DOWNLOAD_PROTOCOL	= 0x14,
        CC_ES_TYPE_VIDEO_H264	= 0x1b,
        CC_ES_TYPE_VIDEO_AVC	= 0x1b,
        CC_ES_TYPE_VIDEO_J2K	= 0x21,
        CC_ES_TYPE_VIDEO_H265	= 0x24,
        CC_ES_TYPE_VIDEO_HEVC	= 0x24,
        CC_ES_TYPE_AUDIO_LPCM	= 0x80,
        CC_ES_TYPE_AUDIO_AC3	= 0x81,
        CC_ES_TYPE_AUDIO_AC3_ATSC	= 0x81,
        CC_ES_TYPE_AUDIO_AC3_DVB	= 0x8106,
        CC_ES_TYPE_SCTE_35	= 0x86,
        CC_ES_TYPE_AUDIO_DTS	= 0x8a,
        CC_ES_PRESENTATION_GRAPHICS	= 0x90,
        CC_ES_INTERACTIVE_GRAPHICS	= 0x91,
        CC_ES_TYPE_AUDIO_AES3	= 0x98,
        CC_ES_TYPE_DATA_AES3	= 0x99,
        CC_ES_TYPE_AUDIO_SMPTE302	= 0x9806,
        CC_ES_TYPE_AUDIO_DOLBY_E	= 0x9906,
        CC_ES_TYPE_HDV2_AUX_A	= 0xa0,
        CC_ES_TYPE_HDV2_AUX_V	= 0xa1,
        CC_ES_TYPE_VIDEO_DV	= 0x1d0,
        CC_ES_TYPE_VIDEO_DVCPRO	= 0x1d1,
        CC_ES_TYPE_VIDEO_DNxHD	= 0x1d2,
        CC_ES_TYPE_VIDEO_AVC_INTRA	= 0x11b,
        CC_ES_TYPE_VIDEO_PRORES	= 0x120,
        CC_ES_TYPE_EBU_TELETEXT	= 0x4206,
        CC_ES_TYPE_DVB_SUBTITLES	= 0xbf06,
        CC_ES_TYPE_SMPTE_436	= 0x436,
        CC_ES_TYPE_VIDEO_DANIEL	= 0xd206,
        CC_ES_TYPE_VIDEO_Y4M	= 0xf406,
        CC_ES_TYPE_VIDEO_UNCOMPRESSED	= 0xff06
    } 	CC_ELEMENTARY_STREAM_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0046_v0_0_s_ifspec;

#ifndef __ICC_ElementaryStreamInfo_INTERFACE_DEFINED__
#define __ICC_ElementaryStreamInfo_INTERFACE_DEFINED__

/* interface ICC_ElementaryStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ElementaryStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03AF145E-6633-4cbd-B6CF-286473E55860")
    ICC_ElementaryStreamInfo : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ElementaryStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ElementaryStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ElementaryStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ElementaryStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ElementaryStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ElementaryStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ElementaryStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ElementaryStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_ElementaryStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_ElementaryStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_ElementaryStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        END_INTERFACE
    } ICC_ElementaryStreamInfoVtbl;

    interface ICC_ElementaryStreamInfo
    {
        CONST_VTBL struct ICC_ElementaryStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ElementaryStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ElementaryStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ElementaryStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ElementaryStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ElementaryStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ElementaryStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ElementaryStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ElementaryStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_ElementaryStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_ElementaryStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ElementaryStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_ElementaryStreamSettings_INTERFACE_DEFINED__
#define __ICC_ElementaryStreamSettings_INTERFACE_DEFINED__

/* interface ICC_ElementaryStreamSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ElementaryStreamSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("89157059-e318-4a9b-8821-1cfc979ac119")
    ICC_ElementaryStreamSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamType( 
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ElementaryStreamSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ElementaryStreamSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ElementaryStreamSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ElementaryStreamSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_ElementaryStreamSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_ElementaryStreamSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_ElementaryStreamSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_ElementaryStreamSettings * This,
            /* [in] */ CC_FRAME_RATE v);
        
        END_INTERFACE
    } ICC_ElementaryStreamSettingsVtbl;

    interface ICC_ElementaryStreamSettings
    {
        CONST_VTBL struct ICC_ElementaryStreamSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ElementaryStreamSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ElementaryStreamSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ElementaryStreamSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ElementaryStreamSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ElementaryStreamSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ElementaryStreamSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ElementaryStreamSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ElementaryStreamSettings_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_ElementaryStreamSettings_put_StreamType(This,v)	\
    ( (This)->lpVtbl -> put_StreamType(This,v) ) 

#define ICC_ElementaryStreamSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_ElementaryStreamSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_ElementaryStreamSettings_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#define ICC_ElementaryStreamSettings_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ElementaryStreamSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_ByteStreamDataInfo_INTERFACE_DEFINED__
#define __ICC_ByteStreamDataInfo_INTERFACE_DEFINED__

/* interface ICC_ByteStreamDataInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ByteStreamDataInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ad2b6c6e-c53d-4421-9b7b-3b0224205257")
    ICC_ByteStreamDataInfo : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSize( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ByteOffset( 
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ByteStreamDataInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ByteStreamDataInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ByteStreamDataInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ByteStreamDataInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ByteStreamDataInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ByteStreamDataInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ByteStreamDataInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ByteStreamDataInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_ByteStreamDataInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_ByteStreamDataInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        END_INTERFACE
    } ICC_ByteStreamDataInfoVtbl;

    interface ICC_ByteStreamDataInfo
    {
        CONST_VTBL struct ICC_ByteStreamDataInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ByteStreamDataInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ByteStreamDataInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ByteStreamDataInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ByteStreamDataInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ByteStreamDataInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ByteStreamDataInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ByteStreamDataInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ByteStreamDataInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_ByteStreamDataInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ByteStreamDataInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_ElementaryDataInfo_INTERFACE_DEFINED__
#define __ICC_ElementaryDataInfo_INTERFACE_DEFINED__

/* interface ICC_ElementaryDataInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ElementaryDataInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D2C8A578-2495-4271-8F99-1DFC469E7B32")
    ICC_ElementaryDataInfo : public ICC_ByteStreamDataInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSamples( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleOffset( 
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PresentationDelta( 
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceEntryFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ElementaryDataInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ElementaryDataInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ElementaryDataInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ElementaryDataInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ElementaryDataInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ElementaryDataInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ElementaryDataInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_ElementaryDataInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        END_INTERFACE
    } ICC_ElementaryDataInfoVtbl;

    interface ICC_ElementaryDataInfo
    {
        CONST_VTBL struct ICC_ElementaryDataInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ElementaryDataInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ElementaryDataInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ElementaryDataInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ElementaryDataInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ElementaryDataInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ElementaryDataInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ElementaryDataInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ElementaryDataInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_ElementaryDataInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_ElementaryDataInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_ElementaryDataInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_ElementaryDataInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_ElementaryDataInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_ElementaryDataInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_ElementaryDataInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_ElementaryDataInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ElementaryDataInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_CodedStreamHeaderProp_INTERFACE_DEFINED__
#define __ICC_CodedStreamHeaderProp_INTERFACE_DEFINED__

/* interface ICC_CodedStreamHeaderProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_CodedStreamHeaderProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("923d7d85-60e1-479b-a546-0f8c1664c43a")
    ICC_CodedStreamHeaderProp : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCodedStreamHeader( 
            /* [size_is][out] */ BYTE *pbStreamHeaderBuf,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CodedStreamHeaderPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_CodedStreamHeaderProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_CodedStreamHeaderProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_CodedStreamHeaderProp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodedStreamHeader )( 
            ICC_CodedStreamHeaderProp * This,
            /* [size_is][out] */ BYTE *pbStreamHeaderBuf,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_CodedStreamHeaderPropVtbl;

    interface ICC_CodedStreamHeaderProp
    {
        CONST_VTBL struct ICC_CodedStreamHeaderPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_CodedStreamHeaderProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_CodedStreamHeaderProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_CodedStreamHeaderProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_CodedStreamHeaderProp_GetCodedStreamHeader(This,pbStreamHeaderBuf,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCodedStreamHeader(This,pbStreamHeaderBuf,cbSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_CodedStreamHeaderProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0051 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_EXECUTIVE_DEVICE_TYPES
    {
        CC_DEV_TYPE_ANY	= 0,
        CC_DEV_TYPE_CPU	= ( 1 << 0 ) ,
        CC_DEV_TYPE_CUDA_0	= ( 1 << 1 ) ,
        CC_DEV_TYPE_CUDA_1	= ( 1 << 2 ) ,
        CC_DEV_TYPE_CUDA_2	= ( 1 << 3 ) ,
        CC_DEV_TYPE_CUDA_3	= ( 1 << 4 ) ,
        CC_DEV_TYPE_CUDA_4	= ( 1 << 5 ) ,
        CC_DEV_TYPE_CUDA_5	= ( 1 << 6 ) ,
        CC_DEV_TYPE_CUDA_6	= ( 1 << 7 ) ,
        CC_DEV_TYPE_CUDA_7	= ( 1 << 8 ) ,
        CC_DEV_TYPE_CUDA	= ( ( ( ( ( ( ( CC_DEV_TYPE_CUDA_0 | CC_DEV_TYPE_CUDA_1 )  | CC_DEV_TYPE_CUDA_2 )  | CC_DEV_TYPE_CUDA_3 )  | CC_DEV_TYPE_CUDA_4 )  | CC_DEV_TYPE_CUDA_5 )  | CC_DEV_TYPE_CUDA_6 )  | CC_DEV_TYPE_CUDA_7 ) ,
        CC_DEV_TYPE_MSDK_0	= ( 1 << 9 ) ,
        CC_DEV_TYPE_MSDK_1	= ( 1 << 10 ) ,
        CC_DEV_TYPE_MSDK_2	= ( 1 << 11 ) ,
        CC_DEV_TYPE_MSDK_3	= ( 1 << 12 ) ,
        CC_DEV_TYPE_MSDK	= ( ( ( CC_DEV_TYPE_MSDK_0 | CC_DEV_TYPE_MSDK_1 )  | CC_DEV_TYPE_MSDK_2 )  | CC_DEV_TYPE_MSDK_3 ) 
    } 	CC_EXECUTIVE_DEVICE_TYPES;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0051_v0_0_s_ifspec;

#ifndef __ICC_ExecutiveDeviceMaskProp_INTERFACE_DEFINED__
#define __ICC_ExecutiveDeviceMaskProp_INTERFACE_DEFINED__

/* interface ICC_ExecutiveDeviceMaskProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ExecutiveDeviceMaskProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("703087c5-31bc-4156-bfd8-78048ac8e4f4")
    ICC_ExecutiveDeviceMaskProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceMask( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ExecutiveDeviceMaskProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DeviceMask( 
            /* [in] */ DWORD __MIDL__ICC_ExecutiveDeviceMaskProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ExecutiveDeviceMaskPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ExecutiveDeviceMaskProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ExecutiveDeviceMaskProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ExecutiveDeviceMaskProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceMask )( 
            ICC_ExecutiveDeviceMaskProp * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ExecutiveDeviceMaskProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeviceMask )( 
            ICC_ExecutiveDeviceMaskProp * This,
            /* [in] */ DWORD __MIDL__ICC_ExecutiveDeviceMaskProp0001);
        
        END_INTERFACE
    } ICC_ExecutiveDeviceMaskPropVtbl;

    interface ICC_ExecutiveDeviceMaskProp
    {
        CONST_VTBL struct ICC_ExecutiveDeviceMaskPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ExecutiveDeviceMaskProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ExecutiveDeviceMaskProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ExecutiveDeviceMaskProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ExecutiveDeviceMaskProp_get_DeviceMask(This,__MIDL__ICC_ExecutiveDeviceMaskProp0000)	\
    ( (This)->lpVtbl -> get_DeviceMask(This,__MIDL__ICC_ExecutiveDeviceMaskProp0000) ) 

#define ICC_ExecutiveDeviceMaskProp_put_DeviceMask(This,__MIDL__ICC_ExecutiveDeviceMaskProp0001)	\
    ( (This)->lpVtbl -> put_DeviceMask(This,__MIDL__ICC_ExecutiveDeviceMaskProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ExecutiveDeviceMaskProp_INTERFACE_DEFINED__ */


#ifndef __ICC_CollectionHandler_INTERFACE_DEFINED__
#define __ICC_CollectionHandler_INTERFACE_DEFINED__

/* interface ICC_CollectionHandler */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_CollectionHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2B55773E-6140-4B82-88AD-B0F2656835BA")
    ICC_CollectionHandler : public IUnknown
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CollectionHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_CollectionHandler * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_CollectionHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_CollectionHandler * This);
        
        END_INTERFACE
    } ICC_CollectionHandlerVtbl;

    interface ICC_CollectionHandler
    {
        CONST_VTBL struct ICC_CollectionHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_CollectionHandler_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_CollectionHandler_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_CollectionHandler_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_CollectionHandler_INTERFACE_DEFINED__ */


#ifndef __ICC_ReadOnlyCollection_INTERFACE_DEFINED__
#define __ICC_ReadOnlyCollection_INTERFACE_DEFINED__

/* interface ICC_ReadOnlyCollection */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ReadOnlyCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0579CA5C-09EE-4215-880A-9BDE78E8D5A4")
    ICC_ReadOnlyCollection : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ int *count) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ int index,
            /* [retval][out] */ IUnknown **item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetIndex( 
            /* [in] */ IUnknown *item,
            /* [retval][out] */ int *index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddHandler( 
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveHandler( 
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ReadOnlyCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ReadOnlyCollection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ReadOnlyCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ReadOnlyCollection * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ICC_ReadOnlyCollection * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICC_ReadOnlyCollection * This,
            /* [in] */ int index,
            /* [retval][out] */ IUnknown **item);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndex )( 
            ICC_ReadOnlyCollection * This,
            /* [in] */ IUnknown *item,
            /* [retval][out] */ int *index);
        
        HRESULT ( STDMETHODCALLTYPE *AddHandler )( 
            ICC_ReadOnlyCollection * This,
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveHandler )( 
            ICC_ReadOnlyCollection * This,
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler);
        
        END_INTERFACE
    } ICC_ReadOnlyCollectionVtbl;

    interface ICC_ReadOnlyCollection
    {
        CONST_VTBL struct ICC_ReadOnlyCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ReadOnlyCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ReadOnlyCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ReadOnlyCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ReadOnlyCollection_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ICC_ReadOnlyCollection_Get(This,index,item)	\
    ( (This)->lpVtbl -> Get(This,index,item) ) 

#define ICC_ReadOnlyCollection_GetIndex(This,item,index)	\
    ( (This)->lpVtbl -> GetIndex(This,item,index) ) 

#define ICC_ReadOnlyCollection_AddHandler(This,iid,handler)	\
    ( (This)->lpVtbl -> AddHandler(This,iid,handler) ) 

#define ICC_ReadOnlyCollection_RemoveHandler(This,iid,handler)	\
    ( (This)->lpVtbl -> RemoveHandler(This,iid,handler) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ReadOnlyCollection_INTERFACE_DEFINED__ */


#ifndef __ICC_Collection_INTERFACE_DEFINED__
#define __ICC_Collection_INTERFACE_DEFINED__

/* interface ICC_Collection */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Collection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CEEABD5A-2915-4585-A558-A9C558587DA4")
    ICC_Collection : public ICC_ReadOnlyCollection
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IUnknown *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveByIndex( 
            /* [in] */ int index) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ IUnknown *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReadOnlyFacade( 
            ICC_ReadOnlyCollection **pCollection) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Collection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Collection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Collection * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ICC_Collection * This,
            /* [retval][out] */ int *count);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICC_Collection * This,
            /* [in] */ int index,
            /* [retval][out] */ IUnknown **item);
        
        HRESULT ( STDMETHODCALLTYPE *GetIndex )( 
            ICC_Collection * This,
            /* [in] */ IUnknown *item,
            /* [retval][out] */ int *index);
        
        HRESULT ( STDMETHODCALLTYPE *AddHandler )( 
            ICC_Collection * This,
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveHandler )( 
            ICC_Collection * This,
            /* [in] */ REFIID iid,
            /* [in] */ ICC_CollectionHandler *handler);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            ICC_Collection * This,
            /* [in] */ IUnknown *item);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveByIndex )( 
            ICC_Collection * This,
            /* [in] */ int index);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ICC_Collection * This,
            /* [in] */ IUnknown *item);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Collection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetReadOnlyFacade )( 
            ICC_Collection * This,
            ICC_ReadOnlyCollection **pCollection);
        
        END_INTERFACE
    } ICC_CollectionVtbl;

    interface ICC_Collection
    {
        CONST_VTBL struct ICC_CollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Collection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Collection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Collection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Collection_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ICC_Collection_Get(This,index,item)	\
    ( (This)->lpVtbl -> Get(This,index,item) ) 

#define ICC_Collection_GetIndex(This,item,index)	\
    ( (This)->lpVtbl -> GetIndex(This,item,index) ) 

#define ICC_Collection_AddHandler(This,iid,handler)	\
    ( (This)->lpVtbl -> AddHandler(This,iid,handler) ) 

#define ICC_Collection_RemoveHandler(This,iid,handler)	\
    ( (This)->lpVtbl -> RemoveHandler(This,iid,handler) ) 


#define ICC_Collection_Add(This,item)	\
    ( (This)->lpVtbl -> Add(This,item) ) 

#define ICC_Collection_RemoveByIndex(This,index)	\
    ( (This)->lpVtbl -> RemoveByIndex(This,index) ) 

#define ICC_Collection_Remove(This,item)	\
    ( (This)->lpVtbl -> Remove(This,item) ) 

#define ICC_Collection_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define ICC_Collection_GetReadOnlyFacade(This,pCollection)	\
    ( (This)->lpVtbl -> GetReadOnlyFacade(This,pCollection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Collection_INTERFACE_DEFINED__ */


#ifndef __ICC_CollectionChanged_INTERFACE_DEFINED__
#define __ICC_CollectionChanged_INTERFACE_DEFINED__

/* interface ICC_CollectionChanged */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_CollectionChanged;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1A05F3A9-0943-4D65-AC76-2100E4EC6EA7")
    ICC_CollectionChanged : public ICC_CollectionHandler
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnItemAdded( 
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnItemRemoved( 
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnClear( 
            /* [in] */ ICC_Collection *collection) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CollectionChangedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_CollectionChanged * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_CollectionChanged * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_CollectionChanged * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnItemAdded )( 
            ICC_CollectionChanged * This,
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item);
        
        HRESULT ( STDMETHODCALLTYPE *OnItemRemoved )( 
            ICC_CollectionChanged * This,
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item);
        
        HRESULT ( STDMETHODCALLTYPE *OnClear )( 
            ICC_CollectionChanged * This,
            /* [in] */ ICC_Collection *collection);
        
        END_INTERFACE
    } ICC_CollectionChangedVtbl;

    interface ICC_CollectionChanged
    {
        CONST_VTBL struct ICC_CollectionChangedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_CollectionChanged_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_CollectionChanged_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_CollectionChanged_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 



#define ICC_CollectionChanged_OnItemAdded(This,collection,item)	\
    ( (This)->lpVtbl -> OnItemAdded(This,collection,item) ) 

#define ICC_CollectionChanged_OnItemRemoved(This,collection,item)	\
    ( (This)->lpVtbl -> OnItemRemoved(This,collection,item) ) 

#define ICC_CollectionChanged_OnClear(This,collection)	\
    ( (This)->lpVtbl -> OnClear(This,collection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_CollectionChanged_INTERFACE_DEFINED__ */


#ifndef __ICC_CollectionFilter_INTERFACE_DEFINED__
#define __ICC_CollectionFilter_INTERFACE_DEFINED__

/* interface ICC_CollectionFilter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_CollectionFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C61A9F1F-2ABF-4CB2-9C5D-140516663DCE")
    ICC_CollectionFilter : public ICC_CollectionHandler
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnFilter( 
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item,
            /* [retval][out] */ VARIANT_BOOL *pResult) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_CollectionFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_CollectionFilter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_CollectionFilter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_CollectionFilter * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnFilter )( 
            ICC_CollectionFilter * This,
            /* [in] */ ICC_Collection *collection,
            /* [in] */ IUnknown *item,
            /* [retval][out] */ VARIANT_BOOL *pResult);
        
        END_INTERFACE
    } ICC_CollectionFilterVtbl;

    interface ICC_CollectionFilter
    {
        CONST_VTBL struct ICC_CollectionFilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_CollectionFilter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_CollectionFilter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_CollectionFilter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 



#define ICC_CollectionFilter_OnFilter(This,collection,item,pResult)	\
    ( (This)->lpVtbl -> OnFilter(This,collection,item,pResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_CollectionFilter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0057 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_AUDIO_SAMPLE_TYPE
    {
        CC_ASMPL_PCM16	= 0,
        CC_ASMPL_PCM24	= ( CC_ASMPL_PCM16 + 1 ) ,
        CC_ASMPL_PCM32	= ( CC_ASMPL_PCM24 + 1 ) ,
        CC_ASMPL_FLOAT32	= ( CC_ASMPL_PCM32 + 1 ) 
    } 	CC_AUDIO_SAMPLE_TYPE;

typedef /* [v1_enum] */ 
enum CC_AUDIO_FMT
    {
        CAF_UNKNOWN	= 0,
        CAF_PCM8	= 0x20000,
        CAF_PCM16	= 0x10000,
        CAF_PCM24	= 0x30000,
        CAF_PCM32	= 0x40000,
        CAF_PCM32_24	= 0x70000,
        CAF_FLOAT32	= 0x100000,
        CAF_PCM8_1CH	= 0x20001,
        CAF_PCM8_2CH	= 0x20002,
        CAF_PCM16_1CH	= 0x10001,
        CAF_PCM16_2CH	= 0x10002,
        CAF_PCM16_6CH	= 0x10006,
        CAF_PCM24_1CH	= 0x30001,
        CAF_PCM24_2CH	= 0x30002,
        CAF_PCM24_6CH	= 0x30006,
        CAF_PCM32_1CH	= 0x40001,
        CAF_PCM32_2CH	= 0x40002,
        CAF_PCM32_6CH	= 0x40006,
        CAF_PCM32_24_1CH	= 0x70001,
        CAF_PCM32_24_2CH	= 0x70002,
        CAF_PCM32_24_6CH	= 0x70006,
        CAF_FLOAT32_1CH	= 0x100001,
        CAF_FLOAT32_2CH	= 0x100002,
        CAF_FMT_MASK	= 0xff0000,
        CAF_CNL_MASK	= 0xff
    } 	CC_AUDIO_FMT;

typedef 
enum CC_AUDIO_CHANNEL_ID
    {
        CC_CH_NOT_SET	= 0,
        CC_CH_FRONT_LEFT	= 1,
        CC_CH_FRONT_RIGHT	= 2,
        CC_CH_FRONT_CENTER	= 3,
        CC_CH_LOW_FREQUENCY	= 4,
        CC_CH_BACK_LEFT	= 5,
        CC_CH_BACK_RIGHT	= 6,
        CC_CH_FRONT_LEFT_OF_CENTER	= 7,
        CC_CH_FRONT_RIGHT_OF_CENTER	= 8,
        CC_CH_BACK_CENTER	= 9,
        CC_CH_SIDE_LEFT	= 10,
        CC_CH_SIDE_RIGHT	= 11,
        CC_CH_TOP_CENTER	= 12,
        CC_CH_TOP_FRONT_LEFT	= 13,
        CC_CH_TOP_FRONT_CENTER	= 14,
        CC_CH_TOP_FRONT_RIGHT	= 15,
        CC_CH_TOP_BACK_LEFT	= 16,
        CC_CH_TOP_BACK_CENTER	= 17,
        CC_CH_TOP_BACK_RIGHT	= 18
    } 	CC_AUDIO_CHANNEL_ID;

typedef 
enum CC_AUDIO_CHANNEL_MASK
    {
        CC_CH_FRONT_LEFT_MASK	= ( ( 1 << CC_CH_FRONT_LEFT )  >> 1 ) ,
        CC_CH_FRONT_RIGHT_MASK	= ( ( 1 << CC_CH_FRONT_RIGHT )  >> 1 ) ,
        CC_CH_FRONT_CENTER_MASK	= ( ( 1 << CC_CH_FRONT_CENTER )  >> 1 ) ,
        CC_CH_LOW_FREQUENCY_MASK	= ( ( 1 << CC_CH_LOW_FREQUENCY )  >> 1 ) ,
        CC_CH_BACK_LEFT_MASK	= ( ( 1 << CC_CH_BACK_LEFT )  >> 1 ) ,
        CC_CH_BACK_RIGHT_MASK	= ( ( 1 << CC_CH_BACK_RIGHT )  >> 1 ) ,
        CC_CH_FRONT_LEFT_OF_CENTER_MASK	= ( ( 1 << CC_CH_FRONT_LEFT_OF_CENTER )  >> 1 ) ,
        CC_CH_FRONT_RIGHT_OF_CENTER_MASK	= ( ( 1 << CC_CH_FRONT_RIGHT_OF_CENTER )  >> 1 ) ,
        CC_CH_BACK_CENTER_MASK	= ( ( 1 << CC_CH_BACK_CENTER )  >> 1 ) ,
        CC_CH_SIDE_LEFT_MASK	= ( ( 1 << CC_CH_SIDE_LEFT )  >> 1 ) ,
        CC_CH_SIDE_RIGHT_MASK	= ( ( 1 << CC_CH_SIDE_RIGHT )  >> 1 ) ,
        CC_CH_TOP_CENTER_MASK	= ( ( 1 << CC_CH_TOP_CENTER )  >> 1 ) ,
        CC_CH_TOP_FRONT_LEFT_MASK	= ( ( 1 << CC_CH_TOP_FRONT_LEFT )  >> 1 ) ,
        CC_CH_TOP_FRONT_CENTER_MASK	= ( ( 1 << CC_CH_TOP_FRONT_CENTER )  >> 1 ) ,
        CC_CH_TOP_FRONT_RIGHT_MASK	= ( ( 1 << CC_CH_TOP_FRONT_RIGHT )  >> 1 ) ,
        CC_CH_TOP_BACK_LEFT_MASK	= ( ( 1 << CC_CH_TOP_BACK_LEFT )  >> 1 ) ,
        CC_CH_TOP_BACK_CENTER_MASK	= ( ( 1 << CC_CH_TOP_BACK_CENTER )  >> 1 ) ,
        CC_CH_TOP_BACK_RIGHT_MASK	= ( ( 1 << CC_CH_TOP_BACK_RIGHT )  >> 1 ) ,
        CC_CH_FRONT_PAIR_MASK	= ( CC_CH_FRONT_LEFT_MASK | CC_CH_FRONT_RIGHT_MASK ) ,
        CC_CH_BACK_PAIR_MASK	= ( CC_CH_BACK_LEFT_MASK | CC_CH_BACK_RIGHT_MASK ) ,
        CC_CH_FRONT_OF_CENTER_PAIR_MASK	= ( CC_CH_FRONT_LEFT_OF_CENTER_MASK | CC_CH_FRONT_RIGHT_OF_CENTER_MASK ) 
    } 	CC_AUDIO_CHANNEL_MASK;

typedef /* [v1_enum] */ 
enum CC_AUDIO_CHANNEL_CONFIG
    {
        CC_ACFG_UNKNOWN	= 0,
        CC_ACFG_MONO	= CC_CH_FRONT_CENTER_MASK,
        CC_ACFG_DUAL_MONO	= ( CC_ACFG_MONO | CC_CH_BACK_CENTER_MASK ) ,
        CC_ACFG_2F	= CC_CH_FRONT_PAIR_MASK,
        CC_ACFG_STEREO	= CC_ACFG_2F,
        CC_ACFG_3F	= ( CC_ACFG_2F | CC_CH_FRONT_CENTER_MASK ) ,
        CC_ACFG_2F1R	= ( CC_ACFG_2F | CC_CH_BACK_CENTER_MASK ) ,
        CC_ACFG_3F1R	= ( CC_ACFG_3F | CC_CH_BACK_CENTER_MASK ) ,
        CC_ACFG_2F2R	= ( CC_ACFG_2F | CC_CH_BACK_PAIR_MASK ) ,
        CC_ACFG_3F2R	= ( CC_ACFG_3F | CC_CH_BACK_PAIR_MASK ) ,
        CC_ACFG_5F2R	= ( CC_ACFG_3F2R | CC_CH_FRONT_OF_CENTER_PAIR_MASK ) ,
        CC_ACFG_2F_LFE	= ( CC_ACFG_2F | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_3F_LFE	= ( CC_ACFG_3F | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_2F1R_LFE	= ( CC_ACFG_2F1R | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_3F1R_LFE	= ( CC_ACFG_3F1R | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_2F2R_LFE	= ( CC_ACFG_2F2R | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_3F2R_LFE	= ( CC_ACFG_3F2R | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_5F2R_LFE	= ( CC_ACFG_5F2R | CC_CH_LOW_FREQUENCY_MASK ) ,
        CC_ACFG_LFE_MASK	= CC_CH_LOW_FREQUENCY_MASK,
        CC_ACFG_MODE_MASK	= ~CC_CH_LOW_FREQUENCY_MASK
    } 	CC_AUDIO_CHANNEL_CONFIG;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0057_v0_0_s_ifspec;

#ifndef __ICC_AudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_AudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_AudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003301-be08-11dc-aa88-005056c00008")
    ICC_AudioStreamInfo : public ICC_ElementaryStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumChannels( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitsPerSample( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelMask( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        END_INTERFACE
    } ICC_AudioStreamInfoVtbl;

    interface ICC_AudioStreamInfo
    {
        CONST_VTBL struct ICC_AudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_AudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_AudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_AudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_AudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_AudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_AudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a12bf062-fd75-44a1-9adf-ad6d1a353f74")
    ICC_AudioEncoderSettings : public ICC_Settings
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        END_INTERFACE
    } ICC_AudioEncoderSettingsVtbl;

    interface ICC_AudioEncoderSettings
    {
        CONST_VTBL struct ICC_AudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioFrameInfo_INTERFACE_DEFINED__
#define __ICC_AudioFrameInfo_INTERFACE_DEFINED__

/* interface ICC_AudioFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003302-be08-11dc-aa88-005056c00008")
    ICC_AudioFrameInfo : public ICC_ElementaryDataInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AudioFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_AudioFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        END_INTERFACE
    } ICC_AudioFrameInfoVtbl;

    interface ICC_AudioFrameInfo
    {
        CONST_VTBL struct ICC_AudioFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AudioFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AudioFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AudioFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AudioFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_AudioFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_AudioFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_AudioFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_AudioFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_AudioFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_AudioFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_AudioFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_AudioFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioProducer_INTERFACE_DEFINED__
#define __ICC_AudioProducer_INTERFACE_DEFINED__

/* interface ICC_AudioProducer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioProducer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003001-be08-11dc-aa88-005056c00008")
    ICC_AudioProducer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAudio( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSampleBytes( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioFrameInfo( 
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioProducerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioProducer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioProducer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioProducer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AudioProducer * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AudioProducer * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AudioProducer * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioProducer * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AudioProducer * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AudioProducerVtbl;

    interface ICC_AudioProducer
    {
        CONST_VTBL struct ICC_AudioProducerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioProducer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioProducer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioProducer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioProducer_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioProducer_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AudioProducer_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AudioProducer_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AudioProducer_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioProducer_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioConsumer_INTERFACE_DEFINED__
#define __ICC_AudioConsumer_INTERFACE_DEFINED__

/* interface ICC_AudioConsumer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioConsumer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003002-be08-11dc-aa88-005056c00008")
    ICC_AudioConsumer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessAudio( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioConsumerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioConsumer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioConsumer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioConsumer * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AudioConsumer * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioConsumer * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        END_INTERFACE
    } ICC_AudioConsumerVtbl;

    interface ICC_AudioConsumer
    {
        CONST_VTBL struct ICC_AudioConsumerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioConsumer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioConsumer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioConsumer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioConsumer_ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioConsumer_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioConsumer_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0062 */
/* [local] */ 

typedef struct CC_AUDIO_FMT_EXT
    {
    CC_AUDIO_SAMPLE_TYPE sample_type;
    CC_AMOUNT num_channels;
    /* [length_is] */ CC_AUDIO_CHANNEL_ID channel_map[ 32 ];
    } 	CC_AUDIO_FMT_EXT;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0062_v0_0_s_ifspec;

#ifndef __ICC_AudioProducerExt_INTERFACE_DEFINED__
#define __ICC_AudioProducerExt_INTERFACE_DEFINED__

/* interface ICC_AudioProducerExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioProducerExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f865713b-9ed0-42de-ae47-27ec4543d408")
    ICC_AudioProducerExt : public ICC_AudioProducer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAudioExt( 
            /* [ref][in] */ CC_AUDIO_FMT_EXT *fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAudioFormat( 
            /* [retval][out] */ CC_AUDIO_FMT_EXT *fmt) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioProducerExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioProducerExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioProducerExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioProducerExt * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AudioProducerExt * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AudioProducerExt * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AudioProducerExt * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioProducerExt * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AudioProducerExt * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioExt )( 
            ICC_AudioProducerExt * This,
            /* [ref][in] */ CC_AUDIO_FMT_EXT *fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAudioFormat )( 
            ICC_AudioProducerExt * This,
            /* [retval][out] */ CC_AUDIO_FMT_EXT *fmt);
        
        END_INTERFACE
    } ICC_AudioProducerExtVtbl;

    interface ICC_AudioProducerExt
    {
        CONST_VTBL struct ICC_AudioProducerExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioProducerExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioProducerExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioProducerExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioProducerExt_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioProducerExt_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AudioProducerExt_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AudioProducerExt_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AudioProducerExt_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#define ICC_AudioProducerExt_GetAudioExt(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudioExt(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioProducerExt_get_DefaultAudioFormat(This,fmt)	\
    ( (This)->lpVtbl -> get_DefaultAudioFormat(This,fmt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioProducerExt_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioConsumerExt_INTERFACE_DEFINED__
#define __ICC_AudioConsumerExt_INTERFACE_DEFINED__

/* interface ICC_AudioConsumerExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioConsumerExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ad320eb-7ec1-487d-ad90-1a68e70ff8db")
    ICC_AudioConsumerExt : public ICC_AudioConsumer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessAudioExt( 
            /* [ref][in] */ CC_AUDIO_FMT_EXT *fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAudioFormat( 
            /* [retval][out] */ CC_AUDIO_FMT_EXT *fmt) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioConsumerExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioConsumerExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioConsumerExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioConsumerExt * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AudioConsumerExt * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioConsumerExt * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudioExt )( 
            ICC_AudioConsumerExt * This,
            /* [ref][in] */ CC_AUDIO_FMT_EXT *fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAudioFormat )( 
            ICC_AudioConsumerExt * This,
            /* [retval][out] */ CC_AUDIO_FMT_EXT *fmt);
        
        END_INTERFACE
    } ICC_AudioConsumerExtVtbl;

    interface ICC_AudioConsumerExt
    {
        CONST_VTBL struct ICC_AudioConsumerExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioConsumerExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioConsumerExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioConsumerExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioConsumerExt_ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioConsumerExt_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 


#define ICC_AudioConsumerExt_ProcessAudioExt(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudioExt(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioConsumerExt_get_DefaultAudioFormat(This,fmt)	\
    ( (This)->lpVtbl -> get_DefaultAudioFormat(This,fmt) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioConsumerExt_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003700-be08-11dc-aa88-005056c00008")
    ICC_AudioDecoder : public ICC_Decoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAudio( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSampleBytes( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioFrameInfo( 
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSamples( 
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_AudioDecoderVtbl;

    interface ICC_AudioDecoder
    {
        CONST_VTBL struct ICC_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioEncoder_INTERFACE_DEFINED__
#define __ICC_AudioEncoder_INTERFACE_DEFINED__

/* interface ICC_AudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00003400-be08-11dc-aa88-005056c00008")
    ICC_AudioEncoder : public ICC_Encoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessAudio( 
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioFrameInfo( 
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AudioEncoderVtbl;

    interface ICC_AudioEncoder
    {
        CONST_VTBL struct ICC_AudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_AudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_AudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioSplitter_INTERFACE_DEFINED__
#define __ICC_AudioSplitter_INTERFACE_DEFINED__

/* interface ICC_AudioSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eab5d8d8-c8f0-4ded-a2d3-31c5fd60a05a")
    ICC_AudioSplitter : public ICC_Splitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioFrameInfo( 
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AudioSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AudioSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AudioSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AudioSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AudioSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AudioSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AudioSplitterVtbl;

    interface ICC_AudioSplitter
    {
        CONST_VTBL struct ICC_AudioSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AudioSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AudioSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AudioSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AudioSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AudioSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AudioSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AudioSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AudioSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AudioSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AudioSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AudioSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AudioSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AudioSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AudioSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_AudioSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_AudioSplitter_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AudioSplitter_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_AudioFilter_INTERFACE_DEFINED__
#define __ICC_AudioFilter_INTERFACE_DEFINED__

/* interface ICC_AudioFilter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AudioFilter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("403ac16e-9b0c-47e5-b3fa-d7ec1d3af093")
    ICC_AudioFilter : public ICC_StreamProcessor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessAudio( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudio( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSampleBytes( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioStreamInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AudioFilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AudioFilter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AudioFilter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AudioFilter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AudioFilter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AudioFilter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AudioFilter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AudioFilter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AudioFilter * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AudioFilter * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        END_INTERFACE
    } ICC_AudioFilterVtbl;

    interface ICC_AudioFilter
    {
        CONST_VTBL struct ICC_AudioFilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AudioFilter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AudioFilter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AudioFilter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AudioFilter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AudioFilter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AudioFilter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AudioFilter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AudioFilter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AudioFilter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AudioFilter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AudioFilter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AudioFilter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AudioFilter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AudioFilter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AudioFilter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AudioFilter_ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioFilter_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AudioFilter_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AudioFilter_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AudioFilter_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AudioFilter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0068 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_MPG_AUDIO_CHANNEL_MODE
    {
        CC_MPG_ACH_UNKNOWN	= -1,
        CC_MPG_ACH_STEREO	= 0,
        CC_MPG_ACH_JOINT_STEREO	= 1,
        CC_MPG_ACH_DUAL_CHANNEL	= 2,
        CC_MPG_ACH_MONO	= 3
    } 	CC_MPG_AUDIO_CHANNEL_MODE;

typedef /* [v1_enum] */ 
enum CC_MPG_AUDIO_EMPHASIS
    {
        CC_MPG_EMPHASIS_UNKNOWN	= 0,
        CC_MPG_EMPHASIS_0_15	= 1,
        CC_MPG_EMPHASIS_CCITT_J17	= 3
    } 	CC_MPG_AUDIO_EMPHASIS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0068_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0068_v0_0_s_ifspec;

#ifndef __ICC_MpegAudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_MpegAudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_MpegAudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16bd8d1b-5245-4f88-a43f-2363ef8f4b2b")
    ICC_MpegAudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Layer( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelMode( 
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *__MIDL__ICC_MpegAudioStreamInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Emphasis( 
            /* [retval][out] */ CC_MPG_AUDIO_EMPHASIS *__MIDL__ICC_MpegAudioStreamInfo0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CopyrightedFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ErrorProtection( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegAudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegAudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegAudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMode )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *__MIDL__ICC_MpegAudioStreamInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Emphasis )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_MPG_AUDIO_EMPHASIS *__MIDL__ICC_MpegAudioStreamInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CopyrightedFlag )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorProtection )( 
            ICC_MpegAudioStreamInfo * This,
            /* [retval][out] */ CC_BOOL *p);
        
        END_INTERFACE
    } ICC_MpegAudioStreamInfoVtbl;

    interface ICC_MpegAudioStreamInfo
    {
        CONST_VTBL struct ICC_MpegAudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegAudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegAudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegAudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MpegAudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_MpegAudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#define ICC_MpegAudioStreamInfo_get_Layer(This,p)	\
    ( (This)->lpVtbl -> get_Layer(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_ChannelMode(This,__MIDL__ICC_MpegAudioStreamInfo0000)	\
    ( (This)->lpVtbl -> get_ChannelMode(This,__MIDL__ICC_MpegAudioStreamInfo0000) ) 

#define ICC_MpegAudioStreamInfo_get_Emphasis(This,__MIDL__ICC_MpegAudioStreamInfo0001)	\
    ( (This)->lpVtbl -> get_Emphasis(This,__MIDL__ICC_MpegAudioStreamInfo0001) ) 

#define ICC_MpegAudioStreamInfo_get_CopyrightedFlag(This,p)	\
    ( (This)->lpVtbl -> get_CopyrightedFlag(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_OriginalFlag(This,p)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,p) ) 

#define ICC_MpegAudioStreamInfo_get_ErrorProtection(This,p)	\
    ( (This)->lpVtbl -> get_ErrorProtection(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegAudioFrameInfo_INTERFACE_DEFINED__
#define __ICC_MpegAudioFrameInfo_INTERFACE_DEFINED__

/* interface ICC_MpegAudioFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("beff73fd-2452-41e3-aefb-c7f390349f4b")
    ICC_MpegAudioFrameInfo : public ICC_AudioFrameInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelMode( 
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegAudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegAudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegAudioFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMode )( 
            ICC_MpegAudioFrameInfo * This,
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *p);
        
        END_INTERFACE
    } ICC_MpegAudioFrameInfoVtbl;

    interface ICC_MpegAudioFrameInfo
    {
        CONST_VTBL struct ICC_MpegAudioFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegAudioFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegAudioFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegAudioFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MpegAudioFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_MpegAudioFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_MpegAudioFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_MpegAudioFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_MpegAudioFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_MpegAudioFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_MpegAudioFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_MpegAudioFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_MpegAudioFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 



#define ICC_MpegAudioFrameInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioFrameInfo_get_ChannelMode(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMode(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegAudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_MpegAudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_MpegAudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40858c51-86e4-496c-a6e8-81cbfe2dcc1c")
    ICC_MpegAudioEncoderSettings : public ICC_AudioEncoderSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Layer( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Layer( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelMode( 
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChannelMode( 
            /* [in] */ CC_MPG_AUDIO_CHANNEL_MODE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Emphasis( 
            /* [retval][out] */ CC_MPG_AUDIO_EMPHASIS *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Emphasis( 
            /* [in] */ CC_MPG_AUDIO_EMPHASIS v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CopyrightedFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CopyrightedFlag( 
            /* [in] */ CC_BOOL v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginalFlag( 
            /* [in] */ CC_BOOL v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ErrorProtection( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ErrorProtection( 
            /* [in] */ CC_BOOL v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMode )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_MPG_AUDIO_CHANNEL_MODE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChannelMode )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_MPG_AUDIO_CHANNEL_MODE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Emphasis )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_MPG_AUDIO_EMPHASIS *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Emphasis )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_MPG_AUDIO_EMPHASIS v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CopyrightedFlag )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CopyrightedFlag )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_BOOL v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginalFlag )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_BOOL v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorProtection )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorProtection )( 
            ICC_MpegAudioEncoderSettings * This,
            /* [in] */ CC_BOOL v);
        
        END_INTERFACE
    } ICC_MpegAudioEncoderSettingsVtbl;

    interface ICC_MpegAudioEncoderSettings
    {
        CONST_VTBL struct ICC_MpegAudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegAudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegAudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegAudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 



#define ICC_MpegAudioEncoderSettings_get_Layer(This,p)	\
    ( (This)->lpVtbl -> get_Layer(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_Layer(This,v)	\
    ( (This)->lpVtbl -> put_Layer(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_ChannelMode(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMode(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_ChannelMode(This,v)	\
    ( (This)->lpVtbl -> put_ChannelMode(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_Emphasis(This,p)	\
    ( (This)->lpVtbl -> get_Emphasis(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_Emphasis(This,v)	\
    ( (This)->lpVtbl -> put_Emphasis(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_CopyrightedFlag(This,p)	\
    ( (This)->lpVtbl -> get_CopyrightedFlag(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_CopyrightedFlag(This,v)	\
    ( (This)->lpVtbl -> put_CopyrightedFlag(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_OriginalFlag(This,p)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_OriginalFlag(This,v)	\
    ( (This)->lpVtbl -> put_OriginalFlag(This,v) ) 

#define ICC_MpegAudioEncoderSettings_get_ErrorProtection(This,p)	\
    ( (This)->lpVtbl -> get_ErrorProtection(This,p) ) 

#define ICC_MpegAudioEncoderSettings_put_ErrorProtection(This,v)	\
    ( (This)->lpVtbl -> put_ErrorProtection(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegAudioDecoder_INTERFACE_DEFINED__
#define __ICC_MpegAudioDecoder_INTERFACE_DEFINED__

/* interface ICC_MpegAudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b9c9deb-d2c4-4239-bd19-37214ae27b58")
    ICC_MpegAudioDecoder : public ICC_AudioDecoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioStreamInfo( 
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioFrameInfo( 
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegAudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegAudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegAudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_MpegAudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_MpegAudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioStreamInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioFrameInfo )( 
            ICC_MpegAudioDecoder * This,
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_MpegAudioDecoderVtbl;

    interface ICC_MpegAudioDecoder
    {
        CONST_VTBL struct ICC_MpegAudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegAudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegAudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegAudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegAudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegAudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegAudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegAudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegAudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegAudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegAudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegAudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_MpegAudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_MpegAudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_MpegAudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_MpegAudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_MpegAudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_MpegAudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#define ICC_MpegAudioDecoder_GetMpegAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioDecoder_GetMpegAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegAudioEncoder_INTERFACE_DEFINED__
#define __ICC_MpegAudioEncoder_INTERFACE_DEFINED__

/* interface ICC_MpegAudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a8810f12-baf4-449f-a5d7-052e24adb356")
    ICC_MpegAudioEncoder : public ICC_AudioEncoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioStreamInfo( 
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioFrameInfo( 
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegAudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegAudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegAudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_MpegAudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_MpegAudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioStreamInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioFrameInfo )( 
            ICC_MpegAudioEncoder * This,
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_MpegAudioEncoderVtbl;

    interface ICC_MpegAudioEncoder
    {
        CONST_VTBL struct ICC_MpegAudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegAudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegAudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegAudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegAudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegAudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegAudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegAudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegAudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegAudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegAudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegAudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_MpegAudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_MpegAudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_MpegAudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#define ICC_MpegAudioEncoder_GetMpegAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioEncoder_GetMpegAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegAudioSplitter_INTERFACE_DEFINED__
#define __ICC_MpegAudioSplitter_INTERFACE_DEFINED__

/* interface ICC_MpegAudioSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegAudioSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3ea678d6-fbfa-4aeb-84b5-ffca91b7aa84")
    ICC_MpegAudioSplitter : public ICC_AudioSplitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioStreamInfo( 
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegAudioFrameInfo( 
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegAudioSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegAudioSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegAudioSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegAudioSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegAudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegAudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_MpegAudioSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_MpegAudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_MpegAudioSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioStreamInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_MpegAudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegAudioFrameInfo )( 
            ICC_MpegAudioSplitter * This,
            /* [retval][out] */ ICC_MpegAudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_MpegAudioSplitterVtbl;

    interface ICC_MpegAudioSplitter
    {
        CONST_VTBL struct ICC_MpegAudioSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegAudioSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegAudioSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegAudioSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegAudioSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegAudioSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegAudioSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegAudioSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegAudioSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegAudioSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegAudioSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegAudioSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegAudioSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegAudioSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegAudioSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegAudioSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegAudioSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_MpegAudioSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_MpegAudioSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_MpegAudioSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_MpegAudioSplitter_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioSplitter_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#define ICC_MpegAudioSplitter_GetMpegAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioStreamInfo(This,pDescr) ) 

#define ICC_MpegAudioSplitter_GetMpegAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegAudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegAudioSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_Aes3AudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_Aes3AudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_Aes3AudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Aes3AudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6a7d55ae-19f4-46e8-87c9-27d95712e966")
    ICC_Aes3AudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelID( 
            /* [retval][out] */ CC_BYTE *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Aes3AudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Aes3AudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Aes3AudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelID )( 
            ICC_Aes3AudioStreamInfo * This,
            /* [retval][out] */ CC_BYTE *p);
        
        END_INTERFACE
    } ICC_Aes3AudioStreamInfoVtbl;

    interface ICC_Aes3AudioStreamInfo
    {
        CONST_VTBL struct ICC_Aes3AudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Aes3AudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Aes3AudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Aes3AudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Aes3AudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Aes3AudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Aes3AudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Aes3AudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Aes3AudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_Aes3AudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Aes3AudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_Aes3AudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_Aes3AudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_Aes3AudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_Aes3AudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#define ICC_Aes3AudioStreamInfo_get_ChannelID(This,p)	\
    ( (This)->lpVtbl -> get_ChannelID(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Aes3AudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Aes3AudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_Aes3AudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_Aes3AudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Aes3AudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0aac0e66-5eb9-4f8e-9888-8dc511ffa669")
    ICC_Aes3AudioEncoderSettings : public ICC_AudioEncoderSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelID( 
            /* [retval][out] */ CC_BYTE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChannelID( 
            /* [in] */ CC_BYTE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumChannels( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumChannels( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitsPerSample( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitsPerSample( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Aes3AudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Aes3AudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Aes3AudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelID )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [retval][out] */ CC_BYTE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChannelID )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ CC_BYTE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumChannels )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitsPerSample )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_Aes3AudioEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE v);
        
        END_INTERFACE
    } ICC_Aes3AudioEncoderSettingsVtbl;

    interface ICC_Aes3AudioEncoderSettings
    {
        CONST_VTBL struct ICC_Aes3AudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Aes3AudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Aes3AudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Aes3AudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Aes3AudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Aes3AudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Aes3AudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Aes3AudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 



#define ICC_Aes3AudioEncoderSettings_get_ChannelID(This,p)	\
    ( (This)->lpVtbl -> get_ChannelID(This,p) ) 

#define ICC_Aes3AudioEncoderSettings_put_ChannelID(This,v)	\
    ( (This)->lpVtbl -> put_ChannelID(This,v) ) 

#define ICC_Aes3AudioEncoderSettings_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_Aes3AudioEncoderSettings_put_NumChannels(This,v)	\
    ( (This)->lpVtbl -> put_NumChannels(This,v) ) 

#define ICC_Aes3AudioEncoderSettings_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_Aes3AudioEncoderSettings_put_BitsPerSample(This,v)	\
    ( (This)->lpVtbl -> put_BitsPerSample(This,v) ) 

#define ICC_Aes3AudioEncoderSettings_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#define ICC_Aes3AudioEncoderSettings_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Aes3AudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_Aes3AudioFrameInfo_INTERFACE_DEFINED__
#define __ICC_Aes3AudioFrameInfo_INTERFACE_DEFINED__

/* interface ICC_Aes3AudioFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Aes3AudioFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("30f5700b-dd51-4266-b99e-0a6283adf485")
    ICC_Aes3AudioFrameInfo : public ICC_AudioFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Aes3AudioFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Aes3AudioFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Aes3AudioFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_Aes3AudioFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        END_INTERFACE
    } ICC_Aes3AudioFrameInfoVtbl;

    interface ICC_Aes3AudioFrameInfo
    {
        CONST_VTBL struct ICC_Aes3AudioFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Aes3AudioFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Aes3AudioFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Aes3AudioFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Aes3AudioFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Aes3AudioFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Aes3AudioFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Aes3AudioFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Aes3AudioFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_Aes3AudioFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_Aes3AudioFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_Aes3AudioFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_Aes3AudioFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_Aes3AudioFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_Aes3AudioFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_Aes3AudioFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_Aes3AudioFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Aes3AudioFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Aes3AudioDecoder_INTERFACE_DEFINED__
#define __ICC_Aes3AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_Aes3AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Aes3AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9d054d64-c980-4108-918c-3496373314fc")
    ICC_Aes3AudioDecoder : public ICC_AudioDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Aes3AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Aes3AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Aes3AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Aes3AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Aes3AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Aes3AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Aes3AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_Aes3AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_Aes3AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_Aes3AudioDecoderVtbl;

    interface ICC_Aes3AudioDecoder
    {
        CONST_VTBL struct ICC_Aes3AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Aes3AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Aes3AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Aes3AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Aes3AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Aes3AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Aes3AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Aes3AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Aes3AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Aes3AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Aes3AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Aes3AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Aes3AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Aes3AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Aes3AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Aes3AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Aes3AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Aes3AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Aes3AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_Aes3AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_Aes3AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_Aes3AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_Aes3AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_Aes3AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Aes3AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_Aes3AudioEncoder_INTERFACE_DEFINED__
#define __ICC_Aes3AudioEncoder_INTERFACE_DEFINED__

/* interface ICC_Aes3AudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Aes3AudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17a5ca65-d735-4e22-a2f9-2971cee7e81e")
    ICC_Aes3AudioEncoder : public ICC_AudioEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Aes3AudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Aes3AudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Aes3AudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Aes3AudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Aes3AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Aes3AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Aes3AudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_Aes3AudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_Aes3AudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_Aes3AudioEncoderVtbl;

    interface ICC_Aes3AudioEncoder
    {
        CONST_VTBL struct ICC_Aes3AudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Aes3AudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Aes3AudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Aes3AudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Aes3AudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Aes3AudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Aes3AudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Aes3AudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Aes3AudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Aes3AudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Aes3AudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Aes3AudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Aes3AudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Aes3AudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Aes3AudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Aes3AudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Aes3AudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_Aes3AudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_Aes3AudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_Aes3AudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_Aes3AudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Aes3AudioEncoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0079 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_AAC_FORMAT
    {
        CC_AAC_FMT_ADTS	= 0,
        CC_AAC_FMT_ADIF	= 1,
        CC_AAC_FMT_RAW	= 2,
        CC_AAC_FMT_LATM	= 3
    } 	CC_AAC_FORMAT;

typedef /* [v1_enum] */ 
enum CC_AAC_PROFILE
    {
        CC_AAC_PROFILE_UNKNOWN	= 0,
        CC_AAC_PROFILE_MAIN	= 1,
        CC_AAC_PROFILE_LC	= 2,
        CC_AAC_PROFILE_SSR	= 3,
        CC_AAC_PROFILE_LTP	= 4,
        CC_AAC_PROFILE_SBR	= 16,
        CC_AAC_PROFILE_PS	= 32,
        CC_AAC_PROFILE_HE	= ( CC_AAC_PROFILE_LC | CC_AAC_PROFILE_SBR ) ,
        CC_AAC_PROFILE_HE2	= ( ( CC_AAC_PROFILE_LC | CC_AAC_PROFILE_SBR )  | CC_AAC_PROFILE_PS ) 
    } 	CC_AAC_PROFILE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0079_v0_0_s_ifspec;

#ifndef __ICC_AAC_AudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_AAC_AudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d85d96b-1359-4173-99f1-d940420426cc")
    ICC_AAC_AudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ CC_AAC_FORMAT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ CC_AAC_PROFILE *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_AAC_FORMAT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_AAC_AudioStreamInfo * This,
            /* [retval][out] */ CC_AAC_PROFILE *p);
        
        END_INTERFACE
    } ICC_AAC_AudioStreamInfoVtbl;

    interface ICC_AAC_AudioStreamInfo
    {
        CONST_VTBL struct ICC_AAC_AudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AAC_AudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AAC_AudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AAC_AudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AAC_AudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_AAC_AudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#define ICC_AAC_AudioStreamInfo_get_Format(This,p)	\
    ( (This)->lpVtbl -> get_Format(This,p) ) 

#define ICC_AAC_AudioStreamInfo_get_Profile(This,p)	\
    ( (This)->lpVtbl -> get_Profile(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioFrameInfo_INTERFACE_DEFINED__
#define __ICC_AAC_AudioFrameInfo_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a212acd4-c2d2-45ed-856f-0cae23f14352")
    ICC_AAC_AudioFrameInfo : public ICC_AudioFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_AAC_AudioFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        END_INTERFACE
    } ICC_AAC_AudioFrameInfoVtbl;

    interface ICC_AAC_AudioFrameInfo
    {
        CONST_VTBL struct ICC_AAC_AudioFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AAC_AudioFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AAC_AudioFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AAC_AudioFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AAC_AudioFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_AAC_AudioFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_AAC_AudioFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_AAC_AudioFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_AAC_AudioFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_AAC_AudioFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_AAC_AudioFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_AAC_AudioFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_AAC_AudioFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioStreamSettings_INTERFACE_DEFINED__
#define __ICC_AAC_AudioStreamSettings_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioStreamSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioStreamSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c48df702-21a4-454d-bcb6-28cb0e1c369f")
    ICC_AAC_AudioStreamSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ CC_AAC_FORMAT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ CC_AAC_FORMAT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ CC_AAC_PROFILE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Profile( 
            /* [in] */ CC_AAC_PROFILE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumChannels( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumChannels( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioStreamSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioStreamSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioStreamSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_AAC_FORMAT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_AAC_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_AAC_PROFILE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Profile )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_AAC_PROFILE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumChannels )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_AAC_AudioStreamSettings * This,
            /* [in] */ CC_BITRATE v);
        
        END_INTERFACE
    } ICC_AAC_AudioStreamSettingsVtbl;

    interface ICC_AAC_AudioStreamSettings
    {
        CONST_VTBL struct ICC_AAC_AudioStreamSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioStreamSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioStreamSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioStreamSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioStreamSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AAC_AudioStreamSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AAC_AudioStreamSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AAC_AudioStreamSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AAC_AudioStreamSettings_get_Format(This,p)	\
    ( (This)->lpVtbl -> get_Format(This,p) ) 

#define ICC_AAC_AudioStreamSettings_put_Format(This,v)	\
    ( (This)->lpVtbl -> put_Format(This,v) ) 

#define ICC_AAC_AudioStreamSettings_get_Profile(This,p)	\
    ( (This)->lpVtbl -> get_Profile(This,p) ) 

#define ICC_AAC_AudioStreamSettings_put_Profile(This,v)	\
    ( (This)->lpVtbl -> put_Profile(This,v) ) 

#define ICC_AAC_AudioStreamSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AAC_AudioStreamSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 

#define ICC_AAC_AudioStreamSettings_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_AAC_AudioStreamSettings_put_NumChannels(This,v)	\
    ( (This)->lpVtbl -> put_NumChannels(This,v) ) 

#define ICC_AAC_AudioStreamSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioStreamSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioStreamSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_AAC_AudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("393e9fcf-eed3-4e74-86d1-2ce034bc680c")
    ICC_AAC_AudioEncoderSettings : public ICC_AAC_AudioStreamSettings
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AAC_FORMAT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_AAC_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AAC_PROFILE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Profile )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_AAC_PROFILE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumChannels )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_AAC_AudioEncoderSettings * This,
            /* [in] */ CC_BITRATE v);
        
        END_INTERFACE
    } ICC_AAC_AudioEncoderSettingsVtbl;

    interface ICC_AAC_AudioEncoderSettings
    {
        CONST_VTBL struct ICC_AAC_AudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AAC_AudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AAC_AudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AAC_AudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AAC_AudioEncoderSettings_get_Format(This,p)	\
    ( (This)->lpVtbl -> get_Format(This,p) ) 

#define ICC_AAC_AudioEncoderSettings_put_Format(This,v)	\
    ( (This)->lpVtbl -> put_Format(This,v) ) 

#define ICC_AAC_AudioEncoderSettings_get_Profile(This,p)	\
    ( (This)->lpVtbl -> get_Profile(This,p) ) 

#define ICC_AAC_AudioEncoderSettings_put_Profile(This,v)	\
    ( (This)->lpVtbl -> put_Profile(This,v) ) 

#define ICC_AAC_AudioEncoderSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AAC_AudioEncoderSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 

#define ICC_AAC_AudioEncoderSettings_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_AAC_AudioEncoderSettings_put_NumChannels(This,v)	\
    ( (This)->lpVtbl -> put_NumChannels(This,v) ) 

#define ICC_AAC_AudioEncoderSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioEncoderSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_AAC_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("461528f1-d3d3-4349-b728-c5a27ed9afdc")
    ICC_AAC_AudioDecoder : public ICC_AudioDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AAC_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AAC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AAC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AAC_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AAC_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_AAC_AudioDecoderVtbl;

    interface ICC_AAC_AudioDecoder
    {
        CONST_VTBL struct ICC_AAC_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AAC_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AAC_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AAC_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AAC_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AAC_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AAC_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AAC_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AAC_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AAC_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AAC_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AAC_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AAC_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AAC_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AAC_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AAC_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AAC_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AAC_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_AAC_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioEncoder_INTERFACE_DEFINED__
#define __ICC_AAC_AudioEncoder_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b0fb4156-bb6a-4000-b3c5-c75c93f607a7")
    ICC_AAC_AudioEncoder : public ICC_AudioEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AAC_AudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AAC_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AAC_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AAC_AudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AAC_AudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AAC_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AAC_AudioEncoderVtbl;

    interface ICC_AAC_AudioEncoder
    {
        CONST_VTBL struct ICC_AAC_AudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AAC_AudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AAC_AudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AAC_AudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AAC_AudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AAC_AudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AAC_AudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AAC_AudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AAC_AudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AAC_AudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AAC_AudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AAC_AudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_AAC_AudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_AAC_AudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_AAC_AudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AAC_AudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AAC_AudioSplitter_INTERFACE_DEFINED__
#define __ICC_AAC_AudioSplitter_INTERFACE_DEFINED__

/* interface ICC_AAC_AudioSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AAC_AudioSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0d395265-fdf2-4c5d-b63e-c14e597f5e74")
    ICC_AAC_AudioSplitter : public ICC_AudioSplitter
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AAC_AudioSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AAC_AudioSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AAC_AudioSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AAC_AudioSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AAC_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AAC_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AAC_AudioSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AAC_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AAC_AudioSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AAC_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AAC_AudioSplitterVtbl;

    interface ICC_AAC_AudioSplitter
    {
        CONST_VTBL struct ICC_AAC_AudioSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AAC_AudioSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AAC_AudioSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AAC_AudioSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AAC_AudioSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AAC_AudioSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AAC_AudioSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AAC_AudioSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AAC_AudioSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AAC_AudioSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AAC_AudioSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AAC_AudioSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AAC_AudioSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AAC_AudioSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AAC_AudioSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AAC_AudioSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AAC_AudioSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AAC_AudioSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AAC_AudioSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_AAC_AudioSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_AAC_AudioSplitter_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AAC_AudioSplitter_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AAC_AudioSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_LATM_AAC_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_LATM_AAC_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_LATM_AAC_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_LATM_AAC_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("94f6f31b-cb5d-4813-9c1e-3e047478d063")
    ICC_LATM_AAC_AudioDecoder : public ICC_AudioDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_LATM_AAC_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_LATM_AAC_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_LATM_AAC_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_LATM_AAC_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_LATM_AAC_AudioDecoderVtbl;

    interface ICC_LATM_AAC_AudioDecoder
    {
        CONST_VTBL struct ICC_LATM_AAC_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_LATM_AAC_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_LATM_AAC_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_LATM_AAC_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_LATM_AAC_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_LATM_AAC_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_LATM_AAC_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_LATM_AAC_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_LATM_AAC_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_LATM_AAC_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_LATM_AAC_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_LATM_AAC_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_LATM_AAC_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_LATM_AAC_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_LATM_AAC_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_LATM_AAC_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_LATM_AAC_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_LATM_AAC_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_LATM_AAC_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_LATM_AAC_AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_LPCM_AudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_LPCM_AudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_LPCM_AudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_LPCM_AudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd104508-54d6-47cb-8f2b-5d4ac20874ab")
    ICC_LPCM_AudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_LPCM_AudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_LPCM_AudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_LPCM_AudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_LPCM_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        END_INTERFACE
    } ICC_LPCM_AudioStreamInfoVtbl;

    interface ICC_LPCM_AudioStreamInfo
    {
        CONST_VTBL struct ICC_LPCM_AudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_LPCM_AudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_LPCM_AudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_LPCM_AudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_LPCM_AudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_LPCM_AudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_LPCM_AudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_LPCM_AudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_LPCM_AudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_LPCM_AudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_LPCM_AudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_LPCM_AudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_LPCM_AudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_LPCM_AudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_LPCM_AudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_LPCM_AudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_LPCM_AudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_LPCM_AudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_LPCM_AudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_LPCM_AudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6da5badf-910b-4c6a-ae8c-e185e88fbd01")
    ICC_LPCM_AudioEncoderSettings : public ICC_AudioEncoderSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumChannels( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumChannels( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitsPerSample( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitsPerSample( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_UINT v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_LPCM_AudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_LPCM_AudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_LPCM_AudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumChannels )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitsPerSample )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_LPCM_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        END_INTERFACE
    } ICC_LPCM_AudioEncoderSettingsVtbl;

    interface ICC_LPCM_AudioEncoderSettings
    {
        CONST_VTBL struct ICC_LPCM_AudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_LPCM_AudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_LPCM_AudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_LPCM_AudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_LPCM_AudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_LPCM_AudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_LPCM_AudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_LPCM_AudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 



#define ICC_LPCM_AudioEncoderSettings_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_LPCM_AudioEncoderSettings_put_NumChannels(This,v)	\
    ( (This)->lpVtbl -> put_NumChannels(This,v) ) 

#define ICC_LPCM_AudioEncoderSettings_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_LPCM_AudioEncoderSettings_put_BitsPerSample(This,v)	\
    ( (This)->lpVtbl -> put_BitsPerSample(This,v) ) 

#define ICC_LPCM_AudioEncoderSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_LPCM_AudioEncoderSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_LPCM_AudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_LPCM_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_LPCM_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_LPCM_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_LPCM_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45c1f3b6-4f4b-4007-a055-19fd1960347f")
    ICC_LPCM_AudioDecoder : public ICC_AudioDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_LPCM_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_LPCM_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_LPCM_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_LPCM_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_LPCM_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_LPCM_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_LPCM_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_LPCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_LPCM_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_LPCM_AudioDecoderVtbl;

    interface ICC_LPCM_AudioDecoder
    {
        CONST_VTBL struct ICC_LPCM_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_LPCM_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_LPCM_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_LPCM_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_LPCM_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_LPCM_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_LPCM_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_LPCM_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_LPCM_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_LPCM_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_LPCM_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_LPCM_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_LPCM_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_LPCM_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_LPCM_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_LPCM_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_LPCM_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_LPCM_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_LPCM_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_LPCM_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_LPCM_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_LPCM_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_LPCM_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_LPCM_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_LPCM_AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_LPCM_AudioEncoder_INTERFACE_DEFINED__
#define __ICC_LPCM_AudioEncoder_INTERFACE_DEFINED__

/* interface ICC_LPCM_AudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_LPCM_AudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f60463f-bb23-4334-8e95-c2a38f7492ea")
    ICC_LPCM_AudioEncoder : public ICC_AudioEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_LPCM_AudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_LPCM_AudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_LPCM_AudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_LPCM_AudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_LPCM_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_LPCM_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_LPCM_AudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_LPCM_AudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_LPCM_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_LPCM_AudioEncoderVtbl;

    interface ICC_LPCM_AudioEncoder
    {
        CONST_VTBL struct ICC_LPCM_AudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_LPCM_AudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_LPCM_AudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_LPCM_AudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_LPCM_AudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_LPCM_AudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_LPCM_AudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_LPCM_AudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_LPCM_AudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_LPCM_AudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_LPCM_AudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_LPCM_AudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_LPCM_AudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_LPCM_AudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_LPCM_AudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_LPCM_AudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_LPCM_AudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_LPCM_AudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_LPCM_AudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_LPCM_AudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_LPCM_AudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_LPCM_AudioEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_BluRay_PCM_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_BluRay_PCM_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_BluRay_PCM_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_BluRay_PCM_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("69c5f8f2-a863-47d4-aaec-fb63ca987775")
    ICC_BluRay_PCM_AudioDecoder : public ICC_AudioDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BluRay_PCM_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_BluRay_PCM_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_BluRay_PCM_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_BluRay_PCM_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        END_INTERFACE
    } ICC_BluRay_PCM_AudioDecoderVtbl;

    interface ICC_BluRay_PCM_AudioDecoder
    {
        CONST_VTBL struct ICC_BluRay_PCM_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_BluRay_PCM_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_BluRay_PCM_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_BluRay_PCM_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_BluRay_PCM_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_BluRay_PCM_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_BluRay_PCM_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_BluRay_PCM_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_BluRay_PCM_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_BluRay_PCM_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_BluRay_PCM_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_BluRay_PCM_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_BluRay_PCM_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_BluRay_PCM_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_BluRay_PCM_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_BluRay_PCM_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_BluRay_PCM_AudioDecoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0092 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_AC3_ENCODER_MODE
    {
        CC_AC3_ENC_MODE_DDP	= 0,
        CC_AC3_ENC_MODE_DD	= ( CC_AC3_ENC_MODE_DDP + 1 ) ,
        CC_AC3_ENC_MODE_RESERVED_1	= ( CC_AC3_ENC_MODE_DD + 1 ) ,
        CC_AC3_ENC_MODE_BLURAY_PRIMARY	= ( CC_AC3_ENC_MODE_RESERVED_1 + 1 ) ,
        CC_AC3_ENC_MODE_BLURAY_SECONDARY	= ( CC_AC3_ENC_MODE_BLURAY_PRIMARY + 1 ) ,
        CC_AC3_ENC_MODE_RESERVED_2	= ( CC_AC3_ENC_MODE_BLURAY_SECONDARY + 1 ) ,
        CC_AC3_ENC_MODE_RESERVED_3	= ( CC_AC3_ENC_MODE_RESERVED_2 + 1 ) ,
        CC_AC3_ENC_MODE_DD_LEGACY	= ( CC_AC3_ENC_MODE_RESERVED_3 + 1 ) 
    } 	CC_AC3_ENCODER_MODE;

typedef /* [v1_enum] */ 
enum CC_AC3_BITSTREAM_MODE
    {
        CC_AC3_BSMOD_UNKNOWN	= -1,
        CC_AC3_BSMOD_CM	= 0,
        CC_AC3_BSMOD_ME	= 1,
        CC_AC3_BSMOD_VI	= 2,
        CC_AC3_BSMOD_HI	= 3,
        CC_AC3_BSMOD_D	= 4,
        CC_AC3_BSMOD_C	= 5,
        CC_AC3_BSMOD_E	= 6,
        CC_AC3_BSMOD_VO	= 7,
        CC_AC3_BSMOD_KAR	= 8
    } 	CC_AC3_BITSTREAM_MODE;

typedef /* [v1_enum] */ 
enum CC_AC3_ACMOD
    {
        CC_AC3_ACMOD_UNKNOWN	= -1,
        CC_AC3_ACMOD_DUALMONO	= 0,
        CC_AC3_ACMOD_MONO	= 1,
        CC_AC3_ACMOD_STEREO	= 2,
        CC_AC3_ACMOD_3F	= 3,
        CC_AC3_ACMOD_2F1R	= 4,
        CC_AC3_ACMOD_3F1R	= 5,
        CC_AC3_ACMOD_2F2R	= 6,
        CC_AC3_ACMOD_3F2R	= 7
    } 	CC_AC3_ACMOD;

typedef /* [v1_enum] */ 
enum CC_AC3_CMIXLEV
    {
        CC_AC3_CMIXLEV_UNKNOWN	= -1,
        CC_AC3_CMIXLEV_0	= 0,
        CC_AC3_CMIXLEV_1	= 1,
        CC_AC3_CMIXLEV_2	= 2,
        CC_AC3_CMIXLEV_RESERVED	= ( CC_AC3_CMIXLEV_2 + 1 ) 
    } 	CC_AC3_CMIXLEV;

typedef /* [v1_enum] */ 
enum CC_AC3_SURMIXLEV
    {
        CC_AC3_SURMIXLEV_UNKNOWN	= -1,
        CC_AC3_SURMIXLEV_0	= 0,
        CC_AC3_SURMIXLEV_1	= 1,
        CC_AC3_SURMIXLEV_2	= 2,
        CC_AC3_SURMIXLEV_RESERVED	= ( CC_AC3_SURMIXLEV_2 + 1 ) 
    } 	CC_AC3_SURMIXLEV;

typedef /* [v1_enum] */ 
enum CC_AC3_DSURMOD
    {
        CC_AC3_DSURMOD_UNKNOWN	= 0,
        CC_AC3_DSURMOD_NOT_DOLBY	= 1,
        CC_AC3_DSURMOD_DOLBY	= 2,
        CC_AC3_DSURMOD_RESERVED	= ( CC_AC3_DSURMOD_DOLBY + 1 ) 
    } 	CC_AC3_DSURMOD;

typedef /* [v1_enum] */ 
enum CC_AC3_ROOMTYP
    {
        CC_AC3_ROOMTYP_UNKNOWN	= 0,
        CC_AC3_ROOMTYP_LARGE_ROOM	= 1,
        CC_AC3_ROOMTYP_SMALL_ROOM	= 2,
        CC_AC3_ROOMTYP_RESERVED	= ( CC_AC3_ROOMTYP_SMALL_ROOM + 1 ) 
    } 	CC_AC3_ROOMTYP;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0092_v0_0_s_ifspec;

#ifndef __ICC_AC3_AudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_AC3_AudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d766dec9-3649-4958-96d4-508862420fa7")
    ICC_AC3_AudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitStreamId( 
            /* [retval][out] */ CC_BYTE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitStreamMode( 
            /* [retval][out] */ CC_AC3_BITSTREAM_MODE *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CenterMixLevelCode( 
            /* [retval][out] */ CC_AC3_CMIXLEV *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SurroundMixLevelCode( 
            /* [retval][out] */ CC_AC3_SURMIXLEV *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DolbySurroundMode( 
            /* [retval][out] */ CC_AC3_DSURMOD *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DialogueNorm( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CompressionGainWord( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LanguageCode( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MixingLevel( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RoomType( 
            /* [retval][out] */ CC_AC3_ROOMTYP *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CopyrightFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitStreamId )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_BYTE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitStreamMode )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_AC3_BITSTREAM_MODE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CenterMixLevelCode )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_AC3_CMIXLEV *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SurroundMixLevelCode )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_AC3_SURMIXLEV *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DolbySurroundMode )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_AC3_DSURMOD *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DialogueNorm )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompressionGainWord )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageCode )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixingLevel )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RoomType )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_AC3_ROOMTYP *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CopyrightFlag )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_AC3_AudioStreamInfo * This,
            /* [retval][out] */ CC_BOOL *p);
        
        END_INTERFACE
    } ICC_AC3_AudioStreamInfoVtbl;

    interface ICC_AC3_AudioStreamInfo
    {
        CONST_VTBL struct ICC_AC3_AudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AC3_AudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AC3_AudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AC3_AudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AC3_AudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_AC3_AudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#define ICC_AC3_AudioStreamInfo_get_BitStreamId(This,p)	\
    ( (This)->lpVtbl -> get_BitStreamId(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_BitStreamMode(This,p)	\
    ( (This)->lpVtbl -> get_BitStreamMode(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_CenterMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> get_CenterMixLevelCode(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_SurroundMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> get_SurroundMixLevelCode(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_DolbySurroundMode(This,p)	\
    ( (This)->lpVtbl -> get_DolbySurroundMode(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_DialogueNorm(This,p)	\
    ( (This)->lpVtbl -> get_DialogueNorm(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_CompressionGainWord(This,p)	\
    ( (This)->lpVtbl -> get_CompressionGainWord(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_LanguageCode(This,p)	\
    ( (This)->lpVtbl -> get_LanguageCode(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_MixingLevel(This,p)	\
    ( (This)->lpVtbl -> get_MixingLevel(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_RoomType(This,p)	\
    ( (This)->lpVtbl -> get_RoomType(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_CopyrightFlag(This,p)	\
    ( (This)->lpVtbl -> get_CopyrightFlag(This,p) ) 

#define ICC_AC3_AudioStreamInfo_get_OriginalFlag(This,p)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AC3_AudioFrameInfo_INTERFACE_DEFINED__
#define __ICC_AC3_AudioFrameInfo_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9b8e0766-3118-46f4-815b-7d2af4ecedb2")
    ICC_AC3_AudioFrameInfo : public ICC_AudioFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_AC3_AudioFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        END_INTERFACE
    } ICC_AC3_AudioFrameInfoVtbl;

    interface ICC_AC3_AudioFrameInfo
    {
        CONST_VTBL struct ICC_AC3_AudioFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AC3_AudioFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AC3_AudioFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AC3_AudioFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AC3_AudioFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_AC3_AudioFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_AC3_AudioFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_AC3_AudioFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_AC3_AudioFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_AC3_AudioFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_AC3_AudioFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_AC3_AudioFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_AC3_AudioFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_AC3_AudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_AC3_AudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b1e0805e-11b6-4f3e-8129-24de368334a3")
    ICC_AC3_AudioEncoderSettings : public ICC_AudioEncoderSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChannelConfig( 
            /* [retval][out] */ CC_AUDIO_CHANNEL_CONFIG *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChannelConfig( 
            /* [in] */ CC_AUDIO_CHANNEL_CONFIG v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitStreamId( 
            /* [retval][out] */ CC_BYTE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitStreamId( 
            /* [in] */ CC_BYTE p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitStreamMode( 
            /* [retval][out] */ CC_AC3_BITSTREAM_MODE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitStreamMode( 
            /* [in] */ CC_AC3_BITSTREAM_MODE p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CenterMixLevelCode( 
            /* [retval][out] */ CC_AC3_CMIXLEV *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CenterMixLevelCode( 
            /* [in] */ CC_AC3_CMIXLEV p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SurroundMixLevelCode( 
            /* [retval][out] */ CC_AC3_SURMIXLEV *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SurroundMixLevelCode( 
            /* [in] */ CC_AC3_SURMIXLEV p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DolbySurroundMode( 
            /* [retval][out] */ CC_AC3_DSURMOD *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DolbySurroundMode( 
            /* [in] */ CC_AC3_DSURMOD p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DialogueNorm( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DialogueNorm( 
            /* [in] */ CC_UINT p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CompressionGainWord( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CompressionGainWord( 
            /* [in] */ CC_INT p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LanguageCode( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LanguageCode( 
            /* [in] */ CC_INT p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MixingLevel( 
            /* [retval][out] */ CC_INT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MixingLevel( 
            /* [in] */ CC_INT p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RoomType( 
            /* [retval][out] */ CC_AC3_ROOMTYP *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RoomType( 
            /* [in] */ CC_AC3_ROOMTYP p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CopyrightFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CopyrightFlag( 
            /* [in] */ CC_BOOL p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginalFlag( 
            /* [in] */ CC_BOOL p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelConfig )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AUDIO_CHANNEL_CONFIG *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChannelConfig )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AUDIO_CHANNEL_CONFIG v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitStreamId )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_BYTE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitStreamId )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_BYTE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitStreamMode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AC3_BITSTREAM_MODE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitStreamMode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AC3_BITSTREAM_MODE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CenterMixLevelCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AC3_CMIXLEV *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CenterMixLevelCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AC3_CMIXLEV p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SurroundMixLevelCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AC3_SURMIXLEV *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SurroundMixLevelCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AC3_SURMIXLEV p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DolbySurroundMode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AC3_DSURMOD *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DolbySurroundMode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AC3_DSURMOD p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DialogueNorm )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DialogueNorm )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_UINT p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompressionGainWord )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompressionGainWord )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_INT p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageCode )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_INT p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixingLevel )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_INT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MixingLevel )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_INT p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RoomType )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_AC3_ROOMTYP *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RoomType )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_AC3_ROOMTYP p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CopyrightFlag )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CopyrightFlag )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_BOOL p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginalFlag )( 
            ICC_AC3_AudioEncoderSettings * This,
            /* [in] */ CC_BOOL p);
        
        END_INTERFACE
    } ICC_AC3_AudioEncoderSettingsVtbl;

    interface ICC_AC3_AudioEncoderSettings
    {
        CONST_VTBL struct ICC_AC3_AudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AC3_AudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AC3_AudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AC3_AudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 



#define ICC_AC3_AudioEncoderSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_AC3_AudioEncoderSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 

#define ICC_AC3_AudioEncoderSettings_get_ChannelConfig(This,p)	\
    ( (This)->lpVtbl -> get_ChannelConfig(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_ChannelConfig(This,v)	\
    ( (This)->lpVtbl -> put_ChannelConfig(This,v) ) 

#define ICC_AC3_AudioEncoderSettings_get_BitStreamId(This,p)	\
    ( (This)->lpVtbl -> get_BitStreamId(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_BitStreamId(This,p)	\
    ( (This)->lpVtbl -> put_BitStreamId(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_BitStreamMode(This,p)	\
    ( (This)->lpVtbl -> get_BitStreamMode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_BitStreamMode(This,p)	\
    ( (This)->lpVtbl -> put_BitStreamMode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_CenterMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> get_CenterMixLevelCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_CenterMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> put_CenterMixLevelCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_SurroundMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> get_SurroundMixLevelCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_SurroundMixLevelCode(This,p)	\
    ( (This)->lpVtbl -> put_SurroundMixLevelCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_DolbySurroundMode(This,p)	\
    ( (This)->lpVtbl -> get_DolbySurroundMode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_DolbySurroundMode(This,p)	\
    ( (This)->lpVtbl -> put_DolbySurroundMode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_DialogueNorm(This,p)	\
    ( (This)->lpVtbl -> get_DialogueNorm(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_DialogueNorm(This,p)	\
    ( (This)->lpVtbl -> put_DialogueNorm(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_CompressionGainWord(This,p)	\
    ( (This)->lpVtbl -> get_CompressionGainWord(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_CompressionGainWord(This,p)	\
    ( (This)->lpVtbl -> put_CompressionGainWord(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_LanguageCode(This,p)	\
    ( (This)->lpVtbl -> get_LanguageCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_LanguageCode(This,p)	\
    ( (This)->lpVtbl -> put_LanguageCode(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_MixingLevel(This,p)	\
    ( (This)->lpVtbl -> get_MixingLevel(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_MixingLevel(This,p)	\
    ( (This)->lpVtbl -> put_MixingLevel(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_RoomType(This,p)	\
    ( (This)->lpVtbl -> get_RoomType(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_RoomType(This,p)	\
    ( (This)->lpVtbl -> put_RoomType(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_CopyrightFlag(This,p)	\
    ( (This)->lpVtbl -> get_CopyrightFlag(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_CopyrightFlag(This,p)	\
    ( (This)->lpVtbl -> put_CopyrightFlag(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_get_OriginalFlag(This,p)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,p) ) 

#define ICC_AC3_AudioEncoderSettings_put_OriginalFlag(This,p)	\
    ( (This)->lpVtbl -> put_OriginalFlag(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_AC3_AudioEncoder_INTERFACE_DEFINED__
#define __ICC_AC3_AudioEncoder_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5779e7c-0d45-40e6-8fb6-ccba6f19e984")
    ICC_AC3_AudioEncoder : public ICC_AudioEncoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioStreamInfo( 
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioFrameInfo( 
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AC3_AudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AC3_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AC3_AudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AC3_AudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_AC3_AudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioStreamInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioFrameInfo )( 
            ICC_AC3_AudioEncoder * This,
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AC3_AudioEncoderVtbl;

    interface ICC_AC3_AudioEncoder
    {
        CONST_VTBL struct ICC_AC3_AudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AC3_AudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AC3_AudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AC3_AudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AC3_AudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AC3_AudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AC3_AudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AC3_AudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AC3_AudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AC3_AudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AC3_AudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AC3_AudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AC3_AudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_AC3_AudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_AC3_AudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_AC3_AudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#define ICC_AC3_AudioEncoder_GetAC3_AudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioEncoder_GetAC3_AudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AC3_AudioDecoder_INTERFACE_DEFINED__
#define __ICC_AC3_AudioDecoder_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7dd6b14b-3eaf-4bb5-b4e7-7144a078e5c3")
    ICC_AC3_AudioDecoder : public ICC_AudioDecoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioStreamInfo( 
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioFrameInfo( 
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AC3_AudioDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AC3_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AC3_AudioDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AC3_AudioDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudio )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetSampleBytes )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AC3_AudioDecoder * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pBool);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_AudioDecoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioStreamInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioFrameInfo )( 
            ICC_AC3_AudioDecoder * This,
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AC3_AudioDecoderVtbl;

    interface ICC_AC3_AudioDecoder
    {
        CONST_VTBL struct ICC_AC3_AudioDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AC3_AudioDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AC3_AudioDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AC3_AudioDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AC3_AudioDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AC3_AudioDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AC3_AudioDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AC3_AudioDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AC3_AudioDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AC3_AudioDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AC3_AudioDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AC3_AudioDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AC3_AudioDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AC3_AudioDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AC3_AudioDecoder_GetAudio(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudio(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_AC3_AudioDecoder_GetSampleBytes(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetSampleBytes(This,fmt,pNumBytes) ) 

#define ICC_AC3_AudioDecoder_IsFormatSupported(This,fmt,pBool)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pBool) ) 

#define ICC_AC3_AudioDecoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioDecoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 

#define ICC_AC3_AudioDecoder_get_NumSamples(This,__MIDL__ICC_AudioDecoder0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_AudioDecoder0000) ) 


#define ICC_AC3_AudioDecoder_GetAC3_AudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioDecoder_GetAC3_AudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AC3_AudioSplitter_INTERFACE_DEFINED__
#define __ICC_AC3_AudioSplitter_INTERFACE_DEFINED__

/* interface ICC_AC3_AudioSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AC3_AudioSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c0d3bba8-ad71-48c1-911e-bb35ddc2e3f3")
    ICC_AC3_AudioSplitter : public ICC_AudioSplitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioStreamInfo( 
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAC3_AudioFrameInfo( 
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AC3_AudioSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AC3_AudioSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AC3_AudioSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AC3_AudioSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AC3_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AC3_AudioSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AC3_AudioSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AC3_AudioSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AC3_AudioSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioStreamInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_AC3_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAC3_AudioFrameInfo )( 
            ICC_AC3_AudioSplitter * This,
            /* [retval][out] */ ICC_AC3_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AC3_AudioSplitterVtbl;

    interface ICC_AC3_AudioSplitter
    {
        CONST_VTBL struct ICC_AC3_AudioSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AC3_AudioSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AC3_AudioSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AC3_AudioSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AC3_AudioSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AC3_AudioSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AC3_AudioSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AC3_AudioSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AC3_AudioSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AC3_AudioSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AC3_AudioSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AC3_AudioSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AC3_AudioSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AC3_AudioSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AC3_AudioSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AC3_AudioSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AC3_AudioSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AC3_AudioSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AC3_AudioSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_AC3_AudioSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_AC3_AudioSplitter_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioSplitter_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#define ICC_AC3_AudioSplitter_GetAC3_AudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioStreamInfo(This,pDescr) ) 

#define ICC_AC3_AudioSplitter_GetAC3_AudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAC3_AudioFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AC3_AudioSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_WavAudioStreamInfo_INTERFACE_DEFINED__
#define __ICC_WavAudioStreamInfo_INTERFACE_DEFINED__

/* interface ICC_WavAudioStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_WavAudioStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fe1c44c6-f691-4ee9-b640-70f48defb600")
    ICC_WavAudioStreamInfo : public ICC_AudioStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_WavAudioStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_WavAudioStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_WavAudioStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_WavAudioStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_WavAudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_WavAudioStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_WavAudioStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChannelMask )( 
            ICC_WavAudioStreamInfo * This,
            /* [retval][out] */ CC_UINT *p);
        
        END_INTERFACE
    } ICC_WavAudioStreamInfoVtbl;

    interface ICC_WavAudioStreamInfo
    {
        CONST_VTBL struct ICC_WavAudioStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_WavAudioStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_WavAudioStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_WavAudioStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_WavAudioStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_WavAudioStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_WavAudioStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_WavAudioStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_WavAudioStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_WavAudioStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_WavAudioStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_WavAudioStreamInfo_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_WavAudioStreamInfo_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_WavAudioStreamInfo_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_WavAudioStreamInfo_get_ChannelMask(This,p)	\
    ( (This)->lpVtbl -> get_ChannelMask(This,p) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_WavAudioStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_WavAudioEncoderSettings_INTERFACE_DEFINED__
#define __ICC_WavAudioEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_WavAudioEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_WavAudioEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7fbfb34a-7005-479d-96b5-25a901496c26")
    ICC_WavAudioEncoderSettings : public ICC_LPCM_AudioEncoderSettings
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_WavAudioEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_WavAudioEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_WavAudioEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_WavAudioEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumChannels )( 
            ICC_WavAudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumChannels )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitsPerSample )( 
            ICC_WavAudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitsPerSample )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_WavAudioEncoderSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_WavAudioEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        END_INTERFACE
    } ICC_WavAudioEncoderSettingsVtbl;

    interface ICC_WavAudioEncoderSettings
    {
        CONST_VTBL struct ICC_WavAudioEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_WavAudioEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_WavAudioEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_WavAudioEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_WavAudioEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_WavAudioEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_WavAudioEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_WavAudioEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 



#define ICC_WavAudioEncoderSettings_get_NumChannels(This,p)	\
    ( (This)->lpVtbl -> get_NumChannels(This,p) ) 

#define ICC_WavAudioEncoderSettings_put_NumChannels(This,v)	\
    ( (This)->lpVtbl -> put_NumChannels(This,v) ) 

#define ICC_WavAudioEncoderSettings_get_BitsPerSample(This,p)	\
    ( (This)->lpVtbl -> get_BitsPerSample(This,p) ) 

#define ICC_WavAudioEncoderSettings_put_BitsPerSample(This,v)	\
    ( (This)->lpVtbl -> put_BitsPerSample(This,v) ) 

#define ICC_WavAudioEncoderSettings_get_SampleRate(This,p)	\
    ( (This)->lpVtbl -> get_SampleRate(This,p) ) 

#define ICC_WavAudioEncoderSettings_put_SampleRate(This,v)	\
    ( (This)->lpVtbl -> put_SampleRate(This,v) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_WavAudioEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_WavAudioEncoder_INTERFACE_DEFINED__
#define __ICC_WavAudioEncoder_INTERFACE_DEFINED__

/* interface ICC_WavAudioEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_WavAudioEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("92366695-3047-4744-aa87-8d939c6e8a69")
    ICC_WavAudioEncoder : public ICC_AudioEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_WavAudioEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_WavAudioEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_WavAudioEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_WavAudioEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_WavAudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_WavAudioEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_WavAudioEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessAudio )( 
            ICC_WavAudioEncoder * This,
            /* [in] */ CC_AUDIO_FMT Format,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioStreamInfo )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioFrameInfo )( 
            ICC_WavAudioEncoder * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_WavAudioEncoderVtbl;

    interface ICC_WavAudioEncoder
    {
        CONST_VTBL struct ICC_WavAudioEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_WavAudioEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_WavAudioEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_WavAudioEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_WavAudioEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_WavAudioEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_WavAudioEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_WavAudioEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_WavAudioEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_WavAudioEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_WavAudioEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_WavAudioEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_WavAudioEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_WavAudioEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_WavAudioEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_WavAudioEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_WavAudioEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_WavAudioEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_WavAudioEncoder_ProcessAudio(This,Format,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> ProcessAudio(This,Format,pbData,cbSize,pcbRetSize) ) 

#define ICC_WavAudioEncoder_GetAudioStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioStreamInfo(This,pDescr) ) 

#define ICC_WavAudioEncoder_GetAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetAudioFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_WavAudioEncoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0101 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_COLOR_FMT
    {
        CCF_UNKNOWN	= 0,
        CCF_RGB32	= 0x1,
        CCF_RGB24	= 0x2,
        CCF_BGR32	= 0x11,
        CCF_BGR24	= 0x12,
        CCF_RGBA	= CCF_RGB32,
        CCF_RGB	= CCF_RGB24,
        CCF_BGRA	= CCF_BGR32,
        CCF_BGR	= CCF_BGR24,
        CCF_RGB64	= 0x801,
        CCF_RGB48	= 0x802,
        CCF_BGR64	= 0x811,
        CCF_BGR48	= 0x812,
        CCF_ADOBE_RGBA_16u	= 0x901,
        CCF_ADOBE_BGRA_16u	= 0x911,
        CCF_RGBA_32F	= 0xa01,
        CCF_BGRA_32F	= 0xa11,
        CCF_RGBA_16BIT	= CCF_RGB64,
        CCF_RGB_16BIT	= CCF_RGB48,
        CCF_BGRA_16BIT	= CCF_BGR64,
        CCF_BGR_16BIT	= CCF_BGR48,
        CCF_UYVY	= 0x31,
        CCF_YUY2	= 0x32,
        CCF_YUV400	= 0x40,
        CCF_YUV420	= 0x41,
        CCF_YUV422	= 0x42,
        CCF_YUV444	= 0x43,
        CCF_YUV400_10BIT	= 0x240,
        CCF_YUV420_10BIT	= 0x241,
        CCF_YUV422_10BIT	= 0x242,
        CCF_YUV444_10BIT	= 0x243,
        CCF_YUV400_12BIT	= 0x440,
        CCF_YUV420_12BIT	= 0x441,
        CCF_YUV422_12BIT	= 0x442,
        CCF_YUV444_12BIT	= 0x443,
        CCF_YUV400_14BIT	= 0x640,
        CCF_YUV420_14BIT	= 0x641,
        CCF_YUV422_14BIT	= 0x642,
        CCF_YUV444_14BIT	= 0x643,
        CCF_YUV400_16BIT	= 0x840,
        CCF_YUV420_16BIT	= 0x841,
        CCF_YUV422_16BIT	= 0x842,
        CCF_YUV444_16BIT	= 0x843,
        CCF_UYVY_10BIT	= 0x231,
        CCF_YUY2_10BIT	= 0x232,
        CCF_UYVY_12BIT	= 0x431,
        CCF_YUY2_12BIT	= 0x432,
        CCF_UYVY_14BIT	= 0x631,
        CCF_YUY2_14BIT	= 0x632,
        CCF_UYVY_16BIT	= 0x831,
        CCF_YUY2_16BIT	= 0x832,
        CCF_UYVY_32F	= 0xa31,
        CCF_YUY2_32F	= 0xa32,
        CCF_YV12	= CCF_YUV420,
        CCF_YV16	= CCF_YUV422,
        CCF_NV12	= 0x112,
        CCF_V210	= 0x210,
        CCF_SC10	= 0x211,
        CCF_Y216	= CCF_YUY2_16BIT,
        CCF_Y8	= 0x8
    } 	CC_COLOR_FMT;

typedef /* [v1_enum] */ 
enum CC_FRAME_TYPE
    {
        CC_FRAME_TYPE_UNKNOWN	= 0,
        CC_I_FRAME	= ( CC_FRAME_TYPE_UNKNOWN + 1 ) ,
        CC_P_FRAME	= ( CC_I_FRAME + 1 ) ,
        CC_B_FRAME	= ( CC_P_FRAME + 1 ) 
    } 	CC_FRAME_TYPE;

typedef /* [v1_enum] */ 
enum CC_INTERLACE_TYPE
    {
        CC_UNKNOWN_INTERLACE_TYPE	= -1,
        CC_NO_INTERLACE	= 0,
        CC_PROGRESSIVE	= 0,
        CC_TOP_FIELD_FIRST	= 1,
        CC_TFF	= 1,
        CC_BOTTOM_FIELD_FIRST	= 2,
        CC_BFF	= 2,
        CC_TELECINE	= 23
    } 	CC_INTERLACE_TYPE;

typedef /* [v1_enum] */ 
enum CC_DEINTERLACE_METHOD
    {
        CC_DEINTERLACE_NONE	= 0,
        CC_DEINTERLACE_BOB	= 1,
        CC_DEINTERLACE_CAVT	= 2
    } 	CC_DEINTERLACE_METHOD;

typedef /* [v1_enum] */ 
enum CC_AFF_TYPE
    {
        CC_AFF_FRAME	= 0,
        CC_AFF_FIELD	= ( CC_AFF_FRAME + 1 ) ,
        CC_AFF_ADAPTIVE	= ( CC_AFF_FIELD + 1 ) 
    } 	CC_AFF_TYPE;

typedef /* [v1_enum] */ 
enum CC_PICTURE_STRUCTURE
    {
        CC_PICTURE_STRUCTURE_UNKNOWN	= -1,
        CC_WHOLE_FRAME	= 0,
        CC_PAIR_OF_FIELDS	= ( CC_WHOLE_FRAME + 1 ) ,
        CC_PAFF	= ( CC_PAIR_OF_FIELDS + 1 ) 
    } 	CC_PICTURE_STRUCTURE;

typedef /* [v1_enum] */ 
enum CC_MB_STRUCTURE
    {
        CC_MBAFF	= 0,
        CC_MB_PROGRESSIVE	= ( CC_MBAFF + 1 ) ,
        CC_MB_INTERLACED	= ( CC_MB_PROGRESSIVE + 1 ) 
    } 	CC_MB_STRUCTURE;

typedef struct CC_GOP_DESCR
    {
    CC_PERIOD N;
    CC_UINT M;
    } 	CC_GOP_DESCR;

#ifdef __cplusplus
namespace cinecoder {
inline const CC_GOP_DESCR MK_GOP_DESCR(CC_PERIOD N, CC_UINT M) { CC_GOP_DESCR gop={N,M}; return gop; }
};
#endif
typedef /* [v1_enum] */ 
enum CC_GOP_PATTERN
    {
        CC_GOP_I	= 0,
        CC_GOP_IP	= 1,
        CC_GOP_IBP	= 2,
        CC_GOP_IBBP	= 3,
        CC_GOP_IBBBP	= 4,
        CC_GOP_IBBBBP	= 5
    } 	CC_GOP_PATTERN;

typedef struct CC_QUANT_DESCR
    {
    CC_BYTE Qi;
    CC_BYTE Qp;
    CC_BYTE Qb;
    } 	CC_QUANT_DESCR;

#ifdef __cplusplus
namespace cinecoder {
extern "C++" inline const CC_QUANT_DESCR MK_QUANT_DESCR(CC_BYTE q) { CC_QUANT_DESCR qd={q,q,q}; return qd; }
extern "C++" inline const CC_QUANT_DESCR MK_QUANT_DESCR(CC_BYTE qi, CC_BYTE qp, CC_BYTE qb) { CC_QUANT_DESCR qd={qi,qp,qb}; return qd; }
};
#endif
typedef /* [v1_enum] */ 
enum CC_COLOUR_PRIMARIES
    {
        CC_CPRIMS_UNKNOWN	= 0,
        CC_CPRIMS_ITUR_BT_709	= ( CC_CPRIMS_UNKNOWN + 1 ) ,
        CC_CPRIMS_UNSPECIFIED	= ( CC_CPRIMS_ITUR_BT_709 + 1 ) ,
        CC_CPRIMS_RESERVED	= ( CC_CPRIMS_UNSPECIFIED + 1 ) ,
        CC_CPRIMS_ITUR_BT_470_M	= ( CC_CPRIMS_RESERVED + 1 ) ,
        CC_CPRIMS_ITUR_BT_470_BG	= ( CC_CPRIMS_ITUR_BT_470_M + 1 ) ,
        CC_CPRIMS_SMPTE_170M	= ( CC_CPRIMS_ITUR_BT_470_BG + 1 ) ,
        CC_CPRIMS_SMPTE_240M	= ( CC_CPRIMS_SMPTE_170M + 1 ) ,
        CC_CPRIMS_GENERIC_FILM	= ( CC_CPRIMS_SMPTE_240M + 1 ) ,
        CC_CPRIMS_ITUR_BT_2020	= ( CC_CPRIMS_GENERIC_FILM + 1 ) ,
        CC_CPRIMS_SMPTE_ST_428_1	= ( CC_CPRIMS_ITUR_BT_2020 + 1 ) ,
        CC_CPRIMS_SMPTE_ST_431_2	= ( CC_CPRIMS_SMPTE_ST_428_1 + 1 ) ,
        CC_CPRIMS_SMPTE_ST_432_1	= ( CC_CPRIMS_SMPTE_ST_431_2 + 1 ) ,
        CC_CPRIMS_DCI_P3	= CC_CPRIMS_SMPTE_ST_431_2,
        CC_CPRIMS_P3_D65	= CC_CPRIMS_SMPTE_ST_432_1,
        CC_CPRIMS_TOTAL	= ( CC_CPRIMS_P3_D65 + 1 ) 
    } 	CC_COLOUR_PRIMARIES;

typedef /* [v1_enum] */ 
enum CC_TRANSFER_CHARACTERISTICS
    {
        CC_TXCHRS_UNKNOWN	= 0,
        CC_TXCHRS_ITUR_BT_709	= ( CC_TXCHRS_UNKNOWN + 1 ) ,
        CC_TXCHRS_UNSPECIFIED	= ( CC_TXCHRS_ITUR_BT_709 + 1 ) ,
        CC_TXCHRS_RESERVED	= ( CC_TXCHRS_UNSPECIFIED + 1 ) ,
        CC_TXCHRS_ITUR_BT_470_M	= ( CC_TXCHRS_RESERVED + 1 ) ,
        CC_TXCHRS_ITUR_BT_470_BG	= ( CC_TXCHRS_ITUR_BT_470_M + 1 ) ,
        CC_TXCHRS_SMPTE_170M	= ( CC_TXCHRS_ITUR_BT_470_BG + 1 ) ,
        CC_TXCHRS_SMPTE_240M	= ( CC_TXCHRS_SMPTE_170M + 1 ) ,
        CC_TXCHRS_LINEAR	= ( CC_TXCHRS_SMPTE_240M + 1 ) ,
        CC_TXCHRS_LOG_100	= ( CC_TXCHRS_LINEAR + 1 ) ,
        CC_TXCHRS_LOG_316	= ( CC_TXCHRS_LOG_100 + 1 ) ,
        CC_TXCHRS_IEC_61966_2_4	= ( CC_TXCHRS_LOG_316 + 1 ) ,
        CC_TXCHRS_ITUR_BT_1361	= ( CC_TXCHRS_IEC_61966_2_4 + 1 ) ,
        CC_TXCHRS_IEC_61966_2_1	= ( CC_TXCHRS_ITUR_BT_1361 + 1 ) ,
        CC_TXCHRS_ITUR_BT_2020_10BIT	= ( CC_TXCHRS_IEC_61966_2_1 + 1 ) ,
        CC_TXCHRS_ITUR_BT_2020_12BIT	= ( CC_TXCHRS_ITUR_BT_2020_10BIT + 1 ) ,
        CC_TXCHRS_SMPTE_ST_2084	= ( CC_TXCHRS_ITUR_BT_2020_12BIT + 1 ) ,
        CC_TXCHRS_SMPTE_ST_428_1	= ( CC_TXCHRS_SMPTE_ST_2084 + 1 ) ,
        CC_TXCHRS_HLG	= ( CC_TXCHRS_SMPTE_ST_428_1 + 1 ) ,
        CC_TXCHRS_TOTAL	= ( CC_TXCHRS_HLG + 1 ) 
    } 	CC_TRANSFER_CHARACTERISTICS;

typedef /* [v1_enum] */ 
enum CC_MATRIX_COEFFICIENTS
    {
        CC_MCOEFS_UNKNOWN	= 0,
        CC_MCOEFS_ITUR_BT_709	= ( CC_MCOEFS_UNKNOWN + 1 ) ,
        CC_MCOEFS_UNSPECIFIED	= ( CC_MCOEFS_ITUR_BT_709 + 1 ) ,
        CC_MCOEFS_RESERVED	= ( CC_MCOEFS_UNSPECIFIED + 1 ) ,
        CC_MCOEFS_FCC	= ( CC_MCOEFS_RESERVED + 1 ) ,
        CC_MCOEFS_ITUR_BT_470_BG	= ( CC_MCOEFS_FCC + 1 ) ,
        CC_MCOEFS_SMPTE_170M	= ( CC_MCOEFS_ITUR_BT_470_BG + 1 ) ,
        CC_MCOEFS_SMPTE_240M	= ( CC_MCOEFS_SMPTE_170M + 1 ) ,
        CC_MCOEFS_YCGCO	= ( CC_MCOEFS_SMPTE_240M + 1 ) ,
        CC_MCOEFS_ITUR_BT_2020_NON_CONST	= ( CC_MCOEFS_YCGCO + 1 ) ,
        CC_MCOEFS_ITUR_BT_2020_CONST	= ( CC_MCOEFS_ITUR_BT_2020_NON_CONST + 1 ) ,
        CC_MCOEFS_SMPTE_2085	= ( CC_MCOEFS_ITUR_BT_2020_CONST + 1 ) ,
        CC_MCOEFS_TOTAL	= ( CC_MCOEFS_SMPTE_2085 + 1 ) 
    } 	CC_MATRIX_COEFFICIENTS;

typedef struct CC_COLOUR_DESCRIPTION
    {
    CC_COLOUR_PRIMARIES CP;
    CC_TRANSFER_CHARACTERISTICS TC;
    CC_MATRIX_COEFFICIENTS MC;
    } 	CC_COLOUR_DESCRIPTION;

#ifdef __cplusplus
namespace cinecoder {
inline const CC_COLOUR_DESCRIPTION MK_COLOR_TX_DESCR(CC_COLOUR_PRIMARIES CP, CC_TRANSFER_CHARACTERISTICS TC, CC_MATRIX_COEFFICIENTS MC) { CC_COLOUR_DESCRIPTION d={CP,TC,MC}; return d; }
};
#endif
typedef /* [v1_enum] */ 
enum CC_CHROMA_FORMAT
    {
        CC_CHROMA_FORMAT_UNKNOWN	= -1,
        CC_CHROMA_400	= ( CC_CHROMA_FORMAT_UNKNOWN + 1 ) ,
        CC_CHROMA_420	= ( CC_CHROMA_400 + 1 ) ,
        CC_CHROMA_422	= ( CC_CHROMA_420 + 1 ) ,
        CC_CHROMA_444	= ( CC_CHROMA_422 + 1 ) ,
        CC_CHROMA_RGB	= ( CC_CHROMA_444 + 1 ) ,
        CC_CHROMA_ALPHA	= 8,
        CC_CHROMA_4000	= CC_CHROMA_400,
        CC_CHROMA_4004	= ( CC_CHROMA_400 | CC_CHROMA_ALPHA ) ,
        CC_CHROMA_4200	= CC_CHROMA_420,
        CC_CHROMA_4204	= ( CC_CHROMA_420 | CC_CHROMA_ALPHA ) ,
        CC_CHROMA_4220	= CC_CHROMA_422,
        CC_CHROMA_4224	= ( CC_CHROMA_422 | CC_CHROMA_ALPHA ) ,
        CC_CHROMA_4440	= CC_CHROMA_444,
        CC_CHROMA_4444	= ( CC_CHROMA_444 | CC_CHROMA_ALPHA ) ,
        CC_CHROMA_RGBA	= ( CC_CHROMA_RGB | CC_CHROMA_ALPHA ) 
    } 	CC_CHROMA_FORMAT;

typedef /* [v1_enum] */ 
enum CC_VIDEO_FORMAT
    {
        CC_VIDEO_FORMAT_COMPONENT	= 0,
        CC_VIDEO_FORMAT_PAL	= ( CC_VIDEO_FORMAT_COMPONENT + 1 ) ,
        CC_VIDEO_FORMAT_NTSC	= ( CC_VIDEO_FORMAT_PAL + 1 ) ,
        CC_VIDEO_FORMAT_SECAM	= ( CC_VIDEO_FORMAT_NTSC + 1 ) ,
        CC_VIDEO_FORMAT_MAC	= ( CC_VIDEO_FORMAT_SECAM + 1 ) ,
        CC_VIDEO_FORMAT_UNSPECIFIED	= ( CC_VIDEO_FORMAT_MAC + 1 ) ,
        CC_VIDEO_FORMAT_TOTAL	= ( CC_VIDEO_FORMAT_UNSPECIFIED + 1 ) 
    } 	CC_VIDEO_FORMAT;

typedef /* [v1_enum] */ 
enum CC_PICTURE_ORIENTATION
    {
        CC_PO_DEFAULT	= 0,
        CC_PO_FLIP_VERTICAL	= 1,
        CC_PO_FLIP_HORIZONTAL	= 2,
        CC_PO_ROTATED_180DEG	= 3,
        CC_PO_ROTATED_90DEG	= 4,
        CC_PO_ROTATED_270DEG	= 5,
        CC_PO_TOTAL	= ( CC_PO_ROTATED_270DEG + 1 ) 
    } 	CC_PICTURE_ORIENTATION;

typedef struct CC_VIDEO_FRAME_DESCR
    {
    CC_COLOR_FMT cFormat;
    CC_SIZE szFrame;
    CC_INT iStride;
    RECT rcCrop;
    } 	CC_VIDEO_FRAME_DESCR;

#if 0
typedef struct CC_ADD_VIDEO_FRAME_PARAMS
    {
    CC_COLOR_FMT cFormat;
    CC_SIZE szFrame;
    CC_INT iStride;
    RECT rcCrop;
    } 	CC_ADD_VIDEO_FRAME_PARAMS;

#else
typedef CC_VIDEO_FRAME_DESCR CC_ADD_VIDEO_FRAME_PARAMS;
#endif
typedef struct CC_QUANT_MATRIX_4x4
    {
    BYTE data[ 16 ];
    } 	CC_QUANT_MATRIX_4x4;

typedef struct CC_QUANT_MATRIX_8x8
    {
    BYTE data[ 64 ];
    } 	CC_QUANT_MATRIX_8x8;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0101_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0101_v0_0_s_ifspec;

#ifndef __ICC_VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002201-be08-11dc-aa88-005056c00008")
    ICC_VideoStreamInfo : public ICC_ElementaryStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *s) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *a) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgressiveSequence( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        END_INTERFACE
    } ICC_VideoStreamInfoVtbl;

    interface ICC_VideoStreamInfo
    {
        CONST_VTBL struct ICC_VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoStreamInfoExt_INTERFACE_DEFINED__
#define __ICC_VideoStreamInfoExt_INTERFACE_DEFINED__

/* interface ICC_VideoStreamInfoExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoStreamInfoExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("344748d5-e5b1-48cf-8ac0-0b18358723da")
    ICC_VideoStreamInfoExt : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthLuma( 
            /* [retval][out] */ CC_UINT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthChroma( 
            /* [retval][out] */ CC_UINT *v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoStreamInfoExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoStreamInfoExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoStreamInfoExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoStreamInfoExt * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_VideoStreamInfoExt * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_VideoStreamInfoExt * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_VideoStreamInfoExt * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthLuma )( 
            ICC_VideoStreamInfoExt * This,
            /* [retval][out] */ CC_UINT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthChroma )( 
            ICC_VideoStreamInfoExt * This,
            /* [retval][out] */ CC_UINT *v);
        
        END_INTERFACE
    } ICC_VideoStreamInfoExtVtbl;

    interface ICC_VideoStreamInfoExt
    {
        CONST_VTBL struct ICC_VideoStreamInfoExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoStreamInfoExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoStreamInfoExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoStreamInfoExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoStreamInfoExt_get_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,v) ) 

#define ICC_VideoStreamInfoExt_get_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,v) ) 

#define ICC_VideoStreamInfoExt_get_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,v) ) 

#define ICC_VideoStreamInfoExt_get_BitDepthLuma(This,v)	\
    ( (This)->lpVtbl -> get_BitDepthLuma(This,v) ) 

#define ICC_VideoStreamInfoExt_get_BitDepthChroma(This,v)	\
    ( (This)->lpVtbl -> get_BitDepthChroma(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoStreamInfoExt_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002203-be08-11dc-aa88-005056c00008")
    ICC_VideoFrameInfo : public ICC_ElementaryDataInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Number( 
            /* [retval][out] */ CC_UINT *n) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodingNumber( 
            /* [retval][out] */ CC_UINT *c) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimeCode( 
            /* [retval][out] */ CC_TIMECODE *t) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *i) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameType( 
            /* [retval][out] */ CC_FRAME_TYPE *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictStruct( 
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Flags( 
            /* [retval][out] */ DWORD *x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_VideoFrameInfoVtbl;

    interface ICC_VideoFrameInfo
    {
        CONST_VTBL struct ICC_VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoFrameSecondFieldProp_INTERFACE_DEFINED__
#define __ICC_VideoFrameSecondFieldProp_INTERFACE_DEFINED__

/* interface ICC_VideoFrameSecondFieldProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoFrameSecondFieldProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("204d5e69-3539-4bc7-8364-897251f2739a")
    ICC_VideoFrameSecondFieldProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SecondField( 
            /* [retval][out] */ ICC_VideoFrameInfo **f) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoFrameSecondFieldPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoFrameSecondFieldProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoFrameSecondFieldProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoFrameSecondFieldProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SecondField )( 
            ICC_VideoFrameSecondFieldProp * This,
            /* [retval][out] */ ICC_VideoFrameInfo **f);
        
        END_INTERFACE
    } ICC_VideoFrameSecondFieldPropVtbl;

    interface ICC_VideoFrameSecondFieldProp
    {
        CONST_VTBL struct ICC_VideoFrameSecondFieldPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoFrameSecondFieldProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoFrameSecondFieldProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoFrameSecondFieldProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoFrameSecondFieldProp_get_SecondField(This,f)	\
    ( (This)->lpVtbl -> get_SecondField(This,f) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoFrameSecondFieldProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0105 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_USER_DATA_TYPE
    {
        CC_UDT_UNSPEC	= 0,
        CC_UDT_GUIDED	= ( CC_UDT_UNSPEC + 1 ) ,
        CC_UDT_TOTAL	= ( CC_UDT_GUIDED + 1 ) 
    } 	CC_USER_DATA_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0105_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0105_v0_0_s_ifspec;

#ifndef __ICC_VideoFrameUserDataProp_INTERFACE_DEFINED__
#define __ICC_VideoFrameUserDataProp_INTERFACE_DEFINED__

/* interface ICC_VideoFrameUserDataProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoFrameUserDataProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37ad7e37-5275-44ea-88a3-71978c712b40")
    ICC_VideoFrameUserDataProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserDataType( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [out] */ CC_USER_DATA_TYPE *pType) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoFrameUserDataPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoFrameUserDataProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoFrameUserDataProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoFrameUserDataProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_VideoFrameUserDataProp * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_VideoFrameUserDataProp * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserDataType )( 
            ICC_VideoFrameUserDataProp * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [out] */ CC_USER_DATA_TYPE *pType);
        
        END_INTERFACE
    } ICC_VideoFrameUserDataPropVtbl;

    interface ICC_VideoFrameUserDataProp
    {
        CONST_VTBL struct ICC_VideoFrameUserDataPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoFrameUserDataProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoFrameUserDataProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoFrameUserDataProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoFrameUserDataProp_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_VideoFrameUserDataProp_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#define ICC_VideoFrameUserDataProp_GetUserDataType(This,dwUserDataNumber,pType)	\
    ( (This)->lpVtbl -> GetUserDataType(This,dwUserDataNumber,pType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoFrameUserDataProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0106 */
/* [local] */ 

typedef struct CC_VIDEO_QUALITY_INFO
    {
    CC_QUALITY_MEASURE Y;
    CC_QUALITY_MEASURE U;
    CC_QUALITY_MEASURE V;
    } 	CC_VIDEO_QUALITY_INFO;

#ifdef __cplusplus
namespace cinecoder {
inline const CC_VIDEO_QUALITY_INFO MK_VIDEO_QUALITY_INFO(CC_QUALITY_MEASURE y, CC_QUALITY_MEASURE u, CC_QUALITY_MEASURE v) { CC_VIDEO_QUALITY_INFO qi={y,u,v}; return qi; }
};
#endif


extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0106_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0106_v0_0_s_ifspec;

#ifndef __ICC_VideoFrameQualityInfo_INTERFACE_DEFINED__
#define __ICC_VideoFrameQualityInfo_INTERFACE_DEFINED__

/* interface ICC_VideoFrameQualityInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoFrameQualityInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002205-be08-11dc-aa88-005056c00008")
    ICC_VideoFrameQualityInfo : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PSNR( 
            /* [retval][out] */ CC_VIDEO_QUALITY_INFO *pPSNR) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AvgQuantScale( 
            /* [retval][out] */ CC_FLOAT *pQS) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoFrameQualityInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoFrameQualityInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoFrameQualityInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoFrameQualityInfo * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PSNR )( 
            ICC_VideoFrameQualityInfo * This,
            /* [retval][out] */ CC_VIDEO_QUALITY_INFO *pPSNR);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvgQuantScale )( 
            ICC_VideoFrameQualityInfo * This,
            /* [retval][out] */ CC_FLOAT *pQS);
        
        END_INTERFACE
    } ICC_VideoFrameQualityInfoVtbl;

    interface ICC_VideoFrameQualityInfo
    {
        CONST_VTBL struct ICC_VideoFrameQualityInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoFrameQualityInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoFrameQualityInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoFrameQualityInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoFrameQualityInfo_get_PSNR(This,pPSNR)	\
    ( (This)->lpVtbl -> get_PSNR(This,pPSNR) ) 

#define ICC_VideoFrameQualityInfo_get_AvgQuantScale(This,pQS)	\
    ( (This)->lpVtbl -> get_AvgQuantScale(This,pQS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoFrameQualityInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_PsnrCalculationProp_INTERFACE_DEFINED__
#define __ICC_PsnrCalculationProp_INTERFACE_DEFINED__

/* interface ICC_PsnrCalculationProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_PsnrCalculationProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a011f6c3-59ad-4ad9-afe0-4abade61971e")
    ICC_PsnrCalculationProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CalculatePSNR( 
            /* [retval][out] */ CC_BOOL *pFlag) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CalculatePSNR( 
            /* [in] */ CC_BOOL Flag) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_PsnrCalculationPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_PsnrCalculationProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_PsnrCalculationProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_PsnrCalculationProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CalculatePSNR )( 
            ICC_PsnrCalculationProp * This,
            /* [retval][out] */ CC_BOOL *pFlag);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CalculatePSNR )( 
            ICC_PsnrCalculationProp * This,
            /* [in] */ CC_BOOL Flag);
        
        END_INTERFACE
    } ICC_PsnrCalculationPropVtbl;

    interface ICC_PsnrCalculationProp
    {
        CONST_VTBL struct ICC_PsnrCalculationPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_PsnrCalculationProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_PsnrCalculationProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_PsnrCalculationProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_PsnrCalculationProp_get_CalculatePSNR(This,pFlag)	\
    ( (This)->lpVtbl -> get_CalculatePSNR(This,pFlag) ) 

#define ICC_PsnrCalculationProp_put_CalculatePSNR(This,Flag)	\
    ( (This)->lpVtbl -> put_CalculatePSNR(This,Flag) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_PsnrCalculationProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0108 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0108_v0_0_s_ifspec;

#ifndef __ICC_VideoProducer_INTERFACE_DEFINED__
#define __ICC_VideoProducer_INTERFACE_DEFINED__

/* interface ICC_VideoProducer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoProducer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002002-be08-11dc-aa88-005056c00008")
    ICC_VideoProducer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFrame( 
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride = 0,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStride( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFrameAvailable( 
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoStreamInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoProducerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoProducer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoProducer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoProducer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_VideoProducer * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoProducer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoProducer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsFrameAvailable )( 
            ICC_VideoProducer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoProducer * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoProducer * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_VideoProducerVtbl;

    interface ICC_VideoProducer
    {
        CONST_VTBL struct ICC_VideoProducerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoProducer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoProducer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoProducer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoProducer_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_VideoProducer_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoProducer_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoProducer_IsFrameAvailable(This,pResult)	\
    ( (This)->lpVtbl -> IsFrameAvailable(This,pResult) ) 

#define ICC_VideoProducer_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoProducer_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoProducer_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoConsumer_INTERFACE_DEFINED__
#define __ICC_VideoConsumer_INTERFACE_DEFINED__

/* interface ICC_VideoConsumer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoConsumer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002003-be08-11dc-aa88-005056c00008")
    ICC_VideoConsumer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddFrame( 
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_INT stride = 0,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStride( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoStreamInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoConsumerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoConsumer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoConsumer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoConsumer * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_VideoConsumer * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoConsumer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoConsumer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoConsumer * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoConsumer * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_VideoConsumerVtbl;

    interface ICC_VideoConsumer
    {
        CONST_VTBL struct ICC_VideoConsumerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoConsumer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoConsumer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoConsumer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoConsumer_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_VideoConsumer_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoConsumer_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoConsumer_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoConsumer_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoConsumer_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoConsumerExt_INTERFACE_DEFINED__
#define __ICC_VideoConsumerExt_INTERFACE_DEFINED__

/* interface ICC_VideoConsumerExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoConsumerExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002004-be08-11dc-aa88-005056c00008")
    ICC_VideoConsumerExt : public ICC_VideoConsumer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddScaleFrame( 
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsScaleAvailable( 
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoConsumerExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoConsumerExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoConsumerExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoConsumerExt * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_VideoConsumerExt * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoConsumerExt * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoConsumerExt * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoConsumerExt * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoConsumerExt * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_VideoConsumerExt * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_VideoConsumerExt * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        END_INTERFACE
    } ICC_VideoConsumerExtVtbl;

    interface ICC_VideoConsumerExt
    {
        CONST_VTBL struct ICC_VideoConsumerExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoConsumerExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoConsumerExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoConsumerExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoConsumerExt_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_VideoConsumerExt_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoConsumerExt_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoConsumerExt_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoConsumerExt_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_VideoConsumerExt_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_VideoConsumerExt_IsScaleAvailable(This,pParams,pResult)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,pResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoConsumerExt_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoConsumerExtAsync_INTERFACE_DEFINED__
#define __ICC_VideoConsumerExtAsync_INTERFACE_DEFINED__

/* interface ICC_VideoConsumerExtAsync */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoConsumerExtAsync;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a54e5863-382b-4a9c-bf2d-287d5fbdb0a8")
    ICC_VideoConsumerExtAsync : public ICC_VideoConsumerExt
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddScaleFrameAsync( 
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][in] */ IUnknown *pLockObj = 0,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoConsumerExtAsyncVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoConsumerExtAsync * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoConsumerExtAsync * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoConsumerExtAsync * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_VideoConsumerExtAsync * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoConsumerExtAsync * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoConsumerExtAsync * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoConsumerExtAsync * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoConsumerExtAsync * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_VideoConsumerExtAsync * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_VideoConsumerExtAsync * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrameAsync )( 
            ICC_VideoConsumerExtAsync * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][in] */ IUnknown *pLockObj,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        END_INTERFACE
    } ICC_VideoConsumerExtAsyncVtbl;

    interface ICC_VideoConsumerExtAsync
    {
        CONST_VTBL struct ICC_VideoConsumerExtAsyncVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoConsumerExtAsync_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoConsumerExtAsync_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoConsumerExtAsync_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoConsumerExtAsync_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_VideoConsumerExtAsync_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoConsumerExtAsync_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoConsumerExtAsync_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoConsumerExtAsync_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_VideoConsumerExtAsync_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_VideoConsumerExtAsync_IsScaleAvailable(This,pParams,pResult)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,pResult) ) 


#define ICC_VideoConsumerExtAsync_AddScaleFrameAsync(This,pData,cbSize,pParams,pLockObj,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrameAsync(This,pData,cbSize,pParams,pLockObj,pResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoConsumerExtAsync_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoProducerExt_INTERFACE_DEFINED__
#define __ICC_VideoProducerExt_INTERFACE_DEFINED__

/* interface ICC_VideoProducerExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoProducerExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71ac7c0a-7ca3-4774-945b-2b17e955ea01")
    ICC_VideoProducerExt : public ICC_VideoProducer
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetScaleFrame( 
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsScaleAvailable( 
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoProducerExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoProducerExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoProducerExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoProducerExt * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_VideoProducerExt * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoProducerExt * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoProducerExt * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsFrameAvailable )( 
            ICC_VideoProducerExt * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoProducerExt * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoProducerExt * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetScaleFrame )( 
            ICC_VideoProducerExt * This,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_VideoProducerExt * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        END_INTERFACE
    } ICC_VideoProducerExtVtbl;

    interface ICC_VideoProducerExt
    {
        CONST_VTBL struct ICC_VideoProducerExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoProducerExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoProducerExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoProducerExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoProducerExt_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_VideoProducerExt_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoProducerExt_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoProducerExt_IsFrameAvailable(This,pResult)	\
    ( (This)->lpVtbl -> IsFrameAvailable(This,pResult) ) 

#define ICC_VideoProducerExt_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoProducerExt_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_VideoProducerExt_GetScaleFrame(This,pbVideoData,cbSize,pParams,pcbRetSize)	\
    ( (This)->lpVtbl -> GetScaleFrame(This,pbVideoData,cbSize,pParams,pcbRetSize) ) 

#define ICC_VideoProducerExt_IsScaleAvailable(This,pParams,pResult)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,pResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoProducerExt_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoDecoder_INTERFACE_DEFINED__
#define __ICC_VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002005-be08-11dc-aa88-005056c00008")
    ICC_VideoDecoder : public ICC_Decoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetFrame( 
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride = 0,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStride( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoStreamInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_VideoDecoderVtbl;

    interface ICC_VideoDecoder
    {
        CONST_VTBL struct ICC_VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoEncoder_INTERFACE_DEFINED__
#define __ICC_VideoEncoder_INTERFACE_DEFINED__

/* interface ICC_VideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002006-be08-11dc-aa88-005056c00008")
    ICC_VideoEncoder : public ICC_Encoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddFrame( 
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride = 0,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStride( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFormatSupported( 
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddScaleFrame( 
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsScaleAvailable( 
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000 = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoStreamInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_VideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_VideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_VideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_VideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_VideoEncoderVtbl;

    interface ICC_VideoEncoder
    {
        CONST_VTBL struct ICC_VideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_VideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_VideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_VideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_VideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_VideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_VideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_VideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_VideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_VideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_VideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_VideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_VideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_VideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_VideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_VideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_VideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_VideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_VideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_VideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_VideoSplitter_INTERFACE_DEFINED__
#define __ICC_VideoSplitter_INTERFACE_DEFINED__

/* interface ICC_VideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61149ac1-d826-46be-82a9-c7a8fdf19b15")
    ICC_VideoSplitter : public ICC_Splitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetVideoStreamInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_VideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_VideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_VideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_VideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_VideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_VideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_VideoSplitterVtbl;

    interface ICC_VideoSplitter
    {
        CONST_VTBL struct ICC_VideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_VideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_VideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_VideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_VideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_VideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_VideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_VideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_VideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_VideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_VideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_VideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_VideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_VideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_VideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_VideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_VideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_VideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VideoSplitter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0116 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_VDEC_FRAME_OUTPUT_ORDER
    {
        CC_DISPLAY_ORDER	= 0,
        CC_CODING_ORDER	= 1
    } 	CC_VDEC_FRAME_OUTPUT_ORDER;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0116_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0116_v0_0_s_ifspec;

#ifndef __ICC_VDecFrameOutputOrderProp_INTERFACE_DEFINED__
#define __ICC_VDecFrameOutputOrderProp_INTERFACE_DEFINED__

/* interface ICC_VDecFrameOutputOrderProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_VDecFrameOutputOrderProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dc5e98b4-0c61-4d00-9ee0-2453f7e53ede")
    ICC_VDecFrameOutputOrderProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameOutputOrder( 
            /* [retval][out] */ CC_VDEC_FRAME_OUTPUT_ORDER *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameOutputOrder( 
            /* [in] */ CC_VDEC_FRAME_OUTPUT_ORDER v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_VDecFrameOutputOrderPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_VDecFrameOutputOrderProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_VDecFrameOutputOrderProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_VDecFrameOutputOrderProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameOutputOrder )( 
            ICC_VDecFrameOutputOrderProp * This,
            /* [retval][out] */ CC_VDEC_FRAME_OUTPUT_ORDER *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameOutputOrder )( 
            ICC_VDecFrameOutputOrderProp * This,
            /* [in] */ CC_VDEC_FRAME_OUTPUT_ORDER v);
        
        END_INTERFACE
    } ICC_VDecFrameOutputOrderPropVtbl;

    interface ICC_VDecFrameOutputOrderProp
    {
        CONST_VTBL struct ICC_VDecFrameOutputOrderPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_VDecFrameOutputOrderProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_VDecFrameOutputOrderProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_VDecFrameOutputOrderProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_VDecFrameOutputOrderProp_get_FrameOutputOrder(This,p)	\
    ( (This)->lpVtbl -> get_FrameOutputOrder(This,p) ) 

#define ICC_VDecFrameOutputOrderProp_put_FrameOutputOrder(This,v)	\
    ( (This)->lpVtbl -> put_FrameOutputOrder(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_VDecFrameOutputOrderProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0117 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_MPG_PROFILE_LEVEL
    {
        CC_MPG_PROFILE_LEVEL_UNKNOWN	= 0,
        CC_MPEG1_CONSTRAINED	= 0x1,
        CC_MPEG1_ESCAPE	= 0x81,
        CC_MPEG2_SP_ML	= 0x58,
        CC_MPEG2_MP_LL	= 0x4a,
        CC_MPEG2_MP_ML	= 0x48,
        CC_MPEG2_MP_H14	= 0x46,
        CC_MPEG2_MP_HL	= 0x44,
        CC_MPEG2_422_ML	= 0x85,
        CC_MPEG2_422_HL	= 0x82,
        CC_MPEG2_SNR_LL	= 0x3a,
        CC_MPEG2_SNR_ML	= 0x38,
        CC_MPEG2_SPAT_H14	= 0x26,
        CC_MPEG2_HP_ML	= 0x18,
        CC_MPEG2_HP_H14	= 0x16,
        CC_MPEG2_HP_HL	= 0x14,
        CC_MPEG2_MVP_LL	= 0x8e,
        CC_MPEG2_MVP_ML	= 0x8d,
        CC_MPEG2_MVP_H14	= 0x8b,
        CC_MPEG2_MVP_HL	= 0x8a,
        CC_MPEG2_ESCAPE	= 0x80,
        CC_MPG_SP_ML	= CC_MPEG2_SP_ML,
        CC_MPG_MP_LL	= CC_MPEG2_MP_LL,
        CC_MPG_MP_ML	= CC_MPEG2_MP_ML,
        CC_MPG_MP_H14	= CC_MPEG2_MP_H14,
        CC_MPG_MP_HL	= CC_MPEG2_MP_HL,
        CC_MPG_HP_ML	= CC_MPEG2_HP_ML,
        CC_MPG_HP_H14	= CC_MPEG2_HP_H14,
        CC_MPG_HP_HL	= CC_MPEG2_HP_HL,
        CC_MPG_ESCAPE	= CC_MPEG2_ESCAPE,
        CC_MPG_422_ML	= CC_MPEG2_422_ML,
        CC_MPG_422_HL	= CC_MPEG2_422_HL
    } 	CC_MPG_PROFILE_LEVEL;

typedef /* [v1_enum] */ 
enum CC_MPG_ASPECT_RATIO_CODE
    {
        CC_ASPECT_RATIO_UNKNOWN	= 0,
        CC_ASPECT_RATIO_VGA	= 1,
        CC_ASPECT_RATIO_1_1	= 1,
        CC_ASPECT_RATIO_4_3	= 2,
        CC_ASPECT_RATIO_16_9	= 3
    } 	CC_MPG_ASPECT_RATIO_CODE;

typedef /* [v1_enum] */ 
enum CC_MPG_MB_SCAN_PATTERN
    {
        CC_MPG_MB_SCAN_AUTO	= 0,
        CC_MPG_MB_SCAN_ZIGZAG	= ( CC_MPG_MB_SCAN_AUTO + 1 ) ,
        CC_MPG_MB_SCAN_ALTERNATE	= ( CC_MPG_MB_SCAN_ZIGZAG + 1 ) ,
        CC_MPG_MB_SCAN_COUNT	= ( CC_MPG_MB_SCAN_ALTERNATE + 1 ) 
    } 	CC_MPG_MB_SCAN_PATTERN;

typedef /* [v1_enum] */ 
enum CC_MPG_QUANT_SCALE_TYPE
    {
        CC_MPG_QSCALE_AUTO	= 0,
        CC_MPG_QSCALE_LINEAR	= ( CC_MPG_QSCALE_AUTO + 1 ) ,
        CC_MPG_QSCALE_NON_LINEAR	= ( CC_MPG_QSCALE_LINEAR + 1 ) ,
        CC_MPG_QSCALE_COUNT	= ( CC_MPG_QSCALE_NON_LINEAR + 1 ) 
    } 	CC_MPG_QUANT_SCALE_TYPE;

typedef /* [v1_enum] */ 
enum CC_MPG_INTRA_VLC_TABLE
    {
        CC_MPG_INTRA_VLC_TABLE_AUTO	= 0,
        CC_MPG_INTRA_VLC_TABLE_B14	= ( CC_MPG_INTRA_VLC_TABLE_AUTO + 1 ) ,
        CC_MPG_INTRA_VLC_TABLE_B15	= ( CC_MPG_INTRA_VLC_TABLE_B14 + 1 ) ,
        CC_MPG_INTRA_VLC_TABLE_COUNT	= ( CC_MPG_INTRA_VLC_TABLE_B15 + 1 ) 
    } 	CC_MPG_INTRA_VLC_TABLE;

typedef /* [v1_enum] */ 
enum CC_MPG_FRAME_FLAGS
    {
        CC_MPG_FRAME_FLG_PROGRESSIVE_FRAME	= 0x1,
        CC_MPG_FRAME_FLG_TOP_FIELD_FIRST	= 0x2,
        CC_MPG_FRAME_FLG_REPEAT_FIRST_FIELD	= 0x4,
        CC_MPG_FRAME_FLG_ALTERNATE_SCAN	= 0x8,
        CC_MPG_FRAME_FLG_Q_SCALE_TYPE	= 0x10,
        CC_MPG_FRAME_FLG_FRAME_PRED_DCT	= 0x20,
        CC_MPG_FRAME_FLG_INTRA_VLC_FORMAT	= 0x40,
        CC_MPG_FRAME_FLG_CONCEALMENT_VEC	= 0x80,
        CC_MPG_FRAME_FLG_FULL_PEL_FORW_VEC	= 0x100,
        CC_MPG_FRAME_FLG_FULL_PEL_BACK_VEC	= 0x200,
        CC_MPG_FRAME_FLG_CHROMA_420_TYPE	= 0x400,
        CC_MPG_FRAME_FLG_COMPOSITE_DISPLAY	= 0x800,
        CC_GOP_CLOSED	= 0x10000,
        CC_GOP_BROKEN_LINK	= 0x20000,
        CC_GOP_DROP_FRAME	= 0x40000,
        CC_MPG_HDR_SEQUENCE	= 0x1000000,
        CC_MPG_HDR_GOP	= 0x2000000,
        CC_MPG_HDR_SEQUENCE_EXT	= 0x4000000,
        CC_MPG_HDR_SEQUENCE_DISP_EXT	= 0x8000000,
        CC_MPG_HDR_QUANT_MATRIX	= 0x10000000,
        CC_MPG_HDR_PICTURE_DISP_EXT	= 0x20000000,
        CC_MPG_HDR_PICTURE_CODING_EXT	= 0x40000000
    } 	CC_MPG_FRAME_FLAGS;

typedef /* [v1_enum] */ 
enum CC_MPG_MOTION_PARAMS
    {
        CC_MPG_ME_SWX_16	= 0x1,
        CC_MPG_ME_SWX_32	= 0,
        CC_MPG_ME_SWX_48	= 0x2,
        CC_MPG_ME_SWX_64	= 0x3,
        CC_MPG_ME_SWX_96	= 0x4,
        CC_MPG_ME_SWX_128	= 0x5,
        CC_MPG_ME_SWX_192	= 0x6,
        CC_MPG_ME_SWX_256	= 0x7,
        CC_MPG_ME_SWX_MASK	= 0xf,
        CC_MPG_ME_SWY_16	= 0x10,
        CC_MPG_ME_SWY_32	= 0,
        CC_MPG_ME_SWY_48	= 0x20,
        CC_MPG_ME_SWY_64	= 0x30,
        CC_MPG_ME_SWY_96	= 0x40,
        CC_MPG_ME_SWY_128	= 0x50,
        CC_MPG_ME_SWY_192	= 0x60,
        CC_MPG_ME_SWY_256	= 0x70,
        CC_MPG_ME_SWY_MASK	= 0xf0,
        CC_MPG_ME_WND_16	= ( CC_MPG_ME_SWX_16 | CC_MPG_ME_SWY_16 ) ,
        CC_MPG_ME_WND_32	= ( CC_MPG_ME_SWX_32 | CC_MPG_ME_SWY_32 ) ,
        CC_MPG_ME_WND_64	= ( CC_MPG_ME_SWX_64 | CC_MPG_ME_SWY_64 ) ,
        CC_MPG_ME_WND_96	= ( CC_MPG_ME_SWX_96 | CC_MPG_ME_SWY_96 ) ,
        CC_MPG_ME_WND_128	= ( CC_MPG_ME_SWX_128 | CC_MPG_ME_SWY_128 ) ,
        CC_MPG_ME_CELL1	= 0x100,
        CC_MPG_ME_CELL2	= 0,
        CC_MPG_ME_CELL4	= 0x200,
        CC_MPG_ME_CELL8	= 0x300,
        CC_MPG_ME_FUNC_MASK	= 0xf00,
        CC_MPG_ME_SPC_1	= 0x1000,
        CC_MPG_ME_SPC_2	= 0,
        CC_MPG_ME_SPC_4	= 0x2000,
        CC_MPG_ME_SPC_MASK	= 0x3000,
        CC_MPG_ME_INCR_0	= 0x4000,
        CC_MPG_ME_INCR_1	= 0,
        CC_MPG_ME_INCR_2	= 0x8000,
        CC_MPG_ME_INCR_MASK	= 0xc000,
        CC_MPG_ME_HALFPEL	= 0,
        CC_MPG_ME_NO_HALFPEL	= 0x10000,
        CC_MPG_ME_QUICK_SAD	= 0,
        CC_MPG_ME_NORMAL_SAD	= 0x20000,
        CC_MPG_ME_OPPOSITE_FLD	= 0x40000,
        CC_MPG_ME_ALIGN_VEC	= 0x80000,
        CC_MPG_ME_NO_INTERLACED_SEARCH	= 0x100000,
        CC_MPG_ME_NO_ADAPTIVE_SEARCH_WINDOW	= 0x200000,
        CC_MPG_ME_NO_PREDICTIVE_SEARCH	= 0x400000,
        CC_MPG_ME_NO_RECALC_MISPREDICTED_VECTORS	= 0x800000,
        CC_MPG_ME_FASTEST	= ( ( ( ( CC_MPG_ME_WND_16 | CC_MPG_ME_CELL4 )  | CC_MPG_ME_SPC_4 )  | CC_MPG_ME_INCR_0 )  | CC_MPG_ME_NO_HALFPEL ) ,
        CC_MPG_ME_NORMAL	= ( ( ( ( ( CC_MPG_ME_WND_64 | CC_MPG_ME_CELL2 )  | CC_MPG_ME_SPC_2 )  | CC_MPG_ME_INCR_1 )  | CC_MPG_ME_HALFPEL )  | CC_MPG_ME_ALIGN_VEC ) ,
        CC_MPG_ME_BEST	= ( ( ( ( ( ( ( CC_MPG_ME_WND_128 | CC_MPG_ME_CELL1 )  | CC_MPG_ME_SPC_1 )  | CC_MPG_ME_INCR_2 )  | CC_MPG_ME_HALFPEL )  | CC_MPG_ME_ALIGN_VEC )  | CC_MPG_ME_NORMAL_SAD )  | CC_MPG_ME_OPPOSITE_FLD ) 
    } 	CC_MPG_MOTION_PARAMS;

typedef /* [v1_enum] */ 
enum CC_MPG_QUANT_FUNC
    {
        CC_MPG_QUANTF_AUTO	= 0,
        CC_MPG_QUANTF_REF_SSE2	= ( CC_MPG_QUANTF_AUTO + 1 ) ,
        CC_MPG_QUANTF_IDEAL	= ( CC_MPG_QUANTF_REF_SSE2 + 1 ) ,
        CC_MPG_QUANTF_COMBINED	= ( CC_MPG_QUANTF_IDEAL + 1 ) ,
        CC_MPG_QUANTF_IPP	= ( CC_MPG_QUANTF_COMBINED + 1 ) 
    } 	CC_MPG_QUANT_FUNC;

typedef /* [v1_enum] */ 
enum CC_MPG_QUANT_MATRIX
    {
        CC_MPG_QMATR_INTRA	= 0,
        CC_MPG_QMATR_INTER	= 1,
        CC_MPG_QMATR_CHROMA_INTRA	= 2,
        CC_MPG_QMATR_CHROMA_INTER	= 3,
        CC_MPG_QMATR_COUNT	= ( CC_MPG_QMATR_CHROMA_INTER + 1 ) 
    } 	CC_MPG_QUANT_MATRIX;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0117_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0117_v0_0_s_ifspec;

#ifndef __ICC_MpegVideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_MpegVideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_MpegVideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002202-be08-11dc-aa88-005056c00008")
    ICC_MpegVideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Layer( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameDuration( 
            /* [retval][out] */ CC_TIME *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VBV_BufferSize( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatioCode( 
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mpeg1ConstrainedFlag( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProfileAndLevel( 
            /* [retval][out] */ CC_MPG_PROFILE_LEVEL *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplaySize( 
            /* [retval][out] */ CC_SIZE *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegVideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameDuration )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_TIME *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VBV_BufferSize )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatioCode )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mpeg1ConstrainedFlag )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileAndLevel )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_MPG_PROFILE_LEVEL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySize )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_MpegVideoStreamInfo * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_MpegVideoStreamInfo * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_MpegVideoStreamInfoVtbl;

    interface ICC_MpegVideoStreamInfo
    {
        CONST_VTBL struct ICC_MpegVideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegVideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegVideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegVideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MpegVideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_MpegVideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegVideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_MpegVideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_MpegVideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_MpegVideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#define ICC_MpegVideoStreamInfo_get_Layer(This,x)	\
    ( (This)->lpVtbl -> get_Layer(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_FrameDuration(This,x)	\
    ( (This)->lpVtbl -> get_FrameDuration(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_BitRate(This,x)	\
    ( (This)->lpVtbl -> get_BitRate(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_VBV_BufferSize(This,x)	\
    ( (This)->lpVtbl -> get_VBV_BufferSize(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_AspectRatioCode(This,x)	\
    ( (This)->lpVtbl -> get_AspectRatioCode(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_Mpeg1ConstrainedFlag(This,x)	\
    ( (This)->lpVtbl -> get_Mpeg1ConstrainedFlag(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_ProfileAndLevel(This,x)	\
    ( (This)->lpVtbl -> get_ProfileAndLevel(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_ChromaFormat(This,x)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_VideoFormat(This,x)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_DisplaySize(This,x)	\
    ( (This)->lpVtbl -> get_DisplaySize(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,x) ) 

#define ICC_MpegVideoStreamInfo_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_MpegVideoStreamInfo_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegVideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_MpegVideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_MpegVideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002204-be08-11dc-aa88-005056c00008")
    ICC_MpegVideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TempRef( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VBV_Delay( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IntraDcPrec( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SecondFieldInfo( 
            /* [retval][out] */ ICC_MpegVideoFrameInfo **f) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegVideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TempRef )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VBV_Delay )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IntraDcPrec )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_MpegVideoFrameInfo * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SecondFieldInfo )( 
            ICC_MpegVideoFrameInfo * This,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **f);
        
        END_INTERFACE
    } ICC_MpegVideoFrameInfoVtbl;

    interface ICC_MpegVideoFrameInfo
    {
        CONST_VTBL struct ICC_MpegVideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegVideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegVideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegVideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MpegVideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_MpegVideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_MpegVideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_MpegVideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_MpegVideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_MpegVideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_MpegVideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_MpegVideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_MpegVideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_MpegVideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_MpegVideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_MpegVideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_MpegVideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_MpegVideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_MpegVideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_MpegVideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#define ICC_MpegVideoFrameInfo_get_TempRef(This,x)	\
    ( (This)->lpVtbl -> get_TempRef(This,x) ) 

#define ICC_MpegVideoFrameInfo_get_VBV_Delay(This,x)	\
    ( (This)->lpVtbl -> get_VBV_Delay(This,x) ) 

#define ICC_MpegVideoFrameInfo_get_IntraDcPrec(This,x)	\
    ( (This)->lpVtbl -> get_IntraDcPrec(This,x) ) 

#define ICC_MpegVideoFrameInfo_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_MpegVideoFrameInfo_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#define ICC_MpegVideoFrameInfo_get_SecondFieldInfo(This,f)	\
    ( (This)->lpVtbl -> get_SecondFieldInfo(This,f) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegVideoDecoder_INTERFACE_DEFINED__
#define __ICC_MpegVideoDecoder_INTERFACE_DEFINED__

/* interface ICC_MpegVideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002700-be08-11dc-aa88-005056c00008")
    ICC_MpegVideoDecoder : public ICC_VideoDecoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetElementaryDataCallback( 
            /* [in] */ IUnknown *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegVideoStreamInfo( 
            /* [retval][out] */ ICC_MpegVideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegVideoFrameInfo( 
            DWORD field_no,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureDecodingLevel( 
            /* [retval][out] */ CC_FRAME_TYPE *l) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PictureDecodingLevel( 
            /* [in] */ CC_FRAME_TYPE l) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsCount( 
            /* [retval][out] */ CC_AMOUNT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsCount( 
            /* [in] */ CC_AMOUNT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsAffinity( 
            /* [retval][out] */ CC_AFFINITY *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsAffinity( 
            /* [in] */ CC_AFFINITY x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsPriority( 
            /* [retval][out] */ CC_PRIORITY *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsPriority( 
            /* [in] */ CC_PRIORITY x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegVideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_MpegVideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *SetElementaryDataCallback )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ IUnknown *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoStreamInfo )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ ICC_MpegVideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoFrameInfo )( 
            ICC_MpegVideoDecoder * This,
            DWORD field_no,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureDecodingLevel )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_FRAME_TYPE *l);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureDecodingLevel )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_FRAME_TYPE l);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_AMOUNT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_AMOUNT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_AFFINITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_AFFINITY x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_MpegVideoDecoder * This,
            /* [retval][out] */ CC_PRIORITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_MpegVideoDecoder * This,
            /* [in] */ CC_PRIORITY x);
        
        END_INTERFACE
    } ICC_MpegVideoDecoderVtbl;

    interface ICC_MpegVideoDecoder
    {
        CONST_VTBL struct ICC_MpegVideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegVideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegVideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegVideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegVideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegVideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegVideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegVideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegVideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegVideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegVideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegVideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegVideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_MpegVideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_MpegVideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_MpegVideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_MpegVideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_MpegVideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_MpegVideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_MpegVideoDecoder_SetElementaryDataCallback(This,pCallback)	\
    ( (This)->lpVtbl -> SetElementaryDataCallback(This,pCallback) ) 

#define ICC_MpegVideoDecoder_GetMpegVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoStreamInfo(This,pDescr) ) 

#define ICC_MpegVideoDecoder_GetMpegVideoFrameInfo(This,field_no,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoFrameInfo(This,field_no,pDescr) ) 

#define ICC_MpegVideoDecoder_get_PictureDecodingLevel(This,l)	\
    ( (This)->lpVtbl -> get_PictureDecodingLevel(This,l) ) 

#define ICC_MpegVideoDecoder_put_PictureDecodingLevel(This,l)	\
    ( (This)->lpVtbl -> put_PictureDecodingLevel(This,l) ) 

#define ICC_MpegVideoDecoder_get_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,x) ) 

#define ICC_MpegVideoDecoder_put_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,x) ) 

#define ICC_MpegVideoDecoder_get_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,x) ) 

#define ICC_MpegVideoDecoder_put_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,x) ) 

#define ICC_MpegVideoDecoder_get_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,x) ) 

#define ICC_MpegVideoDecoder_put_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegVideoEncoder_INTERFACE_DEFINED__
#define __ICC_MpegVideoEncoder_INTERFACE_DEFINED__

/* interface ICC_MpegVideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002400-be08-11dc-aa88-005056c00008")
    ICC_MpegVideoEncoder : public ICC_VideoEncoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField = CC_FALSE) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegVideoFrameInfo( 
            DWORD field_no,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsCount( 
            /* [retval][out] */ CC_AMOUNT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsCount( 
            /* [in] */ CC_AMOUNT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsAffinity( 
            /* [retval][out] */ CC_AFFINITY *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsAffinity( 
            /* [in] */ CC_AFFINITY x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsPriority( 
            /* [retval][out] */ CC_PRIORITY *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsPriority( 
            /* [in] */ CC_PRIORITY x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegVideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_MpegVideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_MpegVideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_MpegVideoEncoder * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_TIMECODE x);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoFrameInfo )( 
            ICC_MpegVideoEncoder * This,
            DWORD field_no,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_AMOUNT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_AMOUNT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_AFFINITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_AFFINITY x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_MpegVideoEncoder * This,
            /* [retval][out] */ CC_PRIORITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_MpegVideoEncoder * This,
            /* [in] */ CC_PRIORITY x);
        
        END_INTERFACE
    } ICC_MpegVideoEncoderVtbl;

    interface ICC_MpegVideoEncoder
    {
        CONST_VTBL struct ICC_MpegVideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegVideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegVideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegVideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegVideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegVideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegVideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegVideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegVideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegVideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegVideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegVideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegVideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_MpegVideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_MpegVideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_MpegVideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_MpegVideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_MpegVideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_MpegVideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_MpegVideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_MpegVideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_MpegVideoEncoder_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#define ICC_MpegVideoEncoder_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#define ICC_MpegVideoEncoder_GetMpegVideoFrameInfo(This,field_no,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoFrameInfo(This,field_no,pDescr) ) 

#define ICC_MpegVideoEncoder_get_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,x) ) 

#define ICC_MpegVideoEncoder_put_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,x) ) 

#define ICC_MpegVideoEncoder_get_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,x) ) 

#define ICC_MpegVideoEncoder_put_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,x) ) 

#define ICC_MpegVideoEncoder_get_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,x) ) 

#define ICC_MpegVideoEncoder_put_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegVideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_MpegVideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_MpegVideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00002401-be08-11dc-aa88-005056c00008")
    ICC_MpegVideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Layer( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Layer( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatioCode( 
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatioCode( 
            /* [in] */ CC_MPG_ASPECT_RATIO_CODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinBitRate( 
            /* [retval][out] */ CC_BITRATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MinBitRate( 
            /* [in] */ CC_BITRATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AvgBitRate( 
            /* [retval][out] */ CC_BITRATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AvgBitRate( 
            /* [in] */ CC_BITRATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantScale( 
            /* [retval][out] */ CC_FLOAT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantScale( 
            /* [in] */ CC_FLOAT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VBV_BufferSize( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VBV_BufferSize( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GOP( 
            /* [retval][out] */ CC_GOP_DESCR *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GOP( 
            /* [in] */ CC_GOP_DESCR x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClosedGOPs( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClosedGOPs( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FixedGopStructure( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FixedGopStructure( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisableSceneDetector( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DisableSceneDetector( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EncodingLatency( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EncodingLatency( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialTimeCode( 
            /* [retval][out] */ CC_TIMECODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SequenceHeaderPeriod( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlocksPerSlice( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlocksPerSlice( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MEQuality( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MEQuality( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MotionParams( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MotionParams( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisplaySize( 
            /* [retval][out] */ CC_SIZE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DisplaySize( 
            /* [in] */ CC_SIZE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IntraDCPrecision( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IntraDCPrecision( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProfileAndLevel( 
            /* [retval][out] */ CC_MPG_PROFILE_LEVEL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProfileAndLevel( 
            /* [in] */ CC_MPG_PROFILE_LEVEL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaFormat( 
            /* [in] */ CC_CHROMA_FORMAT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VideoFormat( 
            /* [in] */ CC_VIDEO_FORMAT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureStructure( 
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PictureStructure( 
            /* [in] */ CC_PICTURE_STRUCTURE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MB_Struct( 
            /* [retval][out] */ CC_MB_STRUCTURE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MB_Struct( 
            /* [in] */ CC_MB_STRUCTURE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MB_ScanPattern( 
            /* [retval][out] */ CC_MPG_MB_SCAN_PATTERN *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MB_ScanPattern( 
            /* [in] */ CC_MPG_MB_SCAN_PATTERN x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IntraVLCTable( 
            /* [retval][out] */ CC_MPG_INTRA_VLC_TABLE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IntraVLCTable( 
            /* [in] */ CC_MPG_INTRA_VLC_TABLE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantScaleType( 
            /* [retval][out] */ CC_MPG_QUANT_SCALE_TYPE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantScaleType( 
            /* [in] */ CC_MPG_QUANT_SCALE_TYPE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SuppressSeqEndCode( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SuppressSeqEndCode( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LowDelay( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LowDelay( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurFilterCoef( 
            /* [retval][out] */ CC_INT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurFilterCoef( 
            /* [in] */ CC_INT x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetQuantMatrix( 
            /* [in] */ CC_MPG_QUANT_MATRIX t,
            /* [size_is][out] */ BYTE *m) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetQuantMatrix( 
            /* [in] */ CC_MPG_QUANT_MATRIX t,
            /* [size_is][in] */ const BYTE *m) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantMatrixPictureLevel( 
            /* [retval][out] */ CC_FRAME_TYPE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantMatrixPictureLevel( 
            /* [in] */ CC_FRAME_TYPE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantFunc( 
            /* [retval][out] */ CC_MPG_QUANT_FUNC *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantFunc( 
            /* [in] */ CC_MPG_QUANT_FUNC x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgressiveSequence( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgressiveSequence( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IntraRefresh( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IntraRefresh( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layer )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Layer )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_SIZE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatioCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatioCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_ASPECT_RATIO_CODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE_MODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinBitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinBitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvgBitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AvgBitRate )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScale )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_FLOAT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantScale )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_FLOAT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VBV_BufferSize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VBV_BufferSize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GOP )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_GOP_DESCR *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GOP )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_GOP_DESCR x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClosedGOPs )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClosedGOPs )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FixedGopStructure )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FixedGopStructure )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableSceneDetector )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableSceneDetector )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EncodingLatency )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EncodingLatency )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_TIMECODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_TIMECODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceHeaderPeriod )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SequenceHeaderPeriod )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlocksPerSlice )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlocksPerSlice )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MEQuality )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MEQuality )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MotionParams )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MotionParams )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySize )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_SIZE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IntraDCPrecision )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IntraDCPrecision )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileAndLevel )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_PROFILE_LEVEL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProfileAndLevel )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_PROFILE_LEVEL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_CHROMA_FORMAT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_VIDEO_FORMAT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_INTERLACE_TYPE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureStructure )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureStructure )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_PICTURE_STRUCTURE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MB_Struct )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MB_STRUCTURE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MB_Struct )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MB_STRUCTURE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MB_ScanPattern )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_MB_SCAN_PATTERN *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MB_ScanPattern )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_MB_SCAN_PATTERN x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IntraVLCTable )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_INTRA_VLC_TABLE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IntraVLCTable )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_INTRA_VLC_TABLE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScaleType )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_QUANT_SCALE_TYPE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantScaleType )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_QUANT_SCALE_TYPE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressSeqEndCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressSeqEndCode )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LowDelay )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LowDelay )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurFilterCoef )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurFilterCoef )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_INT x);
        
        HRESULT ( STDMETHODCALLTYPE *GetQuantMatrix )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_QUANT_MATRIX t,
            /* [size_is][out] */ BYTE *m);
        
        HRESULT ( STDMETHODCALLTYPE *SetQuantMatrix )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_QUANT_MATRIX t,
            /* [size_is][in] */ const BYTE *m);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantMatrixPictureLevel )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantMatrixPictureLevel )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_FRAME_TYPE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantFunc )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_QUANT_FUNC *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantFunc )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_MPG_QUANT_FUNC x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgressiveSequence )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IntraRefresh )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IntraRefresh )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_MpegVideoEncoderSettings * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_MpegVideoEncoderSettingsVtbl;

    interface ICC_MpegVideoEncoderSettings
    {
        CONST_VTBL struct ICC_MpegVideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MpegVideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MpegVideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MpegVideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MpegVideoEncoderSettings_get_Layer(This,x)	\
    ( (This)->lpVtbl -> get_Layer(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_Layer(This,x)	\
    ( (This)->lpVtbl -> put_Layer(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_FrameSize(This,x)	\
    ( (This)->lpVtbl -> get_FrameSize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_FrameSize(This,x)	\
    ( (This)->lpVtbl -> put_FrameSize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_FrameRate(This,x)	\
    ( (This)->lpVtbl -> get_FrameRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_FrameRate(This,x)	\
    ( (This)->lpVtbl -> put_FrameRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_BitRate(This,x)	\
    ( (This)->lpVtbl -> get_BitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_BitRate(This,x)	\
    ( (This)->lpVtbl -> put_BitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_AspectRatioCode(This,x)	\
    ( (This)->lpVtbl -> get_AspectRatioCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_AspectRatioCode(This,x)	\
    ( (This)->lpVtbl -> put_AspectRatioCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_RateMode(This,x)	\
    ( (This)->lpVtbl -> get_RateMode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_RateMode(This,x)	\
    ( (This)->lpVtbl -> put_RateMode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_MinBitRate(This,x)	\
    ( (This)->lpVtbl -> get_MinBitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_MinBitRate(This,x)	\
    ( (This)->lpVtbl -> put_MinBitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_AvgBitRate(This,x)	\
    ( (This)->lpVtbl -> get_AvgBitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_AvgBitRate(This,x)	\
    ( (This)->lpVtbl -> put_AvgBitRate(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_QuantScale(This,x)	\
    ( (This)->lpVtbl -> get_QuantScale(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_QuantScale(This,x)	\
    ( (This)->lpVtbl -> put_QuantScale(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_VBV_BufferSize(This,x)	\
    ( (This)->lpVtbl -> get_VBV_BufferSize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_VBV_BufferSize(This,x)	\
    ( (This)->lpVtbl -> put_VBV_BufferSize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_GOP(This,x)	\
    ( (This)->lpVtbl -> get_GOP(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_GOP(This,x)	\
    ( (This)->lpVtbl -> put_GOP(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_ClosedGOPs(This,x)	\
    ( (This)->lpVtbl -> get_ClosedGOPs(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_ClosedGOPs(This,x)	\
    ( (This)->lpVtbl -> put_ClosedGOPs(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_FixedGopStructure(This,x)	\
    ( (This)->lpVtbl -> get_FixedGopStructure(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_FixedGopStructure(This,x)	\
    ( (This)->lpVtbl -> put_FixedGopStructure(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_DisableSceneDetector(This,x)	\
    ( (This)->lpVtbl -> get_DisableSceneDetector(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_DisableSceneDetector(This,x)	\
    ( (This)->lpVtbl -> put_DisableSceneDetector(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_EncodingLatency(This,x)	\
    ( (This)->lpVtbl -> get_EncodingLatency(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_EncodingLatency(This,x)	\
    ( (This)->lpVtbl -> put_EncodingLatency(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> get_SequenceHeaderPeriod(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> put_SequenceHeaderPeriod(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_BlocksPerSlice(This,x)	\
    ( (This)->lpVtbl -> get_BlocksPerSlice(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_BlocksPerSlice(This,x)	\
    ( (This)->lpVtbl -> put_BlocksPerSlice(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_MEQuality(This,x)	\
    ( (This)->lpVtbl -> get_MEQuality(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_MEQuality(This,x)	\
    ( (This)->lpVtbl -> put_MEQuality(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_MotionParams(This,x)	\
    ( (This)->lpVtbl -> get_MotionParams(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_MotionParams(This,x)	\
    ( (This)->lpVtbl -> put_MotionParams(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_DisplaySize(This,x)	\
    ( (This)->lpVtbl -> get_DisplaySize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_DisplaySize(This,x)	\
    ( (This)->lpVtbl -> put_DisplaySize(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_IntraDCPrecision(This,x)	\
    ( (This)->lpVtbl -> get_IntraDCPrecision(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_IntraDCPrecision(This,x)	\
    ( (This)->lpVtbl -> put_IntraDCPrecision(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_ProfileAndLevel(This,x)	\
    ( (This)->lpVtbl -> get_ProfileAndLevel(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_ProfileAndLevel(This,x)	\
    ( (This)->lpVtbl -> put_ProfileAndLevel(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_ChromaFormat(This,x)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_ChromaFormat(This,x)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_VideoFormat(This,x)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_VideoFormat(This,x)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_InterlaceType(This,x)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_InterlaceType(This,x)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_PictureStructure(This,x)	\
    ( (This)->lpVtbl -> get_PictureStructure(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_PictureStructure(This,x)	\
    ( (This)->lpVtbl -> put_PictureStructure(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_MB_Struct(This,x)	\
    ( (This)->lpVtbl -> get_MB_Struct(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_MB_Struct(This,x)	\
    ( (This)->lpVtbl -> put_MB_Struct(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_MB_ScanPattern(This,x)	\
    ( (This)->lpVtbl -> get_MB_ScanPattern(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_MB_ScanPattern(This,x)	\
    ( (This)->lpVtbl -> put_MB_ScanPattern(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_IntraVLCTable(This,x)	\
    ( (This)->lpVtbl -> get_IntraVLCTable(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_IntraVLCTable(This,x)	\
    ( (This)->lpVtbl -> put_IntraVLCTable(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_QuantScaleType(This,x)	\
    ( (This)->lpVtbl -> get_QuantScaleType(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_QuantScaleType(This,x)	\
    ( (This)->lpVtbl -> put_QuantScaleType(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_SuppressSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> get_SuppressSeqEndCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_SuppressSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> put_SuppressSeqEndCode(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_LowDelay(This,x)	\
    ( (This)->lpVtbl -> get_LowDelay(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_LowDelay(This,x)	\
    ( (This)->lpVtbl -> put_LowDelay(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_BlurFilterCoef(This,x)	\
    ( (This)->lpVtbl -> get_BlurFilterCoef(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_BlurFilterCoef(This,x)	\
    ( (This)->lpVtbl -> put_BlurFilterCoef(This,x) ) 

#define ICC_MpegVideoEncoderSettings_GetQuantMatrix(This,t,m)	\
    ( (This)->lpVtbl -> GetQuantMatrix(This,t,m) ) 

#define ICC_MpegVideoEncoderSettings_SetQuantMatrix(This,t,m)	\
    ( (This)->lpVtbl -> SetQuantMatrix(This,t,m) ) 

#define ICC_MpegVideoEncoderSettings_get_QuantMatrixPictureLevel(This,x)	\
    ( (This)->lpVtbl -> get_QuantMatrixPictureLevel(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_QuantMatrixPictureLevel(This,x)	\
    ( (This)->lpVtbl -> put_QuantMatrixPictureLevel(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_QuantFunc(This,x)	\
    ( (This)->lpVtbl -> get_QuantFunc(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_QuantFunc(This,x)	\
    ( (This)->lpVtbl -> put_QuantFunc(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> put_ProgressiveSequence(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_IntraRefresh(This,x)	\
    ( (This)->lpVtbl -> get_IntraRefresh(This,x) ) 

#define ICC_MpegVideoEncoderSettings_put_IntraRefresh(This,x)	\
    ( (This)->lpVtbl -> put_IntraRefresh(This,x) ) 

#define ICC_MpegVideoEncoderSettings_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_MpegVideoEncoderSettings_AddUserData(This,pbUserData,cbSize)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize) ) 

#define ICC_MpegVideoEncoderSettings_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_MpegVideoSplitter_INTERFACE_DEFINED__
#define __ICC_MpegVideoSplitter_INTERFACE_DEFINED__

/* interface ICC_MpegVideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MpegVideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17adf111-3450-4cf6-9371-e02eed720cd4")
    ICC_MpegVideoSplitter : public ICC_VideoSplitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMpegVideoStreamInfo( 
            /* [retval][out] */ ICC_MpegVideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMpegVideoFrameInfo( 
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MpegVideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MpegVideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MpegVideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MpegVideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MpegVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MpegVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_MpegVideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_MpegVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_MpegVideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoStreamInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_MpegVideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoFrameInfo )( 
            ICC_MpegVideoSplitter * This,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_MpegVideoSplitterVtbl;

    interface ICC_MpegVideoSplitter
    {
        CONST_VTBL struct ICC_MpegVideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MpegVideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MpegVideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MpegVideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MpegVideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MpegVideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MpegVideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MpegVideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MpegVideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MpegVideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MpegVideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MpegVideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MpegVideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MpegVideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MpegVideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MpegVideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MpegVideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_MpegVideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_MpegVideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_MpegVideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_MpegVideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_MpegVideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_MpegVideoSplitter_GetMpegVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoStreamInfo(This,pDescr) ) 

#define ICC_MpegVideoSplitter_GetMpegVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MpegVideoSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_D10VideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_D10VideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_D10VideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_D10VideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d6baaecc-900a-4fce-bb7a-5feb665be275")
    ICC_D10VideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VideoFormat( 
            /* [in] */ CC_VIDEO_FORMAT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatioCode( 
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatioCode( 
            /* [in] */ CC_MPG_ASPECT_RATIO_CODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantFunc( 
            /* [retval][out] */ CC_MPG_QUANT_FUNC *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantFunc( 
            /* [in] */ CC_MPG_QUANT_FUNC x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_D10VideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_D10VideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_D10VideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_SIZE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_VIDEO_FORMAT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_BITRATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatioCode )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_ASPECT_RATIO_CODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatioCode )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_MPG_ASPECT_RATIO_CODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantFunc )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ CC_MPG_QUANT_FUNC *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantFunc )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ CC_MPG_QUANT_FUNC x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_D10VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_D10VideoEncoderSettings * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_D10VideoEncoderSettings * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_D10VideoEncoderSettingsVtbl;

    interface ICC_D10VideoEncoderSettings
    {
        CONST_VTBL struct ICC_D10VideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_D10VideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_D10VideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_D10VideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_D10VideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_D10VideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_D10VideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_D10VideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_D10VideoEncoderSettings_get_FrameSize(This,x)	\
    ( (This)->lpVtbl -> get_FrameSize(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_FrameSize(This,x)	\
    ( (This)->lpVtbl -> put_FrameSize(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_VideoFormat(This,x)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_VideoFormat(This,x)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_BitRate(This,x)	\
    ( (This)->lpVtbl -> get_BitRate(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_BitRate(This,x)	\
    ( (This)->lpVtbl -> put_BitRate(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_AspectRatioCode(This,x)	\
    ( (This)->lpVtbl -> get_AspectRatioCode(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_AspectRatioCode(This,x)	\
    ( (This)->lpVtbl -> put_AspectRatioCode(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_QuantFunc(This,x)	\
    ( (This)->lpVtbl -> get_QuantFunc(This,x) ) 

#define ICC_D10VideoEncoderSettings_put_QuantFunc(This,x)	\
    ( (This)->lpVtbl -> put_QuantFunc(This,x) ) 

#define ICC_D10VideoEncoderSettings_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_D10VideoEncoderSettings_AddUserData(This,pbUserData,cbSize)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize) ) 

#define ICC_D10VideoEncoderSettings_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_D10VideoEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_D10VideoEncoder_INTERFACE_DEFINED__
#define __ICC_D10VideoEncoder_INTERFACE_DEFINED__

/* interface ICC_D10VideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_D10VideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa7effd7-7830-4400-b51e-ac7b3510f9c1")
    ICC_D10VideoEncoder : public ICC_MpegVideoEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_D10VideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_D10VideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_D10VideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_D10VideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_D10VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_D10VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_D10VideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_D10VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_D10VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_TIMECODE x);
        
        HRESULT ( STDMETHODCALLTYPE *GetMpegVideoFrameInfo )( 
            ICC_D10VideoEncoder * This,
            DWORD field_no,
            /* [retval][out] */ ICC_MpegVideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_AMOUNT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_AMOUNT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_AFFINITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_AFFINITY x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_D10VideoEncoder * This,
            /* [retval][out] */ CC_PRIORITY *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_D10VideoEncoder * This,
            /* [in] */ CC_PRIORITY x);
        
        END_INTERFACE
    } ICC_D10VideoEncoderVtbl;

    interface ICC_D10VideoEncoder
    {
        CONST_VTBL struct ICC_D10VideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_D10VideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_D10VideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_D10VideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_D10VideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_D10VideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_D10VideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_D10VideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_D10VideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_D10VideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_D10VideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_D10VideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_D10VideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_D10VideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_D10VideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_D10VideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_D10VideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_D10VideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_D10VideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_D10VideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_D10VideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_D10VideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_D10VideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_D10VideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_D10VideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_D10VideoEncoder_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#define ICC_D10VideoEncoder_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#define ICC_D10VideoEncoder_GetMpegVideoFrameInfo(This,field_no,pDescr)	\
    ( (This)->lpVtbl -> GetMpegVideoFrameInfo(This,field_no,pDescr) ) 

#define ICC_D10VideoEncoder_get_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,x) ) 

#define ICC_D10VideoEncoder_put_ThreadsCount(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,x) ) 

#define ICC_D10VideoEncoder_get_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,x) ) 

#define ICC_D10VideoEncoder_put_ThreadsAffinity(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,x) ) 

#define ICC_D10VideoEncoder_get_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,x) ) 

#define ICC_D10VideoEncoder_put_ThreadsPriority(This,x)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_D10VideoEncoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0125 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_XDCAM_MODE
    {
        CC_XDCAM_MODE_UNKNOWN	= 0,
        CC_XDCAM_EX_720P_2997	= 0x201,
        CC_XDCAM_HD_1080I_2997	= 0x202,
        CC_XDCAM_HD_1080I_25	= 0x203,
        CC_XDCAM_EX_720P_2398	= 0x204,
        CC_XDCAM_EX_720P_25	= 0x205,
        CC_XDCAM_HD_1080P_2398	= 0x206,
        CC_XDCAM_HD_1080P_25	= 0x207,
        CC_XDCAM_HD_1080P_2997	= 0x208,
        CC_XDCAM_EX_720P_5994	= 0x209,
        CC_XDCAM_EX_720P_50	= 0x20a,
        CC_XDCAM_EX_1080I_2997	= 0x20b,
        CC_XDCAM_EX_1080I_25	= 0x20c,
        CC_XDCAM_EX_1080P_2398	= 0x20d,
        CC_XDCAM_EX_1080P_25	= 0x20e,
        CC_XDCAM_EX_1080P_2997	= 0x20f,
        CC_XDCAM_HD422_720P_2997	= 0x251,
        CC_XDCAM_HD422_720P_2398	= 0x254,
        CC_XDCAM_HD422_720P_25	= 0x255,
        CC_XDCAM_HD422_720P_5994	= 0x259,
        CC_XDCAM_HD422_720P_50	= 0x25a,
        CC_XDCAM_HD422_1080I_2997	= 0x25b,
        CC_XDCAM_HD422_1080I_25	= 0x25c,
        CC_XDCAM_HD422_1080P_2398	= 0x25d,
        CC_XDCAM_HD422_1080P_25	= 0x25e,
        CC_XDCAM_HD422_1080P_2997	= 0x25f
    } 	CC_XDCAM_MODE;

typedef /* [v1_enum] */ 
enum CC_H264_PROFILE
    {
        CC_H264_PROFILE_UNKNOWN	= 0,
        CC_H264_BASELINE_PROFILE	= 66,
        CC_H264_MAIN_PROFILE	= 77,
        CC_H264_EXTENDED_PROFILE	= 88,
        CC_H264_HIGH_PROFILE	= 100,
        CC_H264_HIGH_10_PROFILE	= 110,
        CC_H264_HIGH_422_PROFILE	= 122,
        CC_H264_HIGH_444_PROFILE	= 144
    } 	CC_H264_PROFILE;

typedef /* [v1_enum] */ 
enum CC_H264_MOTION_FUNC
    {
        CC_H264_ME_AUTO	= -1,
        CC_H264_ME_FULL_SEARCH	= 0,
        CC_H264_ME_CLASSIC_LOG	= 1,
        CC_H264_ME_LOG	= 2,
        CC_H264_ME_EPZS	= 3,
        CC_H264_ME_FULL_ORTHOGONAL	= 4,
        CC_H264_ME_LOG_ORTHOGONAL	= 5,
        CC_H264_ME_TTS	= 6
    } 	CC_H264_MOTION_FUNC;

typedef /* [v1_enum] */ 
enum CC_H264_ENTROPY_CODING_MODE
    {
        CC_H264_CAVLC	= 0,
        CC_H264_CABAC	= 1,
        CC_H264_CABAC_0	= 1,
        CC_H264_CABAC_1	= 2,
        CC_H264_CABAC_2	= 3
    } 	CC_H264_ENTROPY_CODING_MODE;

typedef /* [v1_enum] */ 
enum CC_H264_SUBBLOCK_SPLIT_MODE
    {
        CC_H264_SUBBLK_NO_SPLIT	= 0,
        CC_H264_SUBBLK_SPLIT_8x8	= ( CC_H264_SUBBLK_NO_SPLIT + 1 ) ,
        CC_H264_SUBBLK_SPLIT_4x4	= ( CC_H264_SUBBLK_SPLIT_8x8 + 1 ) 
    } 	CC_H264_SUBBLOCK_SPLIT_MODE;

typedef /* [v1_enum] */ 
enum CC_H264_DEBLOCKING_FILTER_MODE
    {
        CC_H264_DEBLOCKING_ON	= 0,
        CC_H264_DEBLOCKING_OFF	= ( CC_H264_DEBLOCKING_ON + 1 ) ,
        CC_H264_DEBLOCKING_WITHIN_SLICE	= ( CC_H264_DEBLOCKING_OFF + 1 ) 
    } 	CC_H264_DEBLOCKING_FILTER_MODE;

typedef struct CC_H264_DEBLOCKING_FILTER_DESCR
    {
    CC_H264_DEBLOCKING_FILTER_MODE Mode;
    CC_INT Alpha;
    CC_INT Beta;
    } 	CC_H264_DEBLOCKING_FILTER_DESCR;

#ifdef __cplusplus
namespace cinecoder {
inline const CC_H264_DEBLOCKING_FILTER_DESCR MK_DEBLOCKING_FILTER_DESCR(CC_H264_DEBLOCKING_FILTER_MODE mode, CC_INT alpha, CC_INT beta) { CC_H264_DEBLOCKING_FILTER_DESCR d={mode,alpha,beta}; return d; }
};
#endif
typedef /* [v1_enum] */ 
enum CC_H264_SCALING_MATRIX
    {
        CC_H264_STANDARD_SCALING_MATRIX	= 0,
        CC_H264_DEFAULT_SCALING_MATRIX	= ( CC_H264_STANDARD_SCALING_MATRIX + 1 ) 
    } 	CC_H264_SCALING_MATRIX;

typedef /* [v1_enum] */ 
enum CC_H264_DIRECT_PRED_MODE
    {
        CC_H264_DIRECT_PRED_NONE	= 0,
        CC_H264_DIRECT_PRED_TEMPORAL	= ( CC_H264_DIRECT_PRED_NONE + 1 ) ,
        CC_H264_DIRECT_PRED_SPATIAL	= ( CC_H264_DIRECT_PRED_TEMPORAL + 1 ) 
    } 	CC_H264_DIRECT_PRED_MODE;

typedef /* [v1_enum] */ 
enum CC_H264_FRAME_FLAGS
    {
        CC_H264_FRAME_FLG_PROGRESSIVE_FRAME	= 0x1,
        CC_H264_FRAME_FLG_TOP_FIELD_FIRST	= 0x2,
        CC_H264_FRAME_IDR	= 0x1000,
        CC_H264_HDR_SEQ_PARAM_SET	= 0x1000000,
        CC_H264_HDR_PIC_PARAM_SET	= 0x2000000,
        CC_H264_HDR_AU_DELIMITER	= 0x8000000
    } 	CC_H264_FRAME_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0125_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0125_v0_0_s_ifspec;

#ifndef __ICC_H264VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_H264VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_H264VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63cf41b3-b6ac-448f-ac25-5b2160825d9c")
    ICC_H264VideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ CC_H264_PROFILE *__MIDL__ICC_H264VideoStreamInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoStreamInfo0002) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_H264VideoStreamInfo0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthLuma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0004) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthChroma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_H264VideoStreamInfo0006) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_H264VideoStreamInfo0007) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_H264VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_H264VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_H264VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_H264_PROFILE *__MIDL__ICC_H264VideoStreamInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoStreamInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_H264VideoStreamInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthLuma )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthChroma )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoStreamInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_H264VideoStreamInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_H264VideoStreamInfo * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_H264VideoStreamInfo0007);
        
        END_INTERFACE
    } ICC_H264VideoStreamInfoVtbl;

    interface ICC_H264VideoStreamInfo
    {
        CONST_VTBL struct ICC_H264VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_H264VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_H264VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_H264VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_H264VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_H264VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_H264VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_H264VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_H264VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_H264VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#define ICC_H264VideoStreamInfo_get_Profile(This,__MIDL__ICC_H264VideoStreamInfo0000)	\
    ( (This)->lpVtbl -> get_Profile(This,__MIDL__ICC_H264VideoStreamInfo0000) ) 

#define ICC_H264VideoStreamInfo_get_Level(This,__MIDL__ICC_H264VideoStreamInfo0001)	\
    ( (This)->lpVtbl -> get_Level(This,__MIDL__ICC_H264VideoStreamInfo0001) ) 

#define ICC_H264VideoStreamInfo_get_BitRate(This,__MIDL__ICC_H264VideoStreamInfo0002)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_H264VideoStreamInfo0002) ) 

#define ICC_H264VideoStreamInfo_get_ChromaFormat(This,__MIDL__ICC_H264VideoStreamInfo0003)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,__MIDL__ICC_H264VideoStreamInfo0003) ) 

#define ICC_H264VideoStreamInfo_get_BitDepthLuma(This,__MIDL__ICC_H264VideoStreamInfo0004)	\
    ( (This)->lpVtbl -> get_BitDepthLuma(This,__MIDL__ICC_H264VideoStreamInfo0004) ) 

#define ICC_H264VideoStreamInfo_get_BitDepthChroma(This,__MIDL__ICC_H264VideoStreamInfo0005)	\
    ( (This)->lpVtbl -> get_BitDepthChroma(This,__MIDL__ICC_H264VideoStreamInfo0005) ) 

#define ICC_H264VideoStreamInfo_get_VideoFormat(This,__MIDL__ICC_H264VideoStreamInfo0006)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,__MIDL__ICC_H264VideoStreamInfo0006) ) 

#define ICC_H264VideoStreamInfo_get_ColorCoefs(This,__MIDL__ICC_H264VideoStreamInfo0007)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,__MIDL__ICC_H264VideoStreamInfo0007) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_H264VideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_H264VideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_H264VideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7baac45c-1da0-4fa6-b645-f9afdd84246f")
    ICC_H264VideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_H264VideoEncoderSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE __MIDL__ICC_H264VideoEncoderSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_H264VideoEncoderSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_H264VideoEncoderSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_H264VideoEncoderSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatio( 
            /* [in] */ CC_RATIONAL __MIDL__ICC_H264VideoEncoderSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_H264VideoEncoderSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_H264VideoEncoderSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinBitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MinBitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AvgBitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AvgBitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IDR_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_H264VideoEncoderSettings0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IDR_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_H264VideoEncoderSettings0015) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GOP( 
            /* [retval][out] */ CC_GOP_DESCR *__MIDL__ICC_H264VideoEncoderSettings0016) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GOP( 
            /* [in] */ CC_GOP_DESCR __MIDL__ICC_H264VideoEncoderSettings0017) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumRefFrames( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0018) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumRefFrames( 
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0019) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSlices( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0020) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumSlices( 
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0021) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ CC_H264_PROFILE *__MIDL__ICC_H264VideoEncoderSettings0022) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Profile( 
            /* [in] */ CC_H264_PROFILE __MIDL__ICC_H264VideoEncoderSettings0023) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0024) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Level( 
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0025) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_H264VideoEncoderSettings0026) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaFormat( 
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_H264VideoEncoderSettings0027) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthLuma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0028) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepthLuma( 
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0029) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthChroma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0030) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepthChroma( 
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0031) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MotionFunc( 
            /* [retval][out] */ CC_H264_MOTION_FUNC *__MIDL__ICC_H264VideoEncoderSettings0032) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MotionFunc( 
            /* [in] */ CC_H264_MOTION_FUNC __MIDL__ICC_H264VideoEncoderSettings0033) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MotionWindow( 
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_H264VideoEncoderSettings0034) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MotionWindow( 
            /* [in] */ CC_SIZE __MIDL__ICC_H264VideoEncoderSettings0035) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SubBlockSplitMode( 
            /* [retval][out] */ CC_H264_SUBBLOCK_SPLIT_MODE *__MIDL__ICC_H264VideoEncoderSettings0036) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SubBlockSplitMode( 
            /* [in] */ CC_H264_SUBBLOCK_SPLIT_MODE __MIDL__ICC_H264VideoEncoderSettings0037) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EntropyCodingMode( 
            /* [retval][out] */ CC_H264_ENTROPY_CODING_MODE *__MIDL__ICC_H264VideoEncoderSettings0038) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_EntropyCodingMode( 
            /* [in] */ CC_H264_ENTROPY_CODING_MODE __MIDL__ICC_H264VideoEncoderSettings0039) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeblockingFilter( 
            /* [retval][out] */ CC_H264_DEBLOCKING_FILTER_DESCR *__MIDL__ICC_H264VideoEncoderSettings0040) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DeblockingFilter( 
            /* [in] */ CC_H264_DEBLOCKING_FILTER_DESCR __MIDL__ICC_H264VideoEncoderSettings0041) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_H264VideoEncoderSettings0042) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VideoFormat( 
            /* [in] */ CC_VIDEO_FORMAT __MIDL__ICC_H264VideoEncoderSettings0043) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_H264VideoEncoderSettings0044) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_H264VideoEncoderSettings0045) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureStructure( 
            /* [retval][out] */ CC_PICTURE_STRUCTURE *__MIDL__ICC_H264VideoEncoderSettings0046) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PictureStructure( 
            /* [in] */ CC_PICTURE_STRUCTURE __MIDL__ICC_H264VideoEncoderSettings0047) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MB_Struct( 
            /* [retval][out] */ CC_MB_STRUCTURE *__MIDL__ICC_H264VideoEncoderSettings0048) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MB_Struct( 
            /* [in] */ CC_MB_STRUCTURE __MIDL__ICC_H264VideoEncoderSettings0049) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_H264VideoEncoderSettings0050) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_H264VideoEncoderSettings0051) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PutAccessUnitDelimiter( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0052) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PutAccessUnitDelimiter( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0053) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DisableSceneDetector( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0054) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DisableSceneDetector( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0055) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseWeightedPrediction( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0056) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseWeightedPrediction( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0057) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UseWeightedBiPrediction( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0058) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UseWeightedBiPrediction( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0059) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DirectPredMode( 
            /* [retval][out] */ CC_H264_DIRECT_PRED_MODE *__MIDL__ICC_H264VideoEncoderSettings0060) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DirectPredMode( 
            /* [in] */ CC_H264_DIRECT_PRED_MODE __MIDL__ICC_H264VideoEncoderSettings0061) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Enable8x8Transform( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0062) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Enable8x8Transform( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0063) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ScalingMatrix( 
            /* [retval][out] */ CC_H264_SCALING_MATRIX *__MIDL__ICC_H264VideoEncoderSettings0064) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ScalingMatrix( 
            /* [in] */ CC_H264_SCALING_MATRIX __MIDL__ICC_H264VideoEncoderSettings0065) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QPPrimeY0TransformBypass( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0066) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QPPrimeY0TransformBypass( 
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0067) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QP( 
            /* [retval][out] */ CC_QUANT_DESCR *__MIDL__ICC_H264VideoEncoderSettings0068) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QP( 
            /* [in] */ CC_QUANT_DESCR __MIDL__ICC_H264VideoEncoderSettings0069) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaQPOffset( 
            /* [retval][out] */ CC_INT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaQPOffset( 
            /* [in] */ CC_INT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CpbSize( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CpbSize( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialCpbLevel( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialCpbLevel( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SequenceHeaderPeriod( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PutSeqEndCode( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PutSeqEndCode( 
            /* [in] */ CC_BOOL x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BlurFilterCoef( 
            /* [retval][out] */ CC_INT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BlurFilterCoef( 
            /* [in] */ CC_INT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Deinterlace( 
            /* [retval][out] */ CC_DEINTERLACE_METHOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Deinterlace( 
            /* [in] */ CC_DEINTERLACE_METHOD x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_H264VideoEncoderSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_SIZE __MIDL__ICC_H264VideoEncoderSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_H264VideoEncoderSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_H264VideoEncoderSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_H264VideoEncoderSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_RATIONAL __MIDL__ICC_H264VideoEncoderSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_H264VideoEncoderSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_H264VideoEncoderSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinBitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinBitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvgBitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_H264VideoEncoderSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AvgBitRate )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_H264VideoEncoderSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDR_Period )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_H264VideoEncoderSettings0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDR_Period )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_H264VideoEncoderSettings0015);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GOP )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_GOP_DESCR *__MIDL__ICC_H264VideoEncoderSettings0016);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GOP )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_GOP_DESCR __MIDL__ICC_H264VideoEncoderSettings0017);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumRefFrames )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0018);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumRefFrames )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0019);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSlices )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0020);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumSlices )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0021);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_PROFILE *__MIDL__ICC_H264VideoEncoderSettings0022);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Profile )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_PROFILE __MIDL__ICC_H264VideoEncoderSettings0023);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0024);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Level )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0025);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_H264VideoEncoderSettings0026);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_H264VideoEncoderSettings0027);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthLuma )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0028);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepthLuma )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0029);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthChroma )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_H264VideoEncoderSettings0030);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepthChroma )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_H264VideoEncoderSettings0031);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MotionFunc )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_MOTION_FUNC *__MIDL__ICC_H264VideoEncoderSettings0032);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MotionFunc )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_MOTION_FUNC __MIDL__ICC_H264VideoEncoderSettings0033);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MotionWindow )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_H264VideoEncoderSettings0034);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MotionWindow )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_SIZE __MIDL__ICC_H264VideoEncoderSettings0035);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubBlockSplitMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_SUBBLOCK_SPLIT_MODE *__MIDL__ICC_H264VideoEncoderSettings0036);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SubBlockSplitMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_SUBBLOCK_SPLIT_MODE __MIDL__ICC_H264VideoEncoderSettings0037);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntropyCodingMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_ENTROPY_CODING_MODE *__MIDL__ICC_H264VideoEncoderSettings0038);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_EntropyCodingMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_ENTROPY_CODING_MODE __MIDL__ICC_H264VideoEncoderSettings0039);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeblockingFilter )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_DEBLOCKING_FILTER_DESCR *__MIDL__ICC_H264VideoEncoderSettings0040);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeblockingFilter )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_DEBLOCKING_FILTER_DESCR __MIDL__ICC_H264VideoEncoderSettings0041);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_H264VideoEncoderSettings0042);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_VIDEO_FORMAT __MIDL__ICC_H264VideoEncoderSettings0043);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_H264VideoEncoderSettings0044);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_H264VideoEncoderSettings0045);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureStructure )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *__MIDL__ICC_H264VideoEncoderSettings0046);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureStructure )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_PICTURE_STRUCTURE __MIDL__ICC_H264VideoEncoderSettings0047);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MB_Struct )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_MB_STRUCTURE *__MIDL__ICC_H264VideoEncoderSettings0048);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MB_Struct )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_MB_STRUCTURE __MIDL__ICC_H264VideoEncoderSettings0049);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_H264VideoEncoderSettings0050);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_H264VideoEncoderSettings0051);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PutAccessUnitDelimiter )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0052);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PutAccessUnitDelimiter )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0053);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisableSceneDetector )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0054);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisableSceneDetector )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0055);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseWeightedPrediction )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0056);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseWeightedPrediction )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0057);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseWeightedBiPrediction )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0058);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseWeightedBiPrediction )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0059);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectPredMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_DIRECT_PRED_MODE *__MIDL__ICC_H264VideoEncoderSettings0060);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DirectPredMode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_DIRECT_PRED_MODE __MIDL__ICC_H264VideoEncoderSettings0061);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enable8x8Transform )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0062);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enable8x8Transform )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0063);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScalingMatrix )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_H264_SCALING_MATRIX *__MIDL__ICC_H264VideoEncoderSettings0064);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScalingMatrix )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_H264_SCALING_MATRIX __MIDL__ICC_H264VideoEncoderSettings0065);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QPPrimeY0TransformBypass )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_H264VideoEncoderSettings0066);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QPPrimeY0TransformBypass )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_H264VideoEncoderSettings0067);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QP )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_QUANT_DESCR *__MIDL__ICC_H264VideoEncoderSettings0068);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QP )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_QUANT_DESCR __MIDL__ICC_H264VideoEncoderSettings0069);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaQPOffset )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaQPOffset )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_INT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CpbSize )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CpbSize )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialCpbLevel )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialCpbLevel )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceHeaderPeriod )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SequenceHeaderPeriod )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PutSeqEndCode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PutSeqEndCode )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlurFilterCoef )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlurFilterCoef )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_INT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Deinterlace )( 
            ICC_H264VideoEncoderSettings * This,
            /* [retval][out] */ CC_DEINTERLACE_METHOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Deinterlace )( 
            ICC_H264VideoEncoderSettings * This,
            /* [in] */ CC_DEINTERLACE_METHOD x);
        
        END_INTERFACE
    } ICC_H264VideoEncoderSettingsVtbl;

    interface ICC_H264VideoEncoderSettings
    {
        CONST_VTBL struct ICC_H264VideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_H264VideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_H264VideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_H264VideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_H264VideoEncoderSettings_get_FrameSize(This,__MIDL__ICC_H264VideoEncoderSettings0000)	\
    ( (This)->lpVtbl -> get_FrameSize(This,__MIDL__ICC_H264VideoEncoderSettings0000) ) 

#define ICC_H264VideoEncoderSettings_put_FrameSize(This,__MIDL__ICC_H264VideoEncoderSettings0001)	\
    ( (This)->lpVtbl -> put_FrameSize(This,__MIDL__ICC_H264VideoEncoderSettings0001) ) 

#define ICC_H264VideoEncoderSettings_get_FrameRate(This,__MIDL__ICC_H264VideoEncoderSettings0002)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_H264VideoEncoderSettings0002) ) 

#define ICC_H264VideoEncoderSettings_put_FrameRate(This,__MIDL__ICC_H264VideoEncoderSettings0003)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_H264VideoEncoderSettings0003) ) 

#define ICC_H264VideoEncoderSettings_get_AspectRatio(This,__MIDL__ICC_H264VideoEncoderSettings0004)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,__MIDL__ICC_H264VideoEncoderSettings0004) ) 

#define ICC_H264VideoEncoderSettings_put_AspectRatio(This,__MIDL__ICC_H264VideoEncoderSettings0005)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,__MIDL__ICC_H264VideoEncoderSettings0005) ) 

#define ICC_H264VideoEncoderSettings_get_BitRate(This,__MIDL__ICC_H264VideoEncoderSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_H264VideoEncoderSettings0006) ) 

#define ICC_H264VideoEncoderSettings_put_BitRate(This,__MIDL__ICC_H264VideoEncoderSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_H264VideoEncoderSettings0007) ) 

#define ICC_H264VideoEncoderSettings_get_RateMode(This,__MIDL__ICC_H264VideoEncoderSettings0008)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_H264VideoEncoderSettings0008) ) 

#define ICC_H264VideoEncoderSettings_put_RateMode(This,__MIDL__ICC_H264VideoEncoderSettings0009)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_H264VideoEncoderSettings0009) ) 

#define ICC_H264VideoEncoderSettings_get_MinBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0010)	\
    ( (This)->lpVtbl -> get_MinBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0010) ) 

#define ICC_H264VideoEncoderSettings_put_MinBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0011)	\
    ( (This)->lpVtbl -> put_MinBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0011) ) 

#define ICC_H264VideoEncoderSettings_get_AvgBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0012)	\
    ( (This)->lpVtbl -> get_AvgBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0012) ) 

#define ICC_H264VideoEncoderSettings_put_AvgBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0013)	\
    ( (This)->lpVtbl -> put_AvgBitRate(This,__MIDL__ICC_H264VideoEncoderSettings0013) ) 

#define ICC_H264VideoEncoderSettings_get_IDR_Period(This,__MIDL__ICC_H264VideoEncoderSettings0014)	\
    ( (This)->lpVtbl -> get_IDR_Period(This,__MIDL__ICC_H264VideoEncoderSettings0014) ) 

#define ICC_H264VideoEncoderSettings_put_IDR_Period(This,__MIDL__ICC_H264VideoEncoderSettings0015)	\
    ( (This)->lpVtbl -> put_IDR_Period(This,__MIDL__ICC_H264VideoEncoderSettings0015) ) 

#define ICC_H264VideoEncoderSettings_get_GOP(This,__MIDL__ICC_H264VideoEncoderSettings0016)	\
    ( (This)->lpVtbl -> get_GOP(This,__MIDL__ICC_H264VideoEncoderSettings0016) ) 

#define ICC_H264VideoEncoderSettings_put_GOP(This,__MIDL__ICC_H264VideoEncoderSettings0017)	\
    ( (This)->lpVtbl -> put_GOP(This,__MIDL__ICC_H264VideoEncoderSettings0017) ) 

#define ICC_H264VideoEncoderSettings_get_NumRefFrames(This,__MIDL__ICC_H264VideoEncoderSettings0018)	\
    ( (This)->lpVtbl -> get_NumRefFrames(This,__MIDL__ICC_H264VideoEncoderSettings0018) ) 

#define ICC_H264VideoEncoderSettings_put_NumRefFrames(This,__MIDL__ICC_H264VideoEncoderSettings0019)	\
    ( (This)->lpVtbl -> put_NumRefFrames(This,__MIDL__ICC_H264VideoEncoderSettings0019) ) 

#define ICC_H264VideoEncoderSettings_get_NumSlices(This,__MIDL__ICC_H264VideoEncoderSettings0020)	\
    ( (This)->lpVtbl -> get_NumSlices(This,__MIDL__ICC_H264VideoEncoderSettings0020) ) 

#define ICC_H264VideoEncoderSettings_put_NumSlices(This,__MIDL__ICC_H264VideoEncoderSettings0021)	\
    ( (This)->lpVtbl -> put_NumSlices(This,__MIDL__ICC_H264VideoEncoderSettings0021) ) 

#define ICC_H264VideoEncoderSettings_get_Profile(This,__MIDL__ICC_H264VideoEncoderSettings0022)	\
    ( (This)->lpVtbl -> get_Profile(This,__MIDL__ICC_H264VideoEncoderSettings0022) ) 

#define ICC_H264VideoEncoderSettings_put_Profile(This,__MIDL__ICC_H264VideoEncoderSettings0023)	\
    ( (This)->lpVtbl -> put_Profile(This,__MIDL__ICC_H264VideoEncoderSettings0023) ) 

#define ICC_H264VideoEncoderSettings_get_Level(This,__MIDL__ICC_H264VideoEncoderSettings0024)	\
    ( (This)->lpVtbl -> get_Level(This,__MIDL__ICC_H264VideoEncoderSettings0024) ) 

#define ICC_H264VideoEncoderSettings_put_Level(This,__MIDL__ICC_H264VideoEncoderSettings0025)	\
    ( (This)->lpVtbl -> put_Level(This,__MIDL__ICC_H264VideoEncoderSettings0025) ) 

#define ICC_H264VideoEncoderSettings_get_ChromaFormat(This,__MIDL__ICC_H264VideoEncoderSettings0026)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,__MIDL__ICC_H264VideoEncoderSettings0026) ) 

#define ICC_H264VideoEncoderSettings_put_ChromaFormat(This,__MIDL__ICC_H264VideoEncoderSettings0027)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,__MIDL__ICC_H264VideoEncoderSettings0027) ) 

#define ICC_H264VideoEncoderSettings_get_BitDepthLuma(This,__MIDL__ICC_H264VideoEncoderSettings0028)	\
    ( (This)->lpVtbl -> get_BitDepthLuma(This,__MIDL__ICC_H264VideoEncoderSettings0028) ) 

#define ICC_H264VideoEncoderSettings_put_BitDepthLuma(This,__MIDL__ICC_H264VideoEncoderSettings0029)	\
    ( (This)->lpVtbl -> put_BitDepthLuma(This,__MIDL__ICC_H264VideoEncoderSettings0029) ) 

#define ICC_H264VideoEncoderSettings_get_BitDepthChroma(This,__MIDL__ICC_H264VideoEncoderSettings0030)	\
    ( (This)->lpVtbl -> get_BitDepthChroma(This,__MIDL__ICC_H264VideoEncoderSettings0030) ) 

#define ICC_H264VideoEncoderSettings_put_BitDepthChroma(This,__MIDL__ICC_H264VideoEncoderSettings0031)	\
    ( (This)->lpVtbl -> put_BitDepthChroma(This,__MIDL__ICC_H264VideoEncoderSettings0031) ) 

#define ICC_H264VideoEncoderSettings_get_MotionFunc(This,__MIDL__ICC_H264VideoEncoderSettings0032)	\
    ( (This)->lpVtbl -> get_MotionFunc(This,__MIDL__ICC_H264VideoEncoderSettings0032) ) 

#define ICC_H264VideoEncoderSettings_put_MotionFunc(This,__MIDL__ICC_H264VideoEncoderSettings0033)	\
    ( (This)->lpVtbl -> put_MotionFunc(This,__MIDL__ICC_H264VideoEncoderSettings0033) ) 

#define ICC_H264VideoEncoderSettings_get_MotionWindow(This,__MIDL__ICC_H264VideoEncoderSettings0034)	\
    ( (This)->lpVtbl -> get_MotionWindow(This,__MIDL__ICC_H264VideoEncoderSettings0034) ) 

#define ICC_H264VideoEncoderSettings_put_MotionWindow(This,__MIDL__ICC_H264VideoEncoderSettings0035)	\
    ( (This)->lpVtbl -> put_MotionWindow(This,__MIDL__ICC_H264VideoEncoderSettings0035) ) 

#define ICC_H264VideoEncoderSettings_get_SubBlockSplitMode(This,__MIDL__ICC_H264VideoEncoderSettings0036)	\
    ( (This)->lpVtbl -> get_SubBlockSplitMode(This,__MIDL__ICC_H264VideoEncoderSettings0036) ) 

#define ICC_H264VideoEncoderSettings_put_SubBlockSplitMode(This,__MIDL__ICC_H264VideoEncoderSettings0037)	\
    ( (This)->lpVtbl -> put_SubBlockSplitMode(This,__MIDL__ICC_H264VideoEncoderSettings0037) ) 

#define ICC_H264VideoEncoderSettings_get_EntropyCodingMode(This,__MIDL__ICC_H264VideoEncoderSettings0038)	\
    ( (This)->lpVtbl -> get_EntropyCodingMode(This,__MIDL__ICC_H264VideoEncoderSettings0038) ) 

#define ICC_H264VideoEncoderSettings_put_EntropyCodingMode(This,__MIDL__ICC_H264VideoEncoderSettings0039)	\
    ( (This)->lpVtbl -> put_EntropyCodingMode(This,__MIDL__ICC_H264VideoEncoderSettings0039) ) 

#define ICC_H264VideoEncoderSettings_get_DeblockingFilter(This,__MIDL__ICC_H264VideoEncoderSettings0040)	\
    ( (This)->lpVtbl -> get_DeblockingFilter(This,__MIDL__ICC_H264VideoEncoderSettings0040) ) 

#define ICC_H264VideoEncoderSettings_put_DeblockingFilter(This,__MIDL__ICC_H264VideoEncoderSettings0041)	\
    ( (This)->lpVtbl -> put_DeblockingFilter(This,__MIDL__ICC_H264VideoEncoderSettings0041) ) 

#define ICC_H264VideoEncoderSettings_get_VideoFormat(This,__MIDL__ICC_H264VideoEncoderSettings0042)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,__MIDL__ICC_H264VideoEncoderSettings0042) ) 

#define ICC_H264VideoEncoderSettings_put_VideoFormat(This,__MIDL__ICC_H264VideoEncoderSettings0043)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,__MIDL__ICC_H264VideoEncoderSettings0043) ) 

#define ICC_H264VideoEncoderSettings_get_InterlaceType(This,__MIDL__ICC_H264VideoEncoderSettings0044)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,__MIDL__ICC_H264VideoEncoderSettings0044) ) 

#define ICC_H264VideoEncoderSettings_put_InterlaceType(This,__MIDL__ICC_H264VideoEncoderSettings0045)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,__MIDL__ICC_H264VideoEncoderSettings0045) ) 

#define ICC_H264VideoEncoderSettings_get_PictureStructure(This,__MIDL__ICC_H264VideoEncoderSettings0046)	\
    ( (This)->lpVtbl -> get_PictureStructure(This,__MIDL__ICC_H264VideoEncoderSettings0046) ) 

#define ICC_H264VideoEncoderSettings_put_PictureStructure(This,__MIDL__ICC_H264VideoEncoderSettings0047)	\
    ( (This)->lpVtbl -> put_PictureStructure(This,__MIDL__ICC_H264VideoEncoderSettings0047) ) 

#define ICC_H264VideoEncoderSettings_get_MB_Struct(This,__MIDL__ICC_H264VideoEncoderSettings0048)	\
    ( (This)->lpVtbl -> get_MB_Struct(This,__MIDL__ICC_H264VideoEncoderSettings0048) ) 

#define ICC_H264VideoEncoderSettings_put_MB_Struct(This,__MIDL__ICC_H264VideoEncoderSettings0049)	\
    ( (This)->lpVtbl -> put_MB_Struct(This,__MIDL__ICC_H264VideoEncoderSettings0049) ) 

#define ICC_H264VideoEncoderSettings_get_ColorCoefs(This,__MIDL__ICC_H264VideoEncoderSettings0050)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,__MIDL__ICC_H264VideoEncoderSettings0050) ) 

#define ICC_H264VideoEncoderSettings_put_ColorCoefs(This,__MIDL__ICC_H264VideoEncoderSettings0051)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,__MIDL__ICC_H264VideoEncoderSettings0051) ) 

#define ICC_H264VideoEncoderSettings_get_PutAccessUnitDelimiter(This,__MIDL__ICC_H264VideoEncoderSettings0052)	\
    ( (This)->lpVtbl -> get_PutAccessUnitDelimiter(This,__MIDL__ICC_H264VideoEncoderSettings0052) ) 

#define ICC_H264VideoEncoderSettings_put_PutAccessUnitDelimiter(This,__MIDL__ICC_H264VideoEncoderSettings0053)	\
    ( (This)->lpVtbl -> put_PutAccessUnitDelimiter(This,__MIDL__ICC_H264VideoEncoderSettings0053) ) 

#define ICC_H264VideoEncoderSettings_get_DisableSceneDetector(This,__MIDL__ICC_H264VideoEncoderSettings0054)	\
    ( (This)->lpVtbl -> get_DisableSceneDetector(This,__MIDL__ICC_H264VideoEncoderSettings0054) ) 

#define ICC_H264VideoEncoderSettings_put_DisableSceneDetector(This,__MIDL__ICC_H264VideoEncoderSettings0055)	\
    ( (This)->lpVtbl -> put_DisableSceneDetector(This,__MIDL__ICC_H264VideoEncoderSettings0055) ) 

#define ICC_H264VideoEncoderSettings_get_UseWeightedPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0056)	\
    ( (This)->lpVtbl -> get_UseWeightedPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0056) ) 

#define ICC_H264VideoEncoderSettings_put_UseWeightedPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0057)	\
    ( (This)->lpVtbl -> put_UseWeightedPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0057) ) 

#define ICC_H264VideoEncoderSettings_get_UseWeightedBiPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0058)	\
    ( (This)->lpVtbl -> get_UseWeightedBiPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0058) ) 

#define ICC_H264VideoEncoderSettings_put_UseWeightedBiPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0059)	\
    ( (This)->lpVtbl -> put_UseWeightedBiPrediction(This,__MIDL__ICC_H264VideoEncoderSettings0059) ) 

#define ICC_H264VideoEncoderSettings_get_DirectPredMode(This,__MIDL__ICC_H264VideoEncoderSettings0060)	\
    ( (This)->lpVtbl -> get_DirectPredMode(This,__MIDL__ICC_H264VideoEncoderSettings0060) ) 

#define ICC_H264VideoEncoderSettings_put_DirectPredMode(This,__MIDL__ICC_H264VideoEncoderSettings0061)	\
    ( (This)->lpVtbl -> put_DirectPredMode(This,__MIDL__ICC_H264VideoEncoderSettings0061) ) 

#define ICC_H264VideoEncoderSettings_get_Enable8x8Transform(This,__MIDL__ICC_H264VideoEncoderSettings0062)	\
    ( (This)->lpVtbl -> get_Enable8x8Transform(This,__MIDL__ICC_H264VideoEncoderSettings0062) ) 

#define ICC_H264VideoEncoderSettings_put_Enable8x8Transform(This,__MIDL__ICC_H264VideoEncoderSettings0063)	\
    ( (This)->lpVtbl -> put_Enable8x8Transform(This,__MIDL__ICC_H264VideoEncoderSettings0063) ) 

#define ICC_H264VideoEncoderSettings_get_ScalingMatrix(This,__MIDL__ICC_H264VideoEncoderSettings0064)	\
    ( (This)->lpVtbl -> get_ScalingMatrix(This,__MIDL__ICC_H264VideoEncoderSettings0064) ) 

#define ICC_H264VideoEncoderSettings_put_ScalingMatrix(This,__MIDL__ICC_H264VideoEncoderSettings0065)	\
    ( (This)->lpVtbl -> put_ScalingMatrix(This,__MIDL__ICC_H264VideoEncoderSettings0065) ) 

#define ICC_H264VideoEncoderSettings_get_QPPrimeY0TransformBypass(This,__MIDL__ICC_H264VideoEncoderSettings0066)	\
    ( (This)->lpVtbl -> get_QPPrimeY0TransformBypass(This,__MIDL__ICC_H264VideoEncoderSettings0066) ) 

#define ICC_H264VideoEncoderSettings_put_QPPrimeY0TransformBypass(This,__MIDL__ICC_H264VideoEncoderSettings0067)	\
    ( (This)->lpVtbl -> put_QPPrimeY0TransformBypass(This,__MIDL__ICC_H264VideoEncoderSettings0067) ) 

#define ICC_H264VideoEncoderSettings_get_QP(This,__MIDL__ICC_H264VideoEncoderSettings0068)	\
    ( (This)->lpVtbl -> get_QP(This,__MIDL__ICC_H264VideoEncoderSettings0068) ) 

#define ICC_H264VideoEncoderSettings_put_QP(This,__MIDL__ICC_H264VideoEncoderSettings0069)	\
    ( (This)->lpVtbl -> put_QP(This,__MIDL__ICC_H264VideoEncoderSettings0069) ) 

#define ICC_H264VideoEncoderSettings_get_ChromaQPOffset(This,x)	\
    ( (This)->lpVtbl -> get_ChromaQPOffset(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_ChromaQPOffset(This,x)	\
    ( (This)->lpVtbl -> put_ChromaQPOffset(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_CpbSize(This,x)	\
    ( (This)->lpVtbl -> get_CpbSize(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_CpbSize(This,x)	\
    ( (This)->lpVtbl -> put_CpbSize(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_InitialCpbLevel(This,x)	\
    ( (This)->lpVtbl -> get_InitialCpbLevel(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_InitialCpbLevel(This,x)	\
    ( (This)->lpVtbl -> put_InitialCpbLevel(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> get_SequenceHeaderPeriod(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> put_SequenceHeaderPeriod(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_PutSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> get_PutSeqEndCode(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_PutSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> put_PutSeqEndCode(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_BlurFilterCoef(This,x)	\
    ( (This)->lpVtbl -> get_BlurFilterCoef(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_BlurFilterCoef(This,x)	\
    ( (This)->lpVtbl -> put_BlurFilterCoef(This,x) ) 

#define ICC_H264VideoEncoderSettings_get_Deinterlace(This,x)	\
    ( (This)->lpVtbl -> get_Deinterlace(This,x) ) 

#define ICC_H264VideoEncoderSettings_put_Deinterlace(This,x)	\
    ( (This)->lpVtbl -> put_Deinterlace(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_H264VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_H264VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_H264VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ecfd3260-3a6b-474a-94e5-7d35c7482c8b")
    ICC_H264VideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_H264VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_H264VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_H264VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_H264VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_H264VideoFrameInfo * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_H264VideoFrameInfoVtbl;

    interface ICC_H264VideoFrameInfo
    {
        CONST_VTBL struct ICC_H264VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_H264VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_H264VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_H264VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_H264VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_H264VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_H264VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_H264VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_H264VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_H264VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_H264VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_H264VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_H264VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_H264VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_H264VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_H264VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_H264VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_H264VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_H264VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_H264VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#define ICC_H264VideoFrameInfo_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_H264VideoFrameInfo_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_H264VideoEncoder_INTERFACE_DEFINED__
#define __ICC_H264VideoEncoder_INTERFACE_DEFINED__

/* interface ICC_H264VideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60DAA884-1861-4771-BF4D-4A82570DDC8E")
    ICC_H264VideoEncoder : public ICC_VideoEncoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetH264VideoFrameInfo( 
            DWORD field_no,
            /* [retval][out] */ ICC_H264VideoFrameInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsCount( 
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_H264VideoEncoder0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsCount( 
            /* [in] */ CC_AMOUNT __MIDL__ICC_H264VideoEncoder0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsAffinity( 
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_H264VideoEncoder0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsAffinity( 
            /* [in] */ CC_AFFINITY __MIDL__ICC_H264VideoEncoder0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ThreadsPriority( 
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_H264VideoEncoder0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ThreadsPriority( 
            /* [in] */ CC_PRIORITY __MIDL__ICC_H264VideoEncoder0005) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField = CC_FALSE) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_H264VideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_H264VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_H264VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_H264VideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_H264VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetH264VideoFrameInfo )( 
            ICC_H264VideoEncoder * This,
            DWORD field_no,
            /* [retval][out] */ ICC_H264VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_H264VideoEncoder0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_AMOUNT __MIDL__ICC_H264VideoEncoder0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_H264VideoEncoder0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_AFFINITY __MIDL__ICC_H264VideoEncoder0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_H264VideoEncoder * This,
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_H264VideoEncoder0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_H264VideoEncoder * This,
            /* [in] */ CC_PRIORITY __MIDL__ICC_H264VideoEncoder0005);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_H264VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        END_INTERFACE
    } ICC_H264VideoEncoderVtbl;

    interface ICC_H264VideoEncoder
    {
        CONST_VTBL struct ICC_H264VideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_H264VideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_H264VideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_H264VideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_H264VideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_H264VideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_H264VideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_H264VideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_H264VideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_H264VideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_H264VideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_H264VideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_H264VideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_H264VideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_H264VideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_H264VideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_H264VideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_H264VideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_H264VideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_H264VideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_H264VideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_H264VideoEncoder_GetH264VideoFrameInfo(This,field_no,pDescr)	\
    ( (This)->lpVtbl -> GetH264VideoFrameInfo(This,field_no,pDescr) ) 

#define ICC_H264VideoEncoder_get_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0000)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0000) ) 

#define ICC_H264VideoEncoder_put_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0001)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0001) ) 

#define ICC_H264VideoEncoder_get_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0002)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0002) ) 

#define ICC_H264VideoEncoder_put_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0003)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0003) ) 

#define ICC_H264VideoEncoder_get_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0004)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0004) ) 

#define ICC_H264VideoEncoder_put_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0005)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0005) ) 

#define ICC_H264VideoEncoder_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_H264VideoDecoder_INTERFACE_DEFINED__
#define __ICC_H264VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_H264VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f7b72085-b7b8-42a2-a6ec-e81814e84f32")
    ICC_H264VideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_H264VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_H264VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_H264VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_H264VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_H264VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_H264VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_H264VideoDecoderVtbl;

    interface ICC_H264VideoDecoder
    {
        CONST_VTBL struct ICC_H264VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_H264VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_H264VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_H264VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_H264VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_H264VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_H264VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_H264VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_H264VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_H264VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_H264VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_H264VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_H264VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_H264VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_H264VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_H264VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_H264VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_H264VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_H264VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AVC1VideoDecoder_INTERFACE_DEFINED__
#define __ICC_AVC1VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_AVC1VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AVC1VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0976d3ec-341a-4805-954a-3a8cb0d1d33a")
    ICC_AVC1VideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AVC1VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AVC1VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AVC1VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AVC1VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AVC1VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AVC1VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AVC1VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AVC1VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_AVC1VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AVC1VideoDecoderVtbl;

    interface ICC_AVC1VideoDecoder
    {
        CONST_VTBL struct ICC_AVC1VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AVC1VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AVC1VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AVC1VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AVC1VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AVC1VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AVC1VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AVC1VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AVC1VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AVC1VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AVC1VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AVC1VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AVC1VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AVC1VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AVC1VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AVC1VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AVC1VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AVC1VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AVC1VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_AVC1VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_AVC1VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_AVC1VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_AVC1VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AVC1VideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_H264VideoSplitter_INTERFACE_DEFINED__
#define __ICC_H264VideoSplitter_INTERFACE_DEFINED__

/* interface ICC_H264VideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_H264VideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ec6d9953-2ea1-422e-bf66-9db8b24f0fc8")
    ICC_H264VideoSplitter : public ICC_VideoSplitter
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetH264VideoStreamInfo( 
            /* [retval][out] */ ICC_H264VideoStreamInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetH264VideoFrameInfo( 
            /* [retval][out] */ ICC_H264VideoFrameInfo **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_H264VideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_H264VideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_H264VideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_H264VideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_H264VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_H264VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_H264VideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_H264VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_H264VideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetH264VideoStreamInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_H264VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetH264VideoFrameInfo )( 
            ICC_H264VideoSplitter * This,
            /* [retval][out] */ ICC_H264VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_H264VideoSplitterVtbl;

    interface ICC_H264VideoSplitter
    {
        CONST_VTBL struct ICC_H264VideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_H264VideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_H264VideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_H264VideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_H264VideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_H264VideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_H264VideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_H264VideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_H264VideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_H264VideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_H264VideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_H264VideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_H264VideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_H264VideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_H264VideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_H264VideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_H264VideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_H264VideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_H264VideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_H264VideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_H264VideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_H264VideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_H264VideoSplitter_GetH264VideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetH264VideoStreamInfo(This,pDescr) ) 

#define ICC_H264VideoSplitter_GetH264VideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetH264VideoFrameInfo(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_H264VideoSplitter_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0132 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_HEVC_PROFILE
    {
        CC_HEVC_PROFILE_UNKNOWN	= 0,
        CC_HEVC_MAIN_PROFILE	= 1,
        CC_HEVC_MAIN_10_PROFILE	= 2,
        CC_HEVC_MAIN_STILL_PROFILE	= 3
    } 	CC_HEVC_PROFILE;

typedef /* [v1_enum] */ 
enum CC_HEVC_FRAME_FLAGS
    {
        CC_HEVC_FRAME_FLG_PROGRESSIVE_FRAME	= 0x1,
        CC_HEVC_FRAME_FLG_TOP_FIELD_FIRST	= 0x2,
        CC_HEVC_FRAME_IDR	= 0x1000,
        CC_HEVC_HDR_SEQ_PARAM_SET	= 0x1000000,
        CC_HEVC_HDR_PIC_PARAM_SET	= 0x2000000,
        CC_HEVC_HDR_AU_DELIMITER	= 0x8000000
    } 	CC_HEVC_FRAME_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0132_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0132_v0_0_s_ifspec;

#ifndef __ICC_HEVCVideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_HEVCVideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("59d8bbc4-4f9e-4e91-a113-5d4d01262579")
    ICC_HEVCVideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_HEVCVideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        END_INTERFACE
    } ICC_HEVCVideoStreamInfoVtbl;

    interface ICC_HEVCVideoStreamInfo
    {
        CONST_VTBL struct ICC_HEVCVideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HEVCVideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HEVCVideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HEVCVideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HEVCVideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_HEVCVideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_HEVCVideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_HEVCVideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_HEVCVideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_HEVCVideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_HEVCVideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_HEVCVideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ed49d3da-7b4d-4f43-adfe-961aac27492c")
    ICC_HEVCVideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_HEVCVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_HEVCVideoFrameInfoVtbl;

    interface ICC_HEVCVideoFrameInfo
    {
        CONST_VTBL struct ICC_HEVCVideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HEVCVideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HEVCVideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HEVCVideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HEVCVideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_HEVCVideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_HEVCVideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_HEVCVideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_HEVCVideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_HEVCVideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_HEVCVideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_HEVCVideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_HEVCVideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_HEVCVideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_HEVCVideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_HEVCVideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_HEVCVideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_HEVCVideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_HEVCVideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_HEVCVideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_HEVCVideoDecoder_INTERFACE_DEFINED__
#define __ICC_HEVCVideoDecoder_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b0584a0a-a32c-4040-a796-a624f2dca37f")
    ICC_HEVCVideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_HEVCVideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_HEVCVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_HEVCVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_HEVCVideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_HEVCVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_HEVCVideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_HEVCVideoDecoderVtbl;

    interface ICC_HEVCVideoDecoder
    {
        CONST_VTBL struct ICC_HEVCVideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_HEVCVideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_HEVCVideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_HEVCVideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_HEVCVideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_HEVCVideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_HEVCVideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_HEVCVideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_HEVCVideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_HEVCVideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_HEVCVideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_HEVCVideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_HEVCVideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_HEVCVideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_HEVCVideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_HEVCVideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_HEVCVideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_HEVCVideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_HEVCVideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_HEVCVideoSplitter_INTERFACE_DEFINED__
#define __ICC_HEVCVideoSplitter_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("693b38d6-a8cf-4d96-9099-a12fada9b769")
    ICC_HEVCVideoSplitter : public ICC_VideoSplitter
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_HEVCVideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_HEVCVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_HEVCVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_HEVCVideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_HEVCVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_HEVCVideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_HEVCVideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_HEVCVideoSplitterVtbl;

    interface ICC_HEVCVideoSplitter
    {
        CONST_VTBL struct ICC_HEVCVideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_HEVCVideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_HEVCVideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_HEVCVideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_HEVCVideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_HEVCVideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_HEVCVideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_HEVCVideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_HEVCVideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_HEVCVideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_HEVCVideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_HEVCVideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_HEVCVideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_HEVCVideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_HEVCVideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_HEVCVideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_HEVCVideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_HEVCVideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_HEVCVideoEncoder_INTERFACE_DEFINED__
#define __ICC_HEVCVideoEncoder_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("78058b0d-b691-4ea1-b36e-599b804fda66")
    ICC_HEVCVideoEncoder : public ICC_VideoEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_HEVCVideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_HEVCVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_HEVCVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_HEVCVideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_HEVCVideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_HEVCVideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_HEVCVideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_HEVCVideoEncoderVtbl;

    interface ICC_HEVCVideoEncoder
    {
        CONST_VTBL struct ICC_HEVCVideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_HEVCVideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_HEVCVideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_HEVCVideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_HEVCVideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_HEVCVideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_HEVCVideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_HEVCVideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_HEVCVideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_HEVCVideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_HEVCVideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_HEVCVideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_HEVCVideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_HEVCVideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_HEVCVideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_HEVCVideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_HEVCVideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_HEVCVideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_HEVCVideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_HEVCVideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_HEVCVideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_HEVCVideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_HEVCVideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_HEVCVideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HEVCVideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e9d5616d-b262-44d5-8869-96aec9f78aa9")
    ICC_HEVCVideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_HEVCVideoEncoderSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE __MIDL__ICC_HEVCVideoEncoderSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_HEVCVideoEncoderSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_HEVCVideoEncoderSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_HEVCVideoEncoderSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatio( 
            /* [in] */ CC_RATIONAL __MIDL__ICC_HEVCVideoEncoderSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_HEVCVideoEncoderSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_HEVCVideoEncoderSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MinBitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MinBitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AvgBitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AvgBitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IDR_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_HEVCVideoEncoderSettings0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IDR_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_HEVCVideoEncoderSettings0015) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GOP( 
            /* [retval][out] */ CC_GOP_DESCR *__MIDL__ICC_HEVCVideoEncoderSettings0016) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GOP( 
            /* [in] */ CC_GOP_DESCR __MIDL__ICC_HEVCVideoEncoderSettings0017) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumRefFrames( 
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0018) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumRefFrames( 
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0019) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSlices( 
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0020) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumSlices( 
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0021) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Profile( 
            /* [retval][out] */ CC_HEVC_PROFILE *__MIDL__ICC_HEVCVideoEncoderSettings0022) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Profile( 
            /* [in] */ CC_HEVC_PROFILE __MIDL__ICC_HEVCVideoEncoderSettings0023) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0024) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Level( 
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0025) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_HEVCVideoEncoderSettings0026) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaFormat( 
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_HEVCVideoEncoderSettings0027) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthLuma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0028) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepthLuma( 
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0029) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepthChroma( 
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0030) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepthChroma( 
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0031) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_HEVCVideoEncoderSettings0032) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VideoFormat( 
            /* [in] */ CC_VIDEO_FORMAT __MIDL__ICC_HEVCVideoEncoderSettings0033) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_HEVCVideoEncoderSettings0034) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_HEVCVideoEncoderSettings0035) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureStructure( 
            /* [retval][out] */ CC_PICTURE_STRUCTURE *__MIDL__ICC_HEVCVideoEncoderSettings0036) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PictureStructure( 
            /* [in] */ CC_PICTURE_STRUCTURE __MIDL__ICC_HEVCVideoEncoderSettings0037) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MB_Struct( 
            /* [retval][out] */ CC_MB_STRUCTURE *__MIDL__ICC_HEVCVideoEncoderSettings0038) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MB_Struct( 
            /* [in] */ CC_MB_STRUCTURE __MIDL__ICC_HEVCVideoEncoderSettings0039) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_HEVCVideoEncoderSettings0040) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_HEVCVideoEncoderSettings0041) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QP( 
            /* [retval][out] */ CC_QUANT_DESCR *__MIDL__ICC_HEVCVideoEncoderSettings0042) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QP( 
            /* [in] */ CC_QUANT_DESCR __MIDL__ICC_HEVCVideoEncoderSettings0043) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaQPOffset( 
            /* [retval][out] */ CC_INT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaQPOffset( 
            /* [in] */ CC_INT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CpbSize( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CpbSize( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialCpbLevel( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialCpbLevel( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SequenceHeaderPeriod( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PutAccessUnitDelimiter( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_HEVCVideoEncoderSettings0044) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PutAccessUnitDelimiter( 
            /* [in] */ CC_BOOL __MIDL__ICC_HEVCVideoEncoderSettings0045) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PutSeqEndCode( 
            /* [retval][out] */ CC_BOOL *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PutSeqEndCode( 
            /* [in] */ CC_BOOL x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HEVCVideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HEVCVideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HEVCVideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *__MIDL__ICC_HEVCVideoEncoderSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_SIZE __MIDL__ICC_HEVCVideoEncoderSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_HEVCVideoEncoderSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_HEVCVideoEncoderSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_HEVCVideoEncoderSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_RATIONAL __MIDL__ICC_HEVCVideoEncoderSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_HEVCVideoEncoderSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_HEVCVideoEncoderSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinBitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinBitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvgBitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_HEVCVideoEncoderSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AvgBitRate )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_HEVCVideoEncoderSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDR_Period )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_HEVCVideoEncoderSettings0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDR_Period )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_HEVCVideoEncoderSettings0015);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GOP )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_GOP_DESCR *__MIDL__ICC_HEVCVideoEncoderSettings0016);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GOP )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_GOP_DESCR __MIDL__ICC_HEVCVideoEncoderSettings0017);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumRefFrames )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0018);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumRefFrames )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0019);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSlices )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0020);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumSlices )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0021);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profile )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_HEVC_PROFILE *__MIDL__ICC_HEVCVideoEncoderSettings0022);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Profile )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_HEVC_PROFILE __MIDL__ICC_HEVCVideoEncoderSettings0023);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0024);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Level )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0025);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_HEVCVideoEncoderSettings0026);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_HEVCVideoEncoderSettings0027);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthLuma )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0028);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepthLuma )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0029);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepthChroma )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_HEVCVideoEncoderSettings0030);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepthChroma )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_HEVCVideoEncoderSettings0031);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *__MIDL__ICC_HEVCVideoEncoderSettings0032);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_VIDEO_FORMAT __MIDL__ICC_HEVCVideoEncoderSettings0033);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_HEVCVideoEncoderSettings0034);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_HEVCVideoEncoderSettings0035);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureStructure )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *__MIDL__ICC_HEVCVideoEncoderSettings0036);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureStructure )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_PICTURE_STRUCTURE __MIDL__ICC_HEVCVideoEncoderSettings0037);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MB_Struct )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_MB_STRUCTURE *__MIDL__ICC_HEVCVideoEncoderSettings0038);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MB_Struct )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_MB_STRUCTURE __MIDL__ICC_HEVCVideoEncoderSettings0039);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_HEVCVideoEncoderSettings0040);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_HEVCVideoEncoderSettings0041);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QP )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_QUANT_DESCR *__MIDL__ICC_HEVCVideoEncoderSettings0042);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QP )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_QUANT_DESCR __MIDL__ICC_HEVCVideoEncoderSettings0043);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaQPOffset )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaQPOffset )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_INT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CpbSize )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CpbSize )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialCpbLevel )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialCpbLevel )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceHeaderPeriod )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SequenceHeaderPeriod )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PutAccessUnitDelimiter )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_HEVCVideoEncoderSettings0044);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PutAccessUnitDelimiter )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_HEVCVideoEncoderSettings0045);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PutSeqEndCode )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PutSeqEndCode )( 
            ICC_HEVCVideoEncoderSettings * This,
            /* [in] */ CC_BOOL x);
        
        END_INTERFACE
    } ICC_HEVCVideoEncoderSettingsVtbl;

    interface ICC_HEVCVideoEncoderSettings
    {
        CONST_VTBL struct ICC_HEVCVideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HEVCVideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HEVCVideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HEVCVideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HEVCVideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HEVCVideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HEVCVideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HEVCVideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HEVCVideoEncoderSettings_get_FrameSize(This,__MIDL__ICC_HEVCVideoEncoderSettings0000)	\
    ( (This)->lpVtbl -> get_FrameSize(This,__MIDL__ICC_HEVCVideoEncoderSettings0000) ) 

#define ICC_HEVCVideoEncoderSettings_put_FrameSize(This,__MIDL__ICC_HEVCVideoEncoderSettings0001)	\
    ( (This)->lpVtbl -> put_FrameSize(This,__MIDL__ICC_HEVCVideoEncoderSettings0001) ) 

#define ICC_HEVCVideoEncoderSettings_get_FrameRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0002)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0002) ) 

#define ICC_HEVCVideoEncoderSettings_put_FrameRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0003)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0003) ) 

#define ICC_HEVCVideoEncoderSettings_get_AspectRatio(This,__MIDL__ICC_HEVCVideoEncoderSettings0004)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,__MIDL__ICC_HEVCVideoEncoderSettings0004) ) 

#define ICC_HEVCVideoEncoderSettings_put_AspectRatio(This,__MIDL__ICC_HEVCVideoEncoderSettings0005)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,__MIDL__ICC_HEVCVideoEncoderSettings0005) ) 

#define ICC_HEVCVideoEncoderSettings_get_BitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0006) ) 

#define ICC_HEVCVideoEncoderSettings_put_BitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0007) ) 

#define ICC_HEVCVideoEncoderSettings_get_RateMode(This,__MIDL__ICC_HEVCVideoEncoderSettings0008)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_HEVCVideoEncoderSettings0008) ) 

#define ICC_HEVCVideoEncoderSettings_put_RateMode(This,__MIDL__ICC_HEVCVideoEncoderSettings0009)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_HEVCVideoEncoderSettings0009) ) 

#define ICC_HEVCVideoEncoderSettings_get_MinBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0010)	\
    ( (This)->lpVtbl -> get_MinBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0010) ) 

#define ICC_HEVCVideoEncoderSettings_put_MinBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0011)	\
    ( (This)->lpVtbl -> put_MinBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0011) ) 

#define ICC_HEVCVideoEncoderSettings_get_AvgBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0012)	\
    ( (This)->lpVtbl -> get_AvgBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0012) ) 

#define ICC_HEVCVideoEncoderSettings_put_AvgBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0013)	\
    ( (This)->lpVtbl -> put_AvgBitRate(This,__MIDL__ICC_HEVCVideoEncoderSettings0013) ) 

#define ICC_HEVCVideoEncoderSettings_get_IDR_Period(This,__MIDL__ICC_HEVCVideoEncoderSettings0014)	\
    ( (This)->lpVtbl -> get_IDR_Period(This,__MIDL__ICC_HEVCVideoEncoderSettings0014) ) 

#define ICC_HEVCVideoEncoderSettings_put_IDR_Period(This,__MIDL__ICC_HEVCVideoEncoderSettings0015)	\
    ( (This)->lpVtbl -> put_IDR_Period(This,__MIDL__ICC_HEVCVideoEncoderSettings0015) ) 

#define ICC_HEVCVideoEncoderSettings_get_GOP(This,__MIDL__ICC_HEVCVideoEncoderSettings0016)	\
    ( (This)->lpVtbl -> get_GOP(This,__MIDL__ICC_HEVCVideoEncoderSettings0016) ) 

#define ICC_HEVCVideoEncoderSettings_put_GOP(This,__MIDL__ICC_HEVCVideoEncoderSettings0017)	\
    ( (This)->lpVtbl -> put_GOP(This,__MIDL__ICC_HEVCVideoEncoderSettings0017) ) 

#define ICC_HEVCVideoEncoderSettings_get_NumRefFrames(This,__MIDL__ICC_HEVCVideoEncoderSettings0018)	\
    ( (This)->lpVtbl -> get_NumRefFrames(This,__MIDL__ICC_HEVCVideoEncoderSettings0018) ) 

#define ICC_HEVCVideoEncoderSettings_put_NumRefFrames(This,__MIDL__ICC_HEVCVideoEncoderSettings0019)	\
    ( (This)->lpVtbl -> put_NumRefFrames(This,__MIDL__ICC_HEVCVideoEncoderSettings0019) ) 

#define ICC_HEVCVideoEncoderSettings_get_NumSlices(This,__MIDL__ICC_HEVCVideoEncoderSettings0020)	\
    ( (This)->lpVtbl -> get_NumSlices(This,__MIDL__ICC_HEVCVideoEncoderSettings0020) ) 

#define ICC_HEVCVideoEncoderSettings_put_NumSlices(This,__MIDL__ICC_HEVCVideoEncoderSettings0021)	\
    ( (This)->lpVtbl -> put_NumSlices(This,__MIDL__ICC_HEVCVideoEncoderSettings0021) ) 

#define ICC_HEVCVideoEncoderSettings_get_Profile(This,__MIDL__ICC_HEVCVideoEncoderSettings0022)	\
    ( (This)->lpVtbl -> get_Profile(This,__MIDL__ICC_HEVCVideoEncoderSettings0022) ) 

#define ICC_HEVCVideoEncoderSettings_put_Profile(This,__MIDL__ICC_HEVCVideoEncoderSettings0023)	\
    ( (This)->lpVtbl -> put_Profile(This,__MIDL__ICC_HEVCVideoEncoderSettings0023) ) 

#define ICC_HEVCVideoEncoderSettings_get_Level(This,__MIDL__ICC_HEVCVideoEncoderSettings0024)	\
    ( (This)->lpVtbl -> get_Level(This,__MIDL__ICC_HEVCVideoEncoderSettings0024) ) 

#define ICC_HEVCVideoEncoderSettings_put_Level(This,__MIDL__ICC_HEVCVideoEncoderSettings0025)	\
    ( (This)->lpVtbl -> put_Level(This,__MIDL__ICC_HEVCVideoEncoderSettings0025) ) 

#define ICC_HEVCVideoEncoderSettings_get_ChromaFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0026)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0026) ) 

#define ICC_HEVCVideoEncoderSettings_put_ChromaFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0027)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0027) ) 

#define ICC_HEVCVideoEncoderSettings_get_BitDepthLuma(This,__MIDL__ICC_HEVCVideoEncoderSettings0028)	\
    ( (This)->lpVtbl -> get_BitDepthLuma(This,__MIDL__ICC_HEVCVideoEncoderSettings0028) ) 

#define ICC_HEVCVideoEncoderSettings_put_BitDepthLuma(This,__MIDL__ICC_HEVCVideoEncoderSettings0029)	\
    ( (This)->lpVtbl -> put_BitDepthLuma(This,__MIDL__ICC_HEVCVideoEncoderSettings0029) ) 

#define ICC_HEVCVideoEncoderSettings_get_BitDepthChroma(This,__MIDL__ICC_HEVCVideoEncoderSettings0030)	\
    ( (This)->lpVtbl -> get_BitDepthChroma(This,__MIDL__ICC_HEVCVideoEncoderSettings0030) ) 

#define ICC_HEVCVideoEncoderSettings_put_BitDepthChroma(This,__MIDL__ICC_HEVCVideoEncoderSettings0031)	\
    ( (This)->lpVtbl -> put_BitDepthChroma(This,__MIDL__ICC_HEVCVideoEncoderSettings0031) ) 

#define ICC_HEVCVideoEncoderSettings_get_VideoFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0032)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0032) ) 

#define ICC_HEVCVideoEncoderSettings_put_VideoFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0033)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,__MIDL__ICC_HEVCVideoEncoderSettings0033) ) 

#define ICC_HEVCVideoEncoderSettings_get_InterlaceType(This,__MIDL__ICC_HEVCVideoEncoderSettings0034)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,__MIDL__ICC_HEVCVideoEncoderSettings0034) ) 

#define ICC_HEVCVideoEncoderSettings_put_InterlaceType(This,__MIDL__ICC_HEVCVideoEncoderSettings0035)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,__MIDL__ICC_HEVCVideoEncoderSettings0035) ) 

#define ICC_HEVCVideoEncoderSettings_get_PictureStructure(This,__MIDL__ICC_HEVCVideoEncoderSettings0036)	\
    ( (This)->lpVtbl -> get_PictureStructure(This,__MIDL__ICC_HEVCVideoEncoderSettings0036) ) 

#define ICC_HEVCVideoEncoderSettings_put_PictureStructure(This,__MIDL__ICC_HEVCVideoEncoderSettings0037)	\
    ( (This)->lpVtbl -> put_PictureStructure(This,__MIDL__ICC_HEVCVideoEncoderSettings0037) ) 

#define ICC_HEVCVideoEncoderSettings_get_MB_Struct(This,__MIDL__ICC_HEVCVideoEncoderSettings0038)	\
    ( (This)->lpVtbl -> get_MB_Struct(This,__MIDL__ICC_HEVCVideoEncoderSettings0038) ) 

#define ICC_HEVCVideoEncoderSettings_put_MB_Struct(This,__MIDL__ICC_HEVCVideoEncoderSettings0039)	\
    ( (This)->lpVtbl -> put_MB_Struct(This,__MIDL__ICC_HEVCVideoEncoderSettings0039) ) 

#define ICC_HEVCVideoEncoderSettings_get_ColorCoefs(This,__MIDL__ICC_HEVCVideoEncoderSettings0040)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,__MIDL__ICC_HEVCVideoEncoderSettings0040) ) 

#define ICC_HEVCVideoEncoderSettings_put_ColorCoefs(This,__MIDL__ICC_HEVCVideoEncoderSettings0041)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,__MIDL__ICC_HEVCVideoEncoderSettings0041) ) 

#define ICC_HEVCVideoEncoderSettings_get_QP(This,__MIDL__ICC_HEVCVideoEncoderSettings0042)	\
    ( (This)->lpVtbl -> get_QP(This,__MIDL__ICC_HEVCVideoEncoderSettings0042) ) 

#define ICC_HEVCVideoEncoderSettings_put_QP(This,__MIDL__ICC_HEVCVideoEncoderSettings0043)	\
    ( (This)->lpVtbl -> put_QP(This,__MIDL__ICC_HEVCVideoEncoderSettings0043) ) 

#define ICC_HEVCVideoEncoderSettings_get_ChromaQPOffset(This,x)	\
    ( (This)->lpVtbl -> get_ChromaQPOffset(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_put_ChromaQPOffset(This,x)	\
    ( (This)->lpVtbl -> put_ChromaQPOffset(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_get_CpbSize(This,x)	\
    ( (This)->lpVtbl -> get_CpbSize(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_put_CpbSize(This,x)	\
    ( (This)->lpVtbl -> put_CpbSize(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_get_InitialCpbLevel(This,x)	\
    ( (This)->lpVtbl -> get_InitialCpbLevel(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_put_InitialCpbLevel(This,x)	\
    ( (This)->lpVtbl -> put_InitialCpbLevel(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_get_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> get_SequenceHeaderPeriod(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_put_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> put_SequenceHeaderPeriod(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_get_PutAccessUnitDelimiter(This,__MIDL__ICC_HEVCVideoEncoderSettings0044)	\
    ( (This)->lpVtbl -> get_PutAccessUnitDelimiter(This,__MIDL__ICC_HEVCVideoEncoderSettings0044) ) 

#define ICC_HEVCVideoEncoderSettings_put_PutAccessUnitDelimiter(This,__MIDL__ICC_HEVCVideoEncoderSettings0045)	\
    ( (This)->lpVtbl -> put_PutAccessUnitDelimiter(This,__MIDL__ICC_HEVCVideoEncoderSettings0045) ) 

#define ICC_HEVCVideoEncoderSettings_get_PutSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> get_PutSeqEndCode(This,x) ) 

#define ICC_HEVCVideoEncoderSettings_put_PutSeqEndCode(This,x)	\
    ( (This)->lpVtbl -> put_PutSeqEndCode(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HEVCVideoEncoderSettings_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0138 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_AVCI_MODE
    {
        CC_AVCI_MODE_UNKNOWN	= 0,
        CC_AVCI_50_720P_2398	= 0x100,
        CC_AVCI_50_720P_25	= 0x101,
        CC_AVCI_50_720P_2997	= 0x102,
        CC_AVCI_50_720P_50	= 0x9,
        CC_AVCI_50_720P_5994	= 0x8,
        CC_AVCI_50_1080P_2398	= 0x104,
        CC_AVCI_50_1080P_25	= 0x4,
        CC_AVCI_50_1080P_2997	= 0x3,
        CC_AVCI_50_1080I_50	= 0x2,
        CC_AVCI_50_1080I_5994	= 0x1,
        CC_AVCI_100_720P_2398	= 0x105,
        CC_AVCI_100_720P_25	= 0x106,
        CC_AVCI_100_720P_2997	= 0x107,
        CC_AVCI_100_720P_50	= 0x29,
        CC_AVCI_100_720P_5994	= 0x28,
        CC_AVCI_100_1080P_2398	= 0x108,
        CC_AVCI_100_1080P_25	= 0x24,
        CC_AVCI_100_1080P_2997	= 0x23,
        CC_AVCI_100_1080I_50	= 0x22,
        CC_AVCI_100_1080I_5994	= 0x21,
        CC_AVCI_4K_422_2398	= 0x400,
        CC_AVCI_4K_422_25	= 0x401,
        CC_AVCI_4K_422_2997	= 0x402,
        CC_AVCI_4K_422_50	= 0x403,
        CC_AVCI_4K_422_5994	= 0x404
    } 	CC_AVCI_MODE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0138_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0138_v0_0_s_ifspec;

#ifndef __ICC_AVCIntraEncoderSettings_INTERFACE_DEFINED__
#define __ICC_AVCIntraEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_AVCIntraEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AVCIntraEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54761d8c-4180-46c7-8364-144a64ed1e8e")
    ICC_AVCIntraEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ CC_AVCI_MODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Mode( 
            /* [in] */ CC_AVCI_MODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSingleEncoders( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumSingleEncoders( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SequenceHeaderPeriod( 
            /* [in] */ CC_PERIOD x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AVCIntraEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AVCIntraEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AVCIntraEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [retval][out] */ CC_AVCI_MODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ CC_AVCI_MODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSingleEncoders )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumSingleEncoders )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceHeaderPeriod )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [retval][out] */ CC_PERIOD *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SequenceHeaderPeriod )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ CC_PERIOD x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_AVCIntraEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION x);
        
        END_INTERFACE
    } ICC_AVCIntraEncoderSettingsVtbl;

    interface ICC_AVCIntraEncoderSettings
    {
        CONST_VTBL struct ICC_AVCIntraEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AVCIntraEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AVCIntraEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AVCIntraEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AVCIntraEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_AVCIntraEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_AVCIntraEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_AVCIntraEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_AVCIntraEncoderSettings_get_Mode(This,x)	\
    ( (This)->lpVtbl -> get_Mode(This,x) ) 

#define ICC_AVCIntraEncoderSettings_put_Mode(This,x)	\
    ( (This)->lpVtbl -> put_Mode(This,x) ) 

#define ICC_AVCIntraEncoderSettings_get_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> get_NumSingleEncoders(This,x) ) 

#define ICC_AVCIntraEncoderSettings_put_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> put_NumSingleEncoders(This,x) ) 

#define ICC_AVCIntraEncoderSettings_get_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> get_SequenceHeaderPeriod(This,x) ) 

#define ICC_AVCIntraEncoderSettings_put_SequenceHeaderPeriod(This,x)	\
    ( (This)->lpVtbl -> put_SequenceHeaderPeriod(This,x) ) 

#define ICC_AVCIntraEncoderSettings_get_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,x) ) 

#define ICC_AVCIntraEncoderSettings_put_ColorCoefs(This,x)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AVCIntraEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_AVCIntraEncoder_INTERFACE_DEFINED__
#define __ICC_AVCIntraEncoder_INTERFACE_DEFINED__

/* interface ICC_AVCIntraEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AVCIntraEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0242b581-180a-430e-bb9c-1a78e60de3e5")
    ICC_AVCIntraEncoder : public ICC_H264VideoEncoder
    {
    public:
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AVCIntraEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AVCIntraEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AVCIntraEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AVCIntraEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AVCIntraEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AVCIntraEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_AVCIntraEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_AVCIntraEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetH264VideoFrameInfo )( 
            ICC_AVCIntraEncoder * This,
            DWORD field_no,
            /* [retval][out] */ ICC_H264VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsCount )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_AMOUNT *__MIDL__ICC_H264VideoEncoder0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsCount )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_AMOUNT __MIDL__ICC_H264VideoEncoder0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsAffinity )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_AFFINITY *__MIDL__ICC_H264VideoEncoder0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsAffinity )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_AFFINITY __MIDL__ICC_H264VideoEncoder0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreadsPriority )( 
            ICC_AVCIntraEncoder * This,
            /* [retval][out] */ CC_PRIORITY *__MIDL__ICC_H264VideoEncoder0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreadsPriority )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_PRIORITY __MIDL__ICC_H264VideoEncoder0005);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_AVCIntraEncoder * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_AVCIntraEncoder * This,
            /* [in] */ CC_TIMECODE x);
        
        END_INTERFACE
    } ICC_AVCIntraEncoderVtbl;

    interface ICC_AVCIntraEncoder
    {
        CONST_VTBL struct ICC_AVCIntraEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AVCIntraEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AVCIntraEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AVCIntraEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AVCIntraEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AVCIntraEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AVCIntraEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AVCIntraEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AVCIntraEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AVCIntraEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AVCIntraEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AVCIntraEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AVCIntraEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AVCIntraEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AVCIntraEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AVCIntraEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AVCIntraEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_AVCIntraEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_AVCIntraEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_AVCIntraEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_AVCIntraEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_AVCIntraEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_AVCIntraEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_AVCIntraEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_AVCIntraEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_AVCIntraEncoder_GetH264VideoFrameInfo(This,field_no,pDescr)	\
    ( (This)->lpVtbl -> GetH264VideoFrameInfo(This,field_no,pDescr) ) 

#define ICC_AVCIntraEncoder_get_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0000)	\
    ( (This)->lpVtbl -> get_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0000) ) 

#define ICC_AVCIntraEncoder_put_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0001)	\
    ( (This)->lpVtbl -> put_ThreadsCount(This,__MIDL__ICC_H264VideoEncoder0001) ) 

#define ICC_AVCIntraEncoder_get_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0002)	\
    ( (This)->lpVtbl -> get_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0002) ) 

#define ICC_AVCIntraEncoder_put_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0003)	\
    ( (This)->lpVtbl -> put_ThreadsAffinity(This,__MIDL__ICC_H264VideoEncoder0003) ) 

#define ICC_AVCIntraEncoder_get_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0004)	\
    ( (This)->lpVtbl -> get_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0004) ) 

#define ICC_AVCIntraEncoder_put_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0005)	\
    ( (This)->lpVtbl -> put_ThreadsPriority(This,__MIDL__ICC_H264VideoEncoder0005) ) 

#define ICC_AVCIntraEncoder_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 


#define ICC_AVCIntraEncoder_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AVCIntraEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AVCIntraDecoder_INTERFACE_DEFINED__
#define __ICC_AVCIntraDecoder_INTERFACE_DEFINED__

/* interface ICC_AVCIntraDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AVCIntraDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6c54b9dd-6608-4b3c-8325-3d45a612cbb9")
    ICC_AVCIntraDecoder : public ICC_H264VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AVCIntraDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AVCIntraDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AVCIntraDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AVCIntraDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AVCIntraDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AVCIntraDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AVCIntraDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AVCIntraDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_AVCIntraDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_AVCIntraDecoderVtbl;

    interface ICC_AVCIntraDecoder
    {
        CONST_VTBL struct ICC_AVCIntraDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AVCIntraDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AVCIntraDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AVCIntraDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AVCIntraDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AVCIntraDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AVCIntraDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AVCIntraDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AVCIntraDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AVCIntraDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AVCIntraDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AVCIntraDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AVCIntraDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AVCIntraDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AVCIntraDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AVCIntraDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AVCIntraDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AVCIntraDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AVCIntraDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_AVCIntraDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_AVCIntraDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_AVCIntraDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_AVCIntraDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 



#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AVCIntraDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_AVCIntraDecoder2_INTERFACE_DEFINED__
#define __ICC_AVCIntraDecoder2_INTERFACE_DEFINED__

/* interface ICC_AVCIntraDecoder2 */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_AVCIntraDecoder2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1a5e58f3-876d-4efa-aa2b-8d68d5f9da4e")
    ICC_AVCIntraDecoder2 : public ICC_H264VideoDecoder
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ConcurrencyLevel( 
            /* [retval][out] */ CC_AMOUNT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ConcurrencyLevel( 
            /* [in] */ CC_AMOUNT v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_AVCIntraDecoder2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_AVCIntraDecoder2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_AVCIntraDecoder2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_AVCIntraDecoder2 * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_AVCIntraDecoder2 * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_AVCIntraDecoder2 * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_AVCIntraDecoder2 * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConcurrencyLevel )( 
            ICC_AVCIntraDecoder2 * This,
            /* [retval][out] */ CC_AMOUNT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConcurrencyLevel )( 
            ICC_AVCIntraDecoder2 * This,
            /* [in] */ CC_AMOUNT v);
        
        END_INTERFACE
    } ICC_AVCIntraDecoder2Vtbl;

    interface ICC_AVCIntraDecoder2
    {
        CONST_VTBL struct ICC_AVCIntraDecoder2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_AVCIntraDecoder2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_AVCIntraDecoder2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_AVCIntraDecoder2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_AVCIntraDecoder2_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_AVCIntraDecoder2_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_AVCIntraDecoder2_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_AVCIntraDecoder2_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_AVCIntraDecoder2_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_AVCIntraDecoder2_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_AVCIntraDecoder2_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_AVCIntraDecoder2_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_AVCIntraDecoder2_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_AVCIntraDecoder2_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_AVCIntraDecoder2_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_AVCIntraDecoder2_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_AVCIntraDecoder2_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_AVCIntraDecoder2_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_AVCIntraDecoder2_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_AVCIntraDecoder2_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_AVCIntraDecoder2_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_AVCIntraDecoder2_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_AVCIntraDecoder2_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 



#define ICC_AVCIntraDecoder2_get_ConcurrencyLevel(This,p)	\
    ( (This)->lpVtbl -> get_ConcurrencyLevel(This,p) ) 

#define ICC_AVCIntraDecoder2_put_ConcurrencyLevel(This,v)	\
    ( (This)->lpVtbl -> put_ConcurrencyLevel(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_AVCIntraDecoder2_INTERFACE_DEFINED__ */


#ifndef __ICC_Mpeg4VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_Mpeg4VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_Mpeg4VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Mpeg4VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63ebe1fe-888a-468e-9e07-c7c61da1e39b")
    ICC_Mpeg4VideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Mpeg4VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Mpeg4VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Mpeg4VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_Mpeg4VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        END_INTERFACE
    } ICC_Mpeg4VideoStreamInfoVtbl;

    interface ICC_Mpeg4VideoStreamInfo
    {
        CONST_VTBL struct ICC_Mpeg4VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Mpeg4VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Mpeg4VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Mpeg4VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Mpeg4VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Mpeg4VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Mpeg4VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Mpeg4VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Mpeg4VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_Mpeg4VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Mpeg4VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_Mpeg4VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_Mpeg4VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_Mpeg4VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Mpeg4VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Mpeg4VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_Mpeg4VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_Mpeg4VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Mpeg4VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("df8c0ede-b2ea-41d4-a447-83364a377e47")
    ICC_Mpeg4VideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Mpeg4VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Mpeg4VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Mpeg4VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_Mpeg4VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_Mpeg4VideoFrameInfoVtbl;

    interface ICC_Mpeg4VideoFrameInfo
    {
        CONST_VTBL struct ICC_Mpeg4VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Mpeg4VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Mpeg4VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Mpeg4VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Mpeg4VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Mpeg4VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Mpeg4VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Mpeg4VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Mpeg4VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_Mpeg4VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_Mpeg4VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_Mpeg4VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_Mpeg4VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_Mpeg4VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_Mpeg4VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_Mpeg4VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_Mpeg4VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_Mpeg4VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_Mpeg4VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_Mpeg4VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_Mpeg4VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_Mpeg4VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_Mpeg4VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_Mpeg4VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Mpeg4VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Mpeg4VideoDecoder_INTERFACE_DEFINED__
#define __ICC_Mpeg4VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_Mpeg4VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Mpeg4VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("31c651b2-bfa1-41e8-b7e6-fe1f99d280cd")
    ICC_Mpeg4VideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Mpeg4VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Mpeg4VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Mpeg4VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_Mpeg4VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_Mpeg4VideoDecoderVtbl;

    interface ICC_Mpeg4VideoDecoder
    {
        CONST_VTBL struct ICC_Mpeg4VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Mpeg4VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Mpeg4VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Mpeg4VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Mpeg4VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Mpeg4VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Mpeg4VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Mpeg4VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Mpeg4VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Mpeg4VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Mpeg4VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Mpeg4VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Mpeg4VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Mpeg4VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Mpeg4VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Mpeg4VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Mpeg4VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Mpeg4VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Mpeg4VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_Mpeg4VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_Mpeg4VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_Mpeg4VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_Mpeg4VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Mpeg4VideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_J2K_VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_J2K_VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_J2K_VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_J2K_VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("abfb14e8-4aa5-40b3-8fc7-c8dc227a62c9")
    ICC_J2K_VideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_J2K_VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_J2K_VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_J2K_VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_J2K_VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        END_INTERFACE
    } ICC_J2K_VideoStreamInfoVtbl;

    interface ICC_J2K_VideoStreamInfo
    {
        CONST_VTBL struct ICC_J2K_VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_J2K_VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_J2K_VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_J2K_VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_J2K_VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_J2K_VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_J2K_VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_J2K_VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_J2K_VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_J2K_VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_J2K_VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_J2K_VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_J2K_VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_J2K_VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_J2K_VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_J2K_VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_J2K_VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_J2K_VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_J2K_VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23c787fa-1d2d-436c-95dc-264f1806e557")
    ICC_J2K_VideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_J2K_VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_J2K_VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_J2K_VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_J2K_VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_J2K_VideoFrameInfoVtbl;

    interface ICC_J2K_VideoFrameInfo
    {
        CONST_VTBL struct ICC_J2K_VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_J2K_VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_J2K_VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_J2K_VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_J2K_VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_J2K_VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_J2K_VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_J2K_VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_J2K_VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_J2K_VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_J2K_VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_J2K_VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_J2K_VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_J2K_VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_J2K_VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_J2K_VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_J2K_VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_J2K_VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_J2K_VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_J2K_VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_J2K_VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_J2K_VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_J2K_VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_J2K_VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_J2K_VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_J2K_VideoSplitter_INTERFACE_DEFINED__
#define __ICC_J2K_VideoSplitter_INTERFACE_DEFINED__

/* interface ICC_J2K_VideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_J2K_VideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f341b209-d017-40a7-b9a1-2682d08ae123")
    ICC_J2K_VideoSplitter : public ICC_VideoSplitter
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_J2K_VideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_J2K_VideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_J2K_VideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_J2K_VideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_J2K_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_J2K_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_J2K_VideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_J2K_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_J2K_VideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_J2K_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_J2K_VideoSplitterVtbl;

    interface ICC_J2K_VideoSplitter
    {
        CONST_VTBL struct ICC_J2K_VideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_J2K_VideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_J2K_VideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_J2K_VideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_J2K_VideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_J2K_VideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_J2K_VideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_J2K_VideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_J2K_VideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_J2K_VideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_J2K_VideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_J2K_VideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_J2K_VideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_J2K_VideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_J2K_VideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_J2K_VideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_J2K_VideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_J2K_VideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_J2K_VideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_J2K_VideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_J2K_VideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_J2K_VideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_J2K_VideoSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_J2K_VideoDecoder_INTERFACE_DEFINED__
#define __ICC_J2K_VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_J2K_VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_J2K_VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1c4dfcfd-6afc-471d-bd09-65b2a4bd9a13")
    ICC_J2K_VideoDecoder : public ICC_VideoDecoder
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ConcurrencyLevel( 
            /* [retval][out] */ CC_AMOUNT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ConcurrencyLevel( 
            /* [in] */ CC_AMOUNT v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_J2K_VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_J2K_VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_J2K_VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_J2K_VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_J2K_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_J2K_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_J2K_VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConcurrencyLevel )( 
            ICC_J2K_VideoDecoder * This,
            /* [retval][out] */ CC_AMOUNT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConcurrencyLevel )( 
            ICC_J2K_VideoDecoder * This,
            /* [in] */ CC_AMOUNT v);
        
        END_INTERFACE
    } ICC_J2K_VideoDecoderVtbl;

    interface ICC_J2K_VideoDecoder
    {
        CONST_VTBL struct ICC_J2K_VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_J2K_VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_J2K_VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_J2K_VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_J2K_VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_J2K_VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_J2K_VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_J2K_VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_J2K_VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_J2K_VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_J2K_VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_J2K_VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_J2K_VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_J2K_VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_J2K_VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_J2K_VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_J2K_VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_J2K_VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_J2K_VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_J2K_VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_J2K_VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_J2K_VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_J2K_VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_J2K_VideoDecoder_get_ConcurrencyLevel(This,p)	\
    ( (This)->lpVtbl -> get_ConcurrencyLevel(This,p) ) 

#define ICC_J2K_VideoDecoder_put_ConcurrencyLevel(This,v)	\
    ( (This)->lpVtbl -> put_ConcurrencyLevel(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_J2K_VideoDecoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0149 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_SONY_RAW_BITSTREAM_TYPE
    {
        CC_SONY_BITSTREAM_TYPE_UNKNOWN	= -1,
        CC_SONY_F65RAW_BITSTREAM	= 0,
        CC_SONY_F65RAW_BITSTREAM_HFR	= 0x1,
        CC_SONY_F55RAW_BITSTREAM	= 0x10,
        CC_SONY_F5RAW_BITSTREAM	= 0x20,
        CC_SONY_FS700RAW_BITSTREAM	= 0x30,
        CC_SONY_FS700RAW_BITSTREAM_2K	= 0x31
    } 	CC_SONY_RAW_BITSTREAM_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0149_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0149_v0_0_s_ifspec;

#ifndef __ICC_SonyRaw_VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_SonyRaw_VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_SonyRaw_VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SonyRaw_VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ae5cdb5b-d9f0-4053-8c03-44a5a305ef03")
    ICC_SonyRaw_VideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitstreamType( 
            /* [retval][out] */ CC_SONY_RAW_BITSTREAM_TYPE *ptype) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SonyRaw_VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SonyRaw_VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SonyRaw_VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitstreamType )( 
            ICC_SonyRaw_VideoStreamInfo * This,
            /* [retval][out] */ CC_SONY_RAW_BITSTREAM_TYPE *ptype);
        
        END_INTERFACE
    } ICC_SonyRaw_VideoStreamInfoVtbl;

    interface ICC_SonyRaw_VideoStreamInfo
    {
        CONST_VTBL struct ICC_SonyRaw_VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SonyRaw_VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SonyRaw_VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SonyRaw_VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SonyRaw_VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_SonyRaw_VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_SonyRaw_VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_SonyRaw_VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_SonyRaw_VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_SonyRaw_VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_SonyRaw_VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_SonyRaw_VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_SonyRaw_VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_SonyRaw_VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#define ICC_SonyRaw_VideoStreamInfo_get_BitstreamType(This,ptype)	\
    ( (This)->lpVtbl -> get_BitstreamType(This,ptype) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SonyRaw_VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_SonyRaw_VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_SonyRaw_VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_SonyRaw_VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SonyRaw_VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5a17fce5-a435-4e0d-9083-1070960bde1b")
    ICC_SonyRaw_VideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SonyRaw_VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SonyRaw_VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SonyRaw_VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_SonyRaw_VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_SonyRaw_VideoFrameInfoVtbl;

    interface ICC_SonyRaw_VideoFrameInfo
    {
        CONST_VTBL struct ICC_SonyRaw_VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SonyRaw_VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SonyRaw_VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SonyRaw_VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SonyRaw_VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_SonyRaw_VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_SonyRaw_VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_SonyRaw_VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_SonyRaw_VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_SonyRaw_VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_SonyRaw_VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SonyRaw_VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_SonyRaw_VideoDecoder_INTERFACE_DEFINED__
#define __ICC_SonyRaw_VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_SonyRaw_VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SonyRaw_VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f7a23e0b-1d09-458d-ba4f-623356ad9361")
    ICC_SonyRaw_VideoDecoder : public ICC_VideoDecoder
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SonyRaw_VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SonyRaw_VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SonyRaw_VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_SonyRaw_VideoDecoder * This,
            /* [in] */ CC_FRAME_RATE v);
        
        END_INTERFACE
    } ICC_SonyRaw_VideoDecoderVtbl;

    interface ICC_SonyRaw_VideoDecoder
    {
        CONST_VTBL struct ICC_SonyRaw_VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SonyRaw_VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SonyRaw_VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SonyRaw_VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SonyRaw_VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_SonyRaw_VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_SonyRaw_VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_SonyRaw_VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_SonyRaw_VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_SonyRaw_VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_SonyRaw_VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_SonyRaw_VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_SonyRaw_VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_SonyRaw_VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_SonyRaw_VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_SonyRaw_VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_SonyRaw_VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_SonyRaw_VideoDecoder_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#define ICC_SonyRaw_VideoDecoder_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SonyRaw_VideoDecoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0152 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_PRORES_TYPE
    {
        CC_PRORES_TYPE_UNKNOWN	= 0,
        CC_PRORES_422_HQ	= ( CC_PRORES_TYPE_UNKNOWN + 1 ) ,
        CC_PRORES_422	= ( CC_PRORES_422_HQ + 1 ) ,
        CC_PRORES_422_LT	= ( CC_PRORES_422 + 1 ) ,
        CC_PRORES_422_PROXY	= ( CC_PRORES_422_LT + 1 ) ,
        CC_PRORES_4444	= ( CC_PRORES_422_PROXY + 1 ) ,
        CC_PRORES_4444_XQ	= ( CC_PRORES_4444 + 1 ) 
    } 	CC_PRORES_TYPE;

typedef /* [v1_enum] */ 
enum CC_DANIEL2_CODING_METHOD
    {
        CC_D2_METHOD_DEFAULT	= -1,
        CC_D2_METHOD_CUDA	= 0,
        CC_D2_METHOD_VLC	= 1,
        CC_D2_METHOD_CUDA_RLE	= 2,
        CC_D2_METHOD_TOTAL	= ( CC_D2_METHOD_CUDA_RLE + 1 ) 
    } 	CC_DANIEL2_CODING_METHOD;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0152_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0152_v0_0_s_ifspec;

#ifndef __ICC_DanielVideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_DanielVideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_DanielVideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd99aee9-6b26-43ec-bbd1-ff658ef6d864")
    ICC_DanielVideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepth( 
            /* [retval][out] */ DWORD *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantScale( 
            /* [retval][out] */ CC_FLOAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaQuantScaleAdd( 
            /* [retval][out] */ CC_INT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaQuantScaleAdd( 
            /* [retval][out] */ CC_INT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodingMethod( 
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureOrientation( 
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_DanielVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_DanielVideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_DanielVideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepth )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ DWORD *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScale )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_FLOAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaQuantScaleAdd )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaQuantScaleAdd )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingMethod )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureOrientation )( 
            ICC_DanielVideoStreamInfo * This,
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v);
        
        END_INTERFACE
    } ICC_DanielVideoStreamInfoVtbl;

    interface ICC_DanielVideoStreamInfo
    {
        CONST_VTBL struct ICC_DanielVideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_DanielVideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_DanielVideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_DanielVideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_DanielVideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_DanielVideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_DanielVideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_DanielVideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_DanielVideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#define ICC_DanielVideoStreamInfo_get_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_BitDepth(This,v)	\
    ( (This)->lpVtbl -> get_BitDepth(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_QuantScale(This,v)	\
    ( (This)->lpVtbl -> get_QuantScale(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_ChromaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_ChromaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_AlphaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_AlphaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> get_CodingMethod(This,v) ) 

#define ICC_DanielVideoStreamInfo_get_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> get_PictureOrientation(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_DanielVideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_DanielVideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5e60a260-ffc6-4325-b6b1-f743aa1046b5")
    ICC_DanielVideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantScale( 
            /* [retval][out] */ CC_FLOAT *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodingMethod( 
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureOrientation( 
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ DWORD *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_DanielVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_DanielVideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_DanielVideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScale )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_FLOAT *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingMethod )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureOrientation )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_DanielVideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_DanielVideoFrameInfo * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_DanielVideoFrameInfoVtbl;

    interface ICC_DanielVideoFrameInfo
    {
        CONST_VTBL struct ICC_DanielVideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_DanielVideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_DanielVideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_DanielVideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_DanielVideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_DanielVideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_DanielVideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_DanielVideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_DanielVideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_DanielVideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_DanielVideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_DanielVideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_DanielVideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_DanielVideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_DanielVideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_DanielVideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_DanielVideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_DanielVideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_DanielVideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_DanielVideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#define ICC_DanielVideoFrameInfo_get_QuantScale(This,v)	\
    ( (This)->lpVtbl -> get_QuantScale(This,v) ) 

#define ICC_DanielVideoFrameInfo_get_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> get_CodingMethod(This,v) ) 

#define ICC_DanielVideoFrameInfo_get_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> get_PictureOrientation(This,v) ) 

#define ICC_DanielVideoFrameInfo_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_DanielVideoFrameInfo_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoSplitter_INTERFACE_DEFINED__
#define __ICC_DanielVideoSplitter_INTERFACE_DEFINED__

/* interface ICC_DanielVideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25f3f204-1537-4c7b-97bd-a5eb76788509")
    ICC_DanielVideoSplitter : public ICC_VideoSplitter
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DanielVideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_DanielVideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_DanielVideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_DanielVideoSplitterVtbl;

    interface ICC_DanielVideoSplitter
    {
        CONST_VTBL struct ICC_DanielVideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_DanielVideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_DanielVideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_DanielVideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_DanielVideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoDecoder_INTERFACE_DEFINED__
#define __ICC_DanielVideoDecoder_INTERFACE_DEFINED__

/* interface ICC_DanielVideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2070fe32-e7b4-4063-ac68-86b134f1e8bd")
    ICC_DanielVideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DanielVideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_DanielVideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_DanielVideoDecoderVtbl;

    interface ICC_DanielVideoDecoder
    {
        CONST_VTBL struct ICC_DanielVideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_DanielVideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_DanielVideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_DanielVideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_DanielVideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_DanielVideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_DanielVideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_DanielVideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5f03f830-497f-471a-bcc1-d5cfb417f544")
    ICC_DanielVideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatio( 
            /* [in] */ CC_RATIONAL v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaFormat( 
            /* [in] */ CC_CHROMA_FORMAT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PictureOrientation( 
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PictureOrientation( 
            /* [in] */ CC_PICTURE_ORIENTATION v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VideoFormat( 
            /* [retval][out] */ CC_VIDEO_FORMAT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_VideoFormat( 
            /* [in] */ CC_VIDEO_FORMAT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepth( 
            /* [retval][out] */ CC_UINT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepth( 
            /* [in] */ CC_UINT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_QuantScale( 
            /* [retval][out] */ CC_FLOAT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_QuantScale( 
            /* [in] */ CC_FLOAT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaQuantScaleAdd( 
            /* [retval][out] */ CC_INT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaQuantScaleAdd( 
            /* [in] */ CC_INT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AlphaQuantScaleAdd( 
            /* [retval][out] */ CC_INT *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AlphaQuantScaleAdd( 
            /* [in] */ CC_INT v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodingMethod( 
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CodingMethod( 
            /* [in] */ CC_DANIEL2_CODING_METHOD v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GOP( 
            /* [retval][out] */ CC_GOP_DESCR *v) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GOP( 
            /* [in] */ CC_GOP_DESCR v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialTimeCode( 
            /* [retval][out] */ CC_TIMECODE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumSingleEncoders( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_NumSingleEncoders( 
            /* [in] */ CC_UINT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InputColorFormat( 
            /* [retval][out] */ CC_COLOR_FMT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InputColorFormat( 
            /* [in] */ CC_COLOR_FMT x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UserDataCount( 
            /* [retval][out] */ CC_UINT *x) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUserData( 
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_SIZE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_RATIONAL *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_RATIONAL v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_CHROMA_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_INTERLACE_TYPE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureOrientation )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureOrientation )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_PICTURE_ORIENTATION v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_VIDEO_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepth )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepth )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScale )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_FLOAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantScale )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_FLOAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_INT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_INT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_BITRATE_MODE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingMethod )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CodingMethod )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_DANIEL2_CODING_METHOD v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GOP )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_GOP_DESCR *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GOP )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_GOP_DESCR v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_TIMECODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_TIMECODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSingleEncoders )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumSingleEncoders )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputColorFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_COLOR_FMT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InputColorFormat )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ CC_COLOR_FMT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [retval][out] */ CC_UINT *x);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_DanielVideoEncoderSettings * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_DanielVideoEncoderSettingsVtbl;

    interface ICC_DanielVideoEncoderSettings
    {
        CONST_VTBL struct ICC_DanielVideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_DanielVideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_DanielVideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_DanielVideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_DanielVideoEncoderSettings_get_FrameSize(This,v)	\
    ( (This)->lpVtbl -> get_FrameSize(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_FrameSize(This,v)	\
    ( (This)->lpVtbl -> put_FrameSize(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_FrameRate(This,v)	\
    ( (This)->lpVtbl -> get_FrameRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_AspectRatio(This,v)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_AspectRatio(This,v)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_InterlaceType(This,v)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_InterlaceType(This,v)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> get_PictureOrientation(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> put_PictureOrientation(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_BitDepth(This,v)	\
    ( (This)->lpVtbl -> get_BitDepth(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_BitDepth(This,v)	\
    ( (This)->lpVtbl -> put_BitDepth(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_QuantScale(This,v)	\
    ( (This)->lpVtbl -> get_QuantScale(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_QuantScale(This,v)	\
    ( (This)->lpVtbl -> put_QuantScale(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_ChromaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_ChromaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_ChromaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> put_ChromaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_AlphaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_AlphaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_AlphaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> put_AlphaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_BitRate(This,v)	\
    ( (This)->lpVtbl -> get_BitRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_RateMode(This,v)	\
    ( (This)->lpVtbl -> get_RateMode(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_RateMode(This,v)	\
    ( (This)->lpVtbl -> put_RateMode(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> get_CodingMethod(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> put_CodingMethod(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_GOP(This,v)	\
    ( (This)->lpVtbl -> get_GOP(This,v) ) 

#define ICC_DanielVideoEncoderSettings_put_GOP(This,v)	\
    ( (This)->lpVtbl -> put_GOP(This,v) ) 

#define ICC_DanielVideoEncoderSettings_get_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,x) ) 

#define ICC_DanielVideoEncoderSettings_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#define ICC_DanielVideoEncoderSettings_get_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> get_NumSingleEncoders(This,x) ) 

#define ICC_DanielVideoEncoderSettings_put_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> put_NumSingleEncoders(This,x) ) 

#define ICC_DanielVideoEncoderSettings_get_InputColorFormat(This,x)	\
    ( (This)->lpVtbl -> get_InputColorFormat(This,x) ) 

#define ICC_DanielVideoEncoderSettings_put_InputColorFormat(This,x)	\
    ( (This)->lpVtbl -> put_InputColorFormat(This,x) ) 

#define ICC_DanielVideoEncoderSettings_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_DanielVideoEncoderSettings_AddUserData(This,pbUserData,cbSize)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize) ) 

#define ICC_DanielVideoEncoderSettings_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoEncoderSettings_CUDA_INTERFACE_DEFINED__
#define __ICC_DanielVideoEncoderSettings_CUDA_INTERFACE_DEFINED__

/* interface ICC_DanielVideoEncoderSettings_CUDA */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoEncoderSettings_CUDA;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("64310105-efcc-4027-9c46-acba0014c703")
    ICC_DanielVideoEncoderSettings_CUDA : public ICC_DanielVideoEncoderSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DeviceID( 
            /* [retval][out] */ CC_INT *__MIDL__ICC_DanielVideoEncoderSettings_CUDA0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DeviceID( 
            /* [in] */ CC_INT __MIDL__ICC_DanielVideoEncoderSettings_CUDA0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoEncoderSettings_CUDAVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoEncoderSettings_CUDA * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoEncoderSettings_CUDA * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_SIZE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_SIZE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_FRAME_RATE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_FRAME_RATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_RATIONAL *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_RATIONAL v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_CHROMA_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_INTERLACE_TYPE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictureOrientation )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_PICTURE_ORIENTATION *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PictureOrientation )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_PICTURE_ORIENTATION v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VideoFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_VIDEO_FORMAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_VideoFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_VIDEO_FORMAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_COLOUR_DESCRIPTION v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepth )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_UINT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepth )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_UINT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuantScale )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_FLOAT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuantScale )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_FLOAT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_INT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlphaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_INT *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlphaQuantScaleAdd )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_INT v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_BITRATE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_BITRATE_MODE *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_BITRATE_MODE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingMethod )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_DANIEL2_CODING_METHOD *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CodingMethod )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_DANIEL2_CODING_METHOD v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GOP )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_GOP_DESCR *v);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GOP )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_GOP_DESCR v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_TIMECODE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_TIMECODE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSingleEncoders )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_UINT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumSingleEncoders )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_UINT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputColorFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_COLOR_FMT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InputColorFormat )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_COLOR_FMT x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserDataCount )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_UINT *x);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetUserData )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ DWORD dwUserDataNumber,
            /* [size_is][out] */ BYTE *pData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceID )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_DanielVideoEncoderSettings_CUDA0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeviceID )( 
            ICC_DanielVideoEncoderSettings_CUDA * This,
            /* [in] */ CC_INT __MIDL__ICC_DanielVideoEncoderSettings_CUDA0001);
        
        END_INTERFACE
    } ICC_DanielVideoEncoderSettings_CUDAVtbl;

    interface ICC_DanielVideoEncoderSettings_CUDA
    {
        CONST_VTBL struct ICC_DanielVideoEncoderSettings_CUDAVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoEncoderSettings_CUDA_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoEncoderSettings_CUDA_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_DanielVideoEncoderSettings_CUDA_get_FrameSize(This,v)	\
    ( (This)->lpVtbl -> get_FrameSize(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_FrameSize(This,v)	\
    ( (This)->lpVtbl -> put_FrameSize(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_FrameRate(This,v)	\
    ( (This)->lpVtbl -> get_FrameRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_AspectRatio(This,v)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_AspectRatio(This,v)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_ChromaFormat(This,v)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_InterlaceType(This,v)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_InterlaceType(This,v)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> get_PictureOrientation(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_PictureOrientation(This,v)	\
    ( (This)->lpVtbl -> put_PictureOrientation(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> get_VideoFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_VideoFormat(This,v)	\
    ( (This)->lpVtbl -> put_VideoFormat(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_ColorCoefs(This,v)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_BitDepth(This,v)	\
    ( (This)->lpVtbl -> get_BitDepth(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_BitDepth(This,v)	\
    ( (This)->lpVtbl -> put_BitDepth(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_QuantScale(This,v)	\
    ( (This)->lpVtbl -> get_QuantScale(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_QuantScale(This,v)	\
    ( (This)->lpVtbl -> put_QuantScale(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_ChromaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_ChromaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_ChromaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> put_ChromaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_AlphaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> get_AlphaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_AlphaQuantScaleAdd(This,v)	\
    ( (This)->lpVtbl -> put_AlphaQuantScaleAdd(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_BitRate(This,v)	\
    ( (This)->lpVtbl -> get_BitRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_RateMode(This,v)	\
    ( (This)->lpVtbl -> get_RateMode(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_RateMode(This,v)	\
    ( (This)->lpVtbl -> put_RateMode(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> get_CodingMethod(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_CodingMethod(This,v)	\
    ( (This)->lpVtbl -> put_CodingMethod(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_GOP(This,v)	\
    ( (This)->lpVtbl -> get_GOP(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_GOP(This,v)	\
    ( (This)->lpVtbl -> put_GOP(This,v) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> get_NumSingleEncoders(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_NumSingleEncoders(This,x)	\
    ( (This)->lpVtbl -> put_NumSingleEncoders(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_InputColorFormat(This,x)	\
    ( (This)->lpVtbl -> get_InputColorFormat(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_InputColorFormat(This,x)	\
    ( (This)->lpVtbl -> put_InputColorFormat(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_get_UserDataCount(This,x)	\
    ( (This)->lpVtbl -> get_UserDataCount(This,x) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_AddUserData(This,pbUserData,cbSize)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetUserData(This,dwUserDataNumber,pData,cbBufSize,pcbRetSize) ) 


#define ICC_DanielVideoEncoderSettings_CUDA_get_DeviceID(This,__MIDL__ICC_DanielVideoEncoderSettings_CUDA0000)	\
    ( (This)->lpVtbl -> get_DeviceID(This,__MIDL__ICC_DanielVideoEncoderSettings_CUDA0000) ) 

#define ICC_DanielVideoEncoderSettings_CUDA_put_DeviceID(This,__MIDL__ICC_DanielVideoEncoderSettings_CUDA0001)	\
    ( (This)->lpVtbl -> put_DeviceID(This,__MIDL__ICC_DanielVideoEncoderSettings_CUDA0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoEncoderSettings_CUDA_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoEncoder_INTERFACE_DEFINED__
#define __ICC_DanielVideoEncoder_INTERFACE_DEFINED__

/* interface ICC_DanielVideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ecab2803-01f0-4233-a346-3ab90e197129")
    ICC_DanielVideoEncoder : public ICC_VideoEncoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddUserData( 
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField = CC_FALSE) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_DanielVideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_DanielVideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_DanielVideoEncoder * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_DanielVideoEncoder * This,
            /* [in] */ CC_TIMECODE x);
        
        END_INTERFACE
    } ICC_DanielVideoEncoderVtbl;

    interface ICC_DanielVideoEncoder
    {
        CONST_VTBL struct ICC_DanielVideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_DanielVideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_DanielVideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_DanielVideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_DanielVideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_DanielVideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_DanielVideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_DanielVideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_DanielVideoEncoder_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#define ICC_DanielVideoEncoder_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoEncoder_INTERFACE_DEFINED__ */


#ifndef __ICC_D2D_GetUpdateVideoBufferPtrProp_INTERFACE_DEFINED__
#define __ICC_D2D_GetUpdateVideoBufferPtrProp_INTERFACE_DEFINED__

/* interface ICC_D2D_GetUpdateVideoBufferPtrProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_D2D_GetUpdateVideoBufferPtrProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f14dab53-5dc0-4edd-88e6-63d058f278b8")
    ICC_D2D_GetUpdateVideoBufferPtrProp : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUpdateVideoBufferPtr( 
            /* [out][in] */ void **p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_D2D_GetUpdateVideoBufferPtrPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_D2D_GetUpdateVideoBufferPtrProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_D2D_GetUpdateVideoBufferPtrProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_D2D_GetUpdateVideoBufferPtrProp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetUpdateVideoBufferPtr )( 
            ICC_D2D_GetUpdateVideoBufferPtrProp * This,
            /* [out][in] */ void **p);
        
        END_INTERFACE
    } ICC_D2D_GetUpdateVideoBufferPtrPropVtbl;

    interface ICC_D2D_GetUpdateVideoBufferPtrProp
    {
        CONST_VTBL struct ICC_D2D_GetUpdateVideoBufferPtrPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_D2D_GetUpdateVideoBufferPtrProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_D2D_GetUpdateVideoBufferPtrProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_D2D_GetUpdateVideoBufferPtrProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_D2D_GetUpdateVideoBufferPtrProp_GetUpdateVideoBufferPtr(This,p)	\
    ( (This)->lpVtbl -> GetUpdateVideoBufferPtr(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_D2D_GetUpdateVideoBufferPtrProp_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoDecoder_CUDA_INTERFACE_DEFINED__
#define __ICC_DanielVideoDecoder_CUDA_INTERFACE_DEFINED__

/* interface ICC_DanielVideoDecoder_CUDA */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoDecoder_CUDA;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60966b59-a6fb-4742-a562-223f7e4c45e3")
    ICC_DanielVideoDecoder_CUDA : public ICC_DanielVideoDecoder
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TargetColorFormat( 
            /* [retval][out] */ CC_COLOR_FMT *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TargetColorFormat( 
            /* [in] */ CC_COLOR_FMT x) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoDecoder_CUDAVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoDecoder_CUDA * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoDecoder_CUDA * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetColorFormat )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [retval][out] */ CC_COLOR_FMT *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TargetColorFormat )( 
            ICC_DanielVideoDecoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT x);
        
        END_INTERFACE
    } ICC_DanielVideoDecoder_CUDAVtbl;

    interface ICC_DanielVideoDecoder_CUDA
    {
        CONST_VTBL struct ICC_DanielVideoDecoder_CUDAVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoDecoder_CUDA_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoDecoder_CUDA_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoDecoder_CUDA_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoDecoder_CUDA_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoDecoder_CUDA_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoDecoder_CUDA_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoDecoder_CUDA_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoDecoder_CUDA_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoDecoder_CUDA_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoDecoder_CUDA_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoDecoder_CUDA_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_DanielVideoDecoder_CUDA_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_DanielVideoDecoder_CUDA_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_DanielVideoDecoder_CUDA_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_DanielVideoDecoder_CUDA_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_DanielVideoDecoder_CUDA_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoDecoder_CUDA_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 



#define ICC_DanielVideoDecoder_CUDA_get_TargetColorFormat(This,x)	\
    ( (This)->lpVtbl -> get_TargetColorFormat(This,x) ) 

#define ICC_DanielVideoDecoder_CUDA_put_TargetColorFormat(This,x)	\
    ( (This)->lpVtbl -> put_TargetColorFormat(This,x) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoDecoder_CUDA_INTERFACE_DEFINED__ */


#ifndef __ICC_DanielVideoEncoder_CUDA_INTERFACE_DEFINED__
#define __ICC_DanielVideoEncoder_CUDA_INTERFACE_DEFINED__

/* interface ICC_DanielVideoEncoder_CUDA */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoEncoder_CUDA;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a156bd1-f05f-4d3c-9b55-c49f65200342")
    ICC_DanielVideoEncoder_CUDA : public ICC_DanielVideoEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoEncoder_CUDAVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoEncoder_CUDA * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoEncoder_CUDA * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *AddUserData )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [size_is][in] */ const BYTE *pbUserData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ CC_BOOL bSecondField);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_DanielVideoEncoder_CUDA * This,
            /* [in] */ CC_TIMECODE x);
        
        END_INTERFACE
    } ICC_DanielVideoEncoder_CUDAVtbl;

    interface ICC_DanielVideoEncoder_CUDA
    {
        CONST_VTBL struct ICC_DanielVideoEncoder_CUDAVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoEncoder_CUDA_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoEncoder_CUDA_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoEncoder_CUDA_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoEncoder_CUDA_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoEncoder_CUDA_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoEncoder_CUDA_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoEncoder_CUDA_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoEncoder_CUDA_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoEncoder_CUDA_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoEncoder_CUDA_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoEncoder_CUDA_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_DanielVideoEncoder_CUDA_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_DanielVideoEncoder_CUDA_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_DanielVideoEncoder_CUDA_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_DanielVideoEncoder_CUDA_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_DanielVideoEncoder_CUDA_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_DanielVideoEncoder_CUDA_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_DanielVideoEncoder_CUDA_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoEncoder_CUDA_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#define ICC_DanielVideoEncoder_CUDA_AddUserData(This,pbUserData,cbSize,bSecondField)	\
    ( (This)->lpVtbl -> AddUserData(This,pbUserData,cbSize,bSecondField) ) 

#define ICC_DanielVideoEncoder_CUDA_put_InitialTimeCode(This,x)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoEncoder_CUDA_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0162 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_D2DEC_SCALE
    {
        D2DEC_SCALE_1	= 0,
        D2DEC_SCALE_2	= 1,
        D2DEC_SCALE_4	= 2
    } 	CC_D2DEC_SCALE;

typedef struct CC_D2_DECODER_PARAMS
    {
    void *gDecodedBuffer;
    CC_INT DecodedPitch;
    CC_INT DecodedHeight;
    CC_D2DEC_SCALE decScale;
    RECT decROI;
    } 	CC_D2_DECODER_PARAMS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0162_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0162_v0_0_s_ifspec;

#ifndef __ICC_DanielVideoDecoder_CudaPlayer_INTERFACE_DEFINED__
#define __ICC_DanielVideoDecoder_CudaPlayer_INTERFACE_DEFINED__

/* interface ICC_DanielVideoDecoder_CudaPlayer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DanielVideoDecoder_CudaPlayer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0add9766-f751-4a15-b891-1495605eef3b")
    ICC_DanielVideoDecoder_CudaPlayer : public ICC_DanielVideoDecoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitDecoder( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOutputBufferDimensions( 
            /* [in] */ CC_SIZE src_size,
            /* [retval][out] */ CC_SIZE *ptarget_size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DecodeFrame( 
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ CC_D2_DECODER_PARAMS *pDecPar) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DanielVideoDecoder_CudaPlayerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DanielVideoDecoder_CudaPlayer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DanielVideoDecoder_CudaPlayer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *InitDecoder )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetOutputBufferDimensions )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [in] */ CC_SIZE src_size,
            /* [retval][out] */ CC_SIZE *ptarget_size);
        
        HRESULT ( STDMETHODCALLTYPE *DecodeFrame )( 
            ICC_DanielVideoDecoder_CudaPlayer * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ CC_D2_DECODER_PARAMS *pDecPar);
        
        END_INTERFACE
    } ICC_DanielVideoDecoder_CudaPlayerVtbl;

    interface ICC_DanielVideoDecoder_CudaPlayer
    {
        CONST_VTBL struct ICC_DanielVideoDecoder_CudaPlayerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DanielVideoDecoder_CudaPlayer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DanielVideoDecoder_CudaPlayer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_DanielVideoDecoder_CudaPlayer_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_DanielVideoDecoder_CudaPlayer_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 



#define ICC_DanielVideoDecoder_CudaPlayer_InitDecoder(This,pbData,cbSize)	\
    ( (This)->lpVtbl -> InitDecoder(This,pbData,cbSize) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_GetOutputBufferDimensions(This,src_size,ptarget_size)	\
    ( (This)->lpVtbl -> GetOutputBufferDimensions(This,src_size,ptarget_size) ) 

#define ICC_DanielVideoDecoder_CudaPlayer_DecodeFrame(This,pbData,cbSize,pts,pDecPar)	\
    ( (This)->lpVtbl -> DecodeFrame(This,pbData,cbSize,pts,pDecPar) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DanielVideoDecoder_CudaPlayer_INTERFACE_DEFINED__ */


#ifndef __ICC_D2D_GetFrameDecodingParamsProp_INTERFACE_DEFINED__
#define __ICC_D2D_GetFrameDecodingParamsProp_INTERFACE_DEFINED__

/* interface ICC_D2D_GetFrameDecodingParamsProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_D2D_GetFrameDecodingParamsProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d45d4f96-a218-4c54-96fc-230f2c1537a7")
    ICC_D2D_GetFrameDecodingParamsProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameDecodingParams( 
            /* [retval][out] */ CC_D2_DECODER_PARAMS *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_D2D_GetFrameDecodingParamsPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_D2D_GetFrameDecodingParamsProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_D2D_GetFrameDecodingParamsProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_D2D_GetFrameDecodingParamsProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameDecodingParams )( 
            ICC_D2D_GetFrameDecodingParamsProp * This,
            /* [retval][out] */ CC_D2_DECODER_PARAMS *p);
        
        END_INTERFACE
    } ICC_D2D_GetFrameDecodingParamsPropVtbl;

    interface ICC_D2D_GetFrameDecodingParamsProp
    {
        CONST_VTBL struct ICC_D2D_GetFrameDecodingParamsPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_D2D_GetFrameDecodingParamsProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_D2D_GetFrameDecodingParamsProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_D2D_GetFrameDecodingParamsProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_D2D_GetFrameDecodingParamsProp_get_FrameDecodingParams(This,p)	\
    ( (This)->lpVtbl -> get_FrameDecodingParams(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_D2D_GetFrameDecodingParamsProp_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoStreamInfo_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoStreamInfo_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5ad9b3a9-9a15-44ed-9341-7115670e7c77")
    ICC_Y4M_VideoStreamInfo : public ICC_VideoStreamInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_SIZE *s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_RATIONAL *a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgressiveSequence )( 
            ICC_Y4M_VideoStreamInfo * This,
            /* [retval][out] */ CC_BOOL *x);
        
        END_INTERFACE
    } ICC_Y4M_VideoStreamInfoVtbl;

    interface ICC_Y4M_VideoStreamInfo
    {
        CONST_VTBL struct ICC_Y4M_VideoStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Y4M_VideoStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Y4M_VideoStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Y4M_VideoStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Y4M_VideoStreamInfo_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_Y4M_VideoStreamInfo_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Y4M_VideoStreamInfo_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 


#define ICC_Y4M_VideoStreamInfo_get_FrameSize(This,s)	\
    ( (This)->lpVtbl -> get_FrameSize(This,s) ) 

#define ICC_Y4M_VideoStreamInfo_get_AspectRatio(This,a)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,a) ) 

#define ICC_Y4M_VideoStreamInfo_get_ProgressiveSequence(This,x)	\
    ( (This)->lpVtbl -> get_ProgressiveSequence(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoFrameInfo_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoFrameInfo_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoFrameInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoFrameInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43e44fc2-99d9-4e78-aa60-247df8293231")
    ICC_Y4M_VideoFrameInfo : public ICC_VideoFrameInfo
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoFrameInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoFrameInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoFrameInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ByteStreamDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ByteOffset )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ByteStreamDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumSamples )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_ElementaryDataInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleOffset )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_OFFSET *__MIDL__ICC_ElementaryDataInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PresentationDelta )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_INT *__MIDL__ICC_ElementaryDataInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PTS )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTS )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_ElementaryDataInfo0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceEntryFlag )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ElementaryDataInfo0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *n);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodingNumber )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_UINT *c);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeCode )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *i);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameType )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_FRAME_TYPE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PictStruct )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ CC_PICTURE_STRUCTURE *x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            ICC_Y4M_VideoFrameInfo * This,
            /* [retval][out] */ DWORD *x);
        
        END_INTERFACE
    } ICC_Y4M_VideoFrameInfoVtbl;

    interface ICC_Y4M_VideoFrameInfo
    {
        CONST_VTBL struct ICC_Y4M_VideoFrameInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoFrameInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoFrameInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoFrameInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoFrameInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Y4M_VideoFrameInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Y4M_VideoFrameInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Y4M_VideoFrameInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Y4M_VideoFrameInfo_get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_ByteStreamDataInfo0000) ) 

#define ICC_Y4M_VideoFrameInfo_get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001)	\
    ( (This)->lpVtbl -> get_ByteOffset(This,__MIDL__ICC_ByteStreamDataInfo0001) ) 


#define ICC_Y4M_VideoFrameInfo_get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000)	\
    ( (This)->lpVtbl -> get_NumSamples(This,__MIDL__ICC_ElementaryDataInfo0000) ) 

#define ICC_Y4M_VideoFrameInfo_get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001)	\
    ( (This)->lpVtbl -> get_SampleOffset(This,__MIDL__ICC_ElementaryDataInfo0001) ) 

#define ICC_Y4M_VideoFrameInfo_get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002)	\
    ( (This)->lpVtbl -> get_Duration(This,__MIDL__ICC_ElementaryDataInfo0002) ) 

#define ICC_Y4M_VideoFrameInfo_get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003)	\
    ( (This)->lpVtbl -> get_PresentationDelta(This,__MIDL__ICC_ElementaryDataInfo0003) ) 

#define ICC_Y4M_VideoFrameInfo_get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004)	\
    ( (This)->lpVtbl -> get_PTS(This,__MIDL__ICC_ElementaryDataInfo0004) ) 

#define ICC_Y4M_VideoFrameInfo_get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005)	\
    ( (This)->lpVtbl -> get_DTS(This,__MIDL__ICC_ElementaryDataInfo0005) ) 

#define ICC_Y4M_VideoFrameInfo_get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006)	\
    ( (This)->lpVtbl -> get_SequenceEntryFlag(This,__MIDL__ICC_ElementaryDataInfo0006) ) 


#define ICC_Y4M_VideoFrameInfo_get_Number(This,n)	\
    ( (This)->lpVtbl -> get_Number(This,n) ) 

#define ICC_Y4M_VideoFrameInfo_get_CodingNumber(This,c)	\
    ( (This)->lpVtbl -> get_CodingNumber(This,c) ) 

#define ICC_Y4M_VideoFrameInfo_get_TimeCode(This,t)	\
    ( (This)->lpVtbl -> get_TimeCode(This,t) ) 

#define ICC_Y4M_VideoFrameInfo_get_InterlaceType(This,i)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,i) ) 

#define ICC_Y4M_VideoFrameInfo_get_FrameType(This,x)	\
    ( (This)->lpVtbl -> get_FrameType(This,x) ) 

#define ICC_Y4M_VideoFrameInfo_get_PictStruct(This,x)	\
    ( (This)->lpVtbl -> get_PictStruct(This,x) ) 

#define ICC_Y4M_VideoFrameInfo_get_Flags(This,x)	\
    ( (This)->lpVtbl -> get_Flags(This,x) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoFrameInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoSplitter_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoSplitter_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoSplitter */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoSplitter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("876b52d4-d01c-49e2-98d7-7449d4989cbb")
    ICC_Y4M_VideoSplitter : public ICC_VideoSplitter
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoSplitterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoSplitter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoSplitter * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Y4M_VideoSplitter * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Y4M_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Y4M_VideoSplitter * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Y4M_VideoSplitter * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Y4M_VideoSplitter * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Transcoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Y4M_VideoSplitter * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_Y4M_VideoSplitter * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_Y4M_VideoSplitterVtbl;

    interface ICC_Y4M_VideoSplitter
    {
        CONST_VTBL struct ICC_Y4M_VideoSplitterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoSplitter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoSplitter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoSplitter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoSplitter_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Y4M_VideoSplitter_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Y4M_VideoSplitter_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Y4M_VideoSplitter_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Y4M_VideoSplitter_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Y4M_VideoSplitter_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Y4M_VideoSplitter_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Y4M_VideoSplitter_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Y4M_VideoSplitter_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Y4M_VideoSplitter_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Y4M_VideoSplitter_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Y4M_VideoSplitter_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Y4M_VideoSplitter_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Y4M_VideoSplitter_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Y4M_VideoSplitter_get_DataSize(This,__MIDL__ICC_Transcoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Transcoder0000) ) 

#define ICC_Y4M_VideoSplitter_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 



#define ICC_Y4M_VideoSplitter_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_Y4M_VideoSplitter_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoSplitter_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoDecoder_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoDecoder_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoDecoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoDecoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("569d8d00-59e0-440b-8304-fcc356135f9e")
    ICC_Y4M_VideoDecoder : public ICC_VideoDecoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoDecoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoDecoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoDecoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Y4M_VideoDecoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Y4M_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Y4M_VideoDecoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Y4M_VideoDecoder * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetFrame )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][out] */ BYTE *pbVideoData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_Y4M_VideoDecoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_Y4M_VideoDecoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_Y4M_VideoDecoderVtbl;

    interface ICC_Y4M_VideoDecoder
    {
        CONST_VTBL struct ICC_Y4M_VideoDecoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoDecoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoDecoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoDecoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoDecoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Y4M_VideoDecoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Y4M_VideoDecoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Y4M_VideoDecoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Y4M_VideoDecoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Y4M_VideoDecoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Y4M_VideoDecoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Y4M_VideoDecoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Y4M_VideoDecoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Y4M_VideoDecoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Y4M_VideoDecoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Y4M_VideoDecoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Y4M_VideoDecoder_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Y4M_VideoDecoder_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Y4M_VideoDecoder_GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize)	\
    ( (This)->lpVtbl -> GetFrame(This,Format,pbVideoData,cbSize,stride,pcbRetSize) ) 

#define ICC_Y4M_VideoDecoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_Y4M_VideoDecoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_Y4M_VideoDecoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_Y4M_VideoDecoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoDecoder_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoEncoderSettings_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoEncoderSettings_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoEncoderSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoEncoderSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc708f85-7200-4056-80d1-93628c65e5f6")
    ICC_Y4M_VideoEncoderSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *x) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE x) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_Y4M_VideoEncoderSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_Y4M_VideoEncoderSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_Y4M_VideoEncoderSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatio( 
            /* [in] */ CC_RATIONAL __MIDL__ICC_Y4M_VideoEncoderSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChromaFormat( 
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_Y4M_VideoEncoderSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChromaFormat( 
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_Y4M_VideoEncoderSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitDepth( 
            /* [retval][out] */ DWORD *__MIDL__ICC_Y4M_VideoEncoderSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitDepth( 
            /* [in] */ DWORD __MIDL__ICC_Y4M_VideoEncoderSettings0007) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoEncoderSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoEncoderSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoEncoderSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_SIZE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_SIZE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *x);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_FRAME_RATE x);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *__MIDL__ICC_Y4M_VideoEncoderSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_INTERLACE_TYPE __MIDL__ICC_Y4M_VideoEncoderSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_RATIONAL *__MIDL__ICC_Y4M_VideoEncoderSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_RATIONAL __MIDL__ICC_Y4M_VideoEncoderSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChromaFormat )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ CC_CHROMA_FORMAT *__MIDL__ICC_Y4M_VideoEncoderSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChromaFormat )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ CC_CHROMA_FORMAT __MIDL__ICC_Y4M_VideoEncoderSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitDepth )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_Y4M_VideoEncoderSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitDepth )( 
            ICC_Y4M_VideoEncoderSettings * This,
            /* [in] */ DWORD __MIDL__ICC_Y4M_VideoEncoderSettings0007);
        
        END_INTERFACE
    } ICC_Y4M_VideoEncoderSettingsVtbl;

    interface ICC_Y4M_VideoEncoderSettings
    {
        CONST_VTBL struct ICC_Y4M_VideoEncoderSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoEncoderSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoEncoderSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoEncoderSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoEncoderSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_Y4M_VideoEncoderSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_Y4M_VideoEncoderSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_Y4M_VideoEncoderSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_Y4M_VideoEncoderSettings_get_FrameSize(This,x)	\
    ( (This)->lpVtbl -> get_FrameSize(This,x) ) 

#define ICC_Y4M_VideoEncoderSettings_put_FrameSize(This,x)	\
    ( (This)->lpVtbl -> put_FrameSize(This,x) ) 

#define ICC_Y4M_VideoEncoderSettings_get_FrameRate(This,x)	\
    ( (This)->lpVtbl -> get_FrameRate(This,x) ) 

#define ICC_Y4M_VideoEncoderSettings_put_FrameRate(This,x)	\
    ( (This)->lpVtbl -> put_FrameRate(This,x) ) 

#define ICC_Y4M_VideoEncoderSettings_get_InterlaceType(This,__MIDL__ICC_Y4M_VideoEncoderSettings0000)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,__MIDL__ICC_Y4M_VideoEncoderSettings0000) ) 

#define ICC_Y4M_VideoEncoderSettings_put_InterlaceType(This,__MIDL__ICC_Y4M_VideoEncoderSettings0001)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,__MIDL__ICC_Y4M_VideoEncoderSettings0001) ) 

#define ICC_Y4M_VideoEncoderSettings_get_AspectRatio(This,__MIDL__ICC_Y4M_VideoEncoderSettings0002)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,__MIDL__ICC_Y4M_VideoEncoderSettings0002) ) 

#define ICC_Y4M_VideoEncoderSettings_put_AspectRatio(This,__MIDL__ICC_Y4M_VideoEncoderSettings0003)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,__MIDL__ICC_Y4M_VideoEncoderSettings0003) ) 

#define ICC_Y4M_VideoEncoderSettings_get_ChromaFormat(This,__MIDL__ICC_Y4M_VideoEncoderSettings0004)	\
    ( (This)->lpVtbl -> get_ChromaFormat(This,__MIDL__ICC_Y4M_VideoEncoderSettings0004) ) 

#define ICC_Y4M_VideoEncoderSettings_put_ChromaFormat(This,__MIDL__ICC_Y4M_VideoEncoderSettings0005)	\
    ( (This)->lpVtbl -> put_ChromaFormat(This,__MIDL__ICC_Y4M_VideoEncoderSettings0005) ) 

#define ICC_Y4M_VideoEncoderSettings_get_BitDepth(This,__MIDL__ICC_Y4M_VideoEncoderSettings0006)	\
    ( (This)->lpVtbl -> get_BitDepth(This,__MIDL__ICC_Y4M_VideoEncoderSettings0006) ) 

#define ICC_Y4M_VideoEncoderSettings_put_BitDepth(This,__MIDL__ICC_Y4M_VideoEncoderSettings0007)	\
    ( (This)->lpVtbl -> put_BitDepth(This,__MIDL__ICC_Y4M_VideoEncoderSettings0007) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoEncoderSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_Y4M_VideoEncoder_INTERFACE_DEFINED__
#define __ICC_Y4M_VideoEncoder_INTERFACE_DEFINED__

/* interface ICC_Y4M_VideoEncoder */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Y4M_VideoEncoder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c753bffb-f306-44b4-b164-ec2f1939eec9")
    ICC_Y4M_VideoEncoder : public ICC_VideoEncoder
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_Y4M_VideoEncoderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Y4M_VideoEncoder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Y4M_VideoEncoder * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Y4M_VideoEncoder * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Y4M_VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Y4M_VideoEncoder * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Y4M_VideoEncoder * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *AddFrame )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT Format,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][in] */ INT stride,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetStride )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [retval][out] */ DWORD *pNumBytes);
        
        HRESULT ( STDMETHODCALLTYPE *IsFormatSupported )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_COLOR_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *AddScaleFrame )( 
            ICC_Y4M_VideoEncoder * This,
            /* [size_is][in] */ const BYTE *pData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsScaleAvailable )( 
            ICC_Y4M_VideoEncoder * This,
            /* [in] */ CC_ADD_VIDEO_FRAME_PARAMS *pParams,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_VideoEncoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoStreamInfo )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *GetVideoFrameInfo )( 
            ICC_Y4M_VideoEncoder * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        END_INTERFACE
    } ICC_Y4M_VideoEncoderVtbl;

    interface ICC_Y4M_VideoEncoder
    {
        CONST_VTBL struct ICC_Y4M_VideoEncoderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Y4M_VideoEncoder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Y4M_VideoEncoder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Y4M_VideoEncoder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Y4M_VideoEncoder_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Y4M_VideoEncoder_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Y4M_VideoEncoder_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Y4M_VideoEncoder_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Y4M_VideoEncoder_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Y4M_VideoEncoder_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Y4M_VideoEncoder_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Y4M_VideoEncoder_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Y4M_VideoEncoder_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Y4M_VideoEncoder_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Y4M_VideoEncoder_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Y4M_VideoEncoder_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Y4M_VideoEncoder_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_Y4M_VideoEncoder_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_Y4M_VideoEncoder_AddFrame(This,Format,pData,cbSize,stride,pResult)	\
    ( (This)->lpVtbl -> AddFrame(This,Format,pData,cbSize,stride,pResult) ) 

#define ICC_Y4M_VideoEncoder_GetStride(This,fmt,pNumBytes)	\
    ( (This)->lpVtbl -> GetStride(This,fmt,pNumBytes) ) 

#define ICC_Y4M_VideoEncoder_IsFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsFormatSupported(This,fmt,pResult) ) 

#define ICC_Y4M_VideoEncoder_AddScaleFrame(This,pData,cbSize,pParams,pResult)	\
    ( (This)->lpVtbl -> AddScaleFrame(This,pData,cbSize,pParams,pResult) ) 

#define ICC_Y4M_VideoEncoder_IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000)	\
    ( (This)->lpVtbl -> IsScaleAvailable(This,pParams,__MIDL__ICC_VideoEncoder0000) ) 

#define ICC_Y4M_VideoEncoder_GetVideoStreamInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoStreamInfo(This,pDescr) ) 

#define ICC_Y4M_VideoEncoder_GetVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> GetVideoFrameInfo(This,pDescr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Y4M_VideoEncoder_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0170 */
/* [local] */ 

typedef WORD CC_PID;

typedef LONGLONG CC_SCR;

typedef /* [v1_enum] */ 
enum CC_MULTIPLEXED_STREAM_TYPE
    {
        CC_MUX_UNKNOWN_STREAM	= 0,
        CC_MUX_ELEMENTARY_STREAM	= 1,
        CC_MUX_PES_STREAM	= 2,
        CC_MUX_SYSTEM_STREAM	= 3,
        CC_MUX_PROGRAM_STREAM	= 4,
        CC_MUX_TRANSPORT_STREAM	= 5,
        CC_MUX_MP4_STREAM	= 6
    } 	CC_MULTIPLEXED_STREAM_TYPE;

typedef 
enum CC_PES_ID
    {
        CC_PESID_UNKNOWN	= 0,
        CC_PESID_MIN	= 0xbc,
        CC_PESID_PROGRAM_STREAM_MAP	= 0xbc,
        CC_PESID_PRIVATE_1	= 0xbd,
        CC_PESID_PADDING	= 0xbe,
        CC_PESID_PRIVATE_2	= 0xbf,
        CC_PESID_AUDIO	= 0xc0,
        CC_PESID_VIDEO	= 0xe0,
        CC_PESID_MPEG1_DATA	= 0xf0,
        CC_PESID_ECM	= 0xf0,
        CC_PESID_EMM	= 0xf1,
        CC_PESID_DSMCC	= 0xf2,
        CC_PESID_ISO_IEC_13522	= 0xf3,
        CC_PESID_H222_1_TYPE_A	= 0xf4,
        CC_PESID_H222_1_TYPE_B	= 0xf5,
        CC_PESID_H222_1_TYPE_C	= 0xf6,
        CC_PESID_H222_1_TYPE_D	= 0xf7,
        CC_PESID_H222_1_TYPE_E	= 0xf8,
        CC_PESID_ANCILLARY	= 0xf9,
        CC_PESID_MPEG4_SL_PACKETIZED	= 0xfa,
        CC_PESID_MPEG4_FLEX_MUX	= 0xfb,
        CC_PESID_METADATA	= 0xfc,
        CC_PESID_EXTENDED	= 0xfd,
        CC_PESID_RESERVED	= 0xfe,
        CC_PESID_PROGRAM_STREAM_DIRECTORY	= 0xff,
        CC_PESID_MAX	= 0xff
    } 	CC_PES_ID;

typedef 
enum CC_PSI_TABLE_ID
    {
        CC_PSITBL_PROGRAM_ASSOCIATION_SECTION	= 0,
        CC_PSITBL_CONDITIONAL_ACCESS_SECTION	= 0x1,
        CC_PSITBL_PROGRAM_MAP_SECTION	= 0x2,
        CC_PSITBL_DESCRIPTION_SECTION	= 0x3,
        CC_PSITBL_SCENE_DESCRIPTION_SECTION	= 0x4,
        CC_PSITBL_OBJECT_DESCRIPTOR_SECTION	= 0x5
    } 	CC_PSI_TABLE_ID;

typedef struct CC_ACCESS_UNIT_DESCR
    {
    DWORD size;
    DWORD offset;
    CC_TIME pts;
    CC_TIME dts;
    } 	MPG_ACCESS_UNIT_DESCR;

typedef struct CC_PACKET_DESCR
    {
    CC_PES_ID pes_id;
    CC_PID pid;
    CC_SCR scr;
    CC_UINT duration;
    CC_UINT size;
    CC_UINT offset;
    } 	CC_PACKET_DESCR;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0170_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0170_v0_0_s_ifspec;

#ifndef __ICC_MultiplexedDataDescr_INTERFACE_DEFINED__
#define __ICC_MultiplexedDataDescr_INTERFACE_DEFINED__

/* interface ICC_MultiplexedDataDescr */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MultiplexedDataDescr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("022813a8-3467-4f49-b17a-57bffd5fd21f")
    ICC_MultiplexedDataDescr : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumPackets( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MultiplexedDataDescr0000) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPacketInfo( 
            /* [in] */ CC_UINT idx,
            /* [retval][out] */ CC_PACKET_DESCR *__MIDL__ICC_MultiplexedDataDescr0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumAccessUnits( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MultiplexedDataDescr0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAccessUnitInfo( 
            /* [in] */ CC_UINT idx,
            /* [retval][out] */ MPG_ACCESS_UNIT_DESCR *__MIDL__ICC_MultiplexedDataDescr0003) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MultiplexedDataDescrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MultiplexedDataDescr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MultiplexedDataDescr * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MultiplexedDataDescr * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumPackets )( 
            ICC_MultiplexedDataDescr * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MultiplexedDataDescr0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetPacketInfo )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ CC_UINT idx,
            /* [retval][out] */ CC_PACKET_DESCR *__MIDL__ICC_MultiplexedDataDescr0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumAccessUnits )( 
            ICC_MultiplexedDataDescr * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MultiplexedDataDescr0002);
        
        HRESULT ( STDMETHODCALLTYPE *GetAccessUnitInfo )( 
            ICC_MultiplexedDataDescr * This,
            /* [in] */ CC_UINT idx,
            /* [retval][out] */ MPG_ACCESS_UNIT_DESCR *__MIDL__ICC_MultiplexedDataDescr0003);
        
        END_INTERFACE
    } ICC_MultiplexedDataDescrVtbl;

    interface ICC_MultiplexedDataDescr
    {
        CONST_VTBL struct ICC_MultiplexedDataDescrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MultiplexedDataDescr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MultiplexedDataDescr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MultiplexedDataDescr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MultiplexedDataDescr_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MultiplexedDataDescr_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MultiplexedDataDescr_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MultiplexedDataDescr_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MultiplexedDataDescr_get_NumPackets(This,__MIDL__ICC_MultiplexedDataDescr0000)	\
    ( (This)->lpVtbl -> get_NumPackets(This,__MIDL__ICC_MultiplexedDataDescr0000) ) 

#define ICC_MultiplexedDataDescr_GetPacketInfo(This,idx,__MIDL__ICC_MultiplexedDataDescr0001)	\
    ( (This)->lpVtbl -> GetPacketInfo(This,idx,__MIDL__ICC_MultiplexedDataDescr0001) ) 

#define ICC_MultiplexedDataDescr_get_NumAccessUnits(This,__MIDL__ICC_MultiplexedDataDescr0002)	\
    ( (This)->lpVtbl -> get_NumAccessUnits(This,__MIDL__ICC_MultiplexedDataDescr0002) ) 

#define ICC_MultiplexedDataDescr_GetAccessUnitInfo(This,idx,__MIDL__ICC_MultiplexedDataDescr0003)	\
    ( (This)->lpVtbl -> GetAccessUnitInfo(This,idx,__MIDL__ICC_MultiplexedDataDescr0003) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MultiplexedDataDescr_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0171 */
/* [local] */ 

typedef 
enum CC_MUX_OUTPUT_POLICY
    {
        CC_FLUSH_EACH_PACKET	= 0,
        CC_FLUSH_AT_ACCESS_UNIT_START	= 1,
        CC_FLUSH_AT_BUFFER_FULL	= 2,
        CC_MUX_OUTPUT_POLICIES_COUNT	= ( CC_FLUSH_AT_BUFFER_FULL + 1 ) 
    } 	CC_MUX_OUTPUT_POLICY;

typedef 
enum MPEG_SYSTEM_DESCRIPTOR_TAG
    {
        CC_DESCR_UNKNOWN	= 0,
        CC_DESCR_VIDEO_STREAM	= 0x2,
        CC_DESCR_AUDIO_STREAM	= 0x3,
        CC_DESCR_HIERARCHY	= 0x4,
        CC_DESCR_REGISTRATION	= 0x5,
        CC_DESCR_DATA_STREAM_ALIGNMENT	= 0x6,
        CC_DESCR_TARGET_BACKGROUND_GRID	= 0x7,
        CC_DESCR_VIDEO_WINDOW	= 0x8,
        CC_DESCR_CA	= 0x9,
        CC_DESCR_ISO_639_LANGUAGE	= 0xa,
        CC_DESCR_SYSTEM_CLOCK	= 0xb,
        CC_DESCR_MULTIPLEX_BUFFER_UTILIZATION	= 0xc,
        CC_DESCR_COPYRIGHT	= 0xd,
        CC_DESCR_MAXIMUM_BITRATE	= 0xe,
        CC_DESCR_PRIVATE_DATA_INDICATOR	= 0xf,
        CC_DESCR_SMOOTHING_BUFFER	= 0x10,
        CC_DESCR_STD	= 0x11,
        CC_DESCR_IBP	= 0x12,
        CC_DESCR_MPEG4_VIDEO	= 0x1b,
        CC_DESCR_MPEG4_AUDIO	= 0x1c,
        CC_DESCR_IOD	= 0x1d,
        CC_DESCR_SL	= 0x1e,
        CC_DESCR_FMC	= 0x1f,
        CC_DESCR_EXTERNAL_ES_ID	= 0x20,
        CC_DESCR_MUX_CODE	= 0x21,
        CC_DESCR_FMX_BUFFER_SIZE	= 0x22,
        CC_DESCR_MULTIPLEX_BUFFER	= 0x23,
        CC_DESCR_CONTENT_LABELING	= 0x24,
        CC_DESCR_METADATA_POINTER	= 0x25,
        CC_DESCR_METADATA	= 0x26,
        CC_DESCR_METADATA_STD	= 0x27,
        CC_DESCR_AVC_VIDEO	= 0x28,
        CC_DESCR_IPMP	= 0x29,
        CC_DESCR_AVC_TIMING_AND_HDR	= 0x30,
        CC_DESCR_NETWORK_NAME	= 0x40,
        CC_DESCR_SERVICE_LIST	= 0x41,
        CC_DESCR_STUFFING	= 0x42,
        CC_DESCR_SATELLITE_DELIVERY_SYSTEM	= 0x43,
        CC_DESCR_CABLE_DELIVERY_SYSTEM	= 0x44,
        CC_DESCR_VBI_DATA	= 0x45,
        CC_DESCR_VBI_TELETEXT	= 0x46,
        CC_DESCR_BOUQUET_NAME	= 0x47,
        CC_DESCR_SERVICE	= 0x48,
        CC_DESCR_COUNTRY_AVAILABILITY	= 0x49,
        CC_DESCR_LINKAGE	= 0x4a,
        CC_DESCR_NVOD_REFERENCE	= 0x4b,
        CC_DESCR_TIME_SHIFTED_SERVICE	= 0x4c,
        CC_DESCR_SHORT_EVENT	= 0x4d,
        CC_DESCR_EXTENDED_EVENT	= 0x4e,
        CC_DESCR_TIME_SHIFTED_EVENT	= 0x4f,
        CC_DESCR_COMPONENT	= 0x50,
        CC_DESCR_MOSAIC	= 0x51,
        CC_DESCR_STREAM_IDENTIFIER	= 0x52,
        CC_DESCR_CA_IDENTIFIER	= 0x53,
        CC_DESCR_CONTENT	= 0x54,
        CC_DESCR_PARENTAL_RATING	= 0x55,
        CC_DESCR_TELETEXT	= 0x56,
        CC_DESCR_TELEPHONE	= 0x57,
        CC_DESCR_LOCAL_TIME_OFFSET	= 0x58,
        CC_DESCR_SUBTITLING	= 0x59,
        CC_DESCR_TERRESTRIAL_DELIVERY_SYSTEM	= 0x5a,
        CC_DESCR_MULTILINGUAL_NETWORK_NAME	= 0x5b,
        CC_DESCR_MULTILINGUAL_BOUQUET_NAME	= 0x5c,
        CC_DESCR_MULTILINGUAL_SERVICE_NAME	= 0x5d,
        CC_DESCR_MULTILINGUAL_COMPONENT	= 0x5e,
        CC_DESCR_PRIVATE_DATA_SPECIFIER	= 0x5f,
        CC_DESCR_SERVICE_MOVE	= 0x60,
        CC_DESCR_SHORT_SMOOTHING_BUFFER	= 0x61,
        CC_DESCR_FREQUENCY_LIST	= 0x62,
        CC_DESCR_PARTIAL_TRANSPORT_STREAM	= 0x63,
        CC_DESCR_DATA_BROADCAST	= 0x64,
        CC_DESCR_SCRAMBLING	= 0x65,
        CC_DESCR_DATA_BROADCAST_ID	= 0x66,
        CC_DESCR_TRANSPORT_STREAM	= 0x67,
        CC_DESCR_DSNG	= 0x68,
        CC_DESCR_PDC	= 0x69,
        CC_DESCR_AC3_SYSTEM_B_DVB	= 0x6a,
        CC_DESCR_ANCILLARY_DATA	= 0x6b,
        CC_DESCR_CELL_LIST	= 0x6c,
        CC_DESCR_CELL_FREQUENCY_LINK	= 0x6d,
        CC_DESCR_ANNOUNCEMENT_SUPPORT	= 0x6e,
        CC_DESCR_APPLICATION_SIGNALLING	= 0x6f,
        CC_DESCR_ADAPTATION_FIELD_DATA	= 0x70,
        CC_DESCR_SERVICE_IDENTIFIER	= 0x71,
        CC_DESCR_SERVICE_AVAILABILITY	= 0x72,
        CC_DESCR_DEFAULT_AUTHORITY	= 0x73,
        CC_DESCR_RELATED_CONTENT	= 0x74,
        CC_DESCR_TVA_ID	= 0x75,
        CC_DESCR_CONTENT_IDENTIFIER	= 0x76,
        CC_DESCR_TIME_SLICE_FEC_IDENTIFIER	= 0x77,
        CC_DESCR_ECM_REPETITION_RATE	= 0x78,
        CC_DESCR_S2_SATELLITE_DELIVERY_SYSTEM	= 0x79,
        CC_DESCR_ENHANCED_AC3	= 0x7a,
        CC_DESCR_DTS	= 0x7b,
        CC_DESCR_AAC	= 0x7c,
        CC_DESCR_XAIT_LOCATION	= 0x7d,
        CC_DESCR_FTA_CONTENT_MANAGEMENT	= 0x7e,
        CC_DESCR_EXTENSION	= 0x7f,
        CC_DESCR_AC3_SYSTEM_A_ATSC	= 0x81,
        CC_DESCR_BROADCAST_ID	= 0x85,
        CC_DESCR_DTCP	= 0x88,
        CC_DESCR_CUE_IDENTIFIER	= 0x8a,
        CC_DESCR_HIERARCHICAL_TRANSMISSION	= 0xc0,
        CC_DESCR_DIGITAL_COPY_CONTROL	= 0xc1,
        CC_DESCR_NETWORK_IDENTIFICATION	= 0xc2,
        CC_DESCR_PARTIAL_TS_TIME	= 0xc3,
        CC_DESCR_AUDIO_COMPONENT	= 0xc4,
        CC_DESCR_HYPERLINK	= 0xc5,
        CC_DESCR_TARGET_REGION	= 0xc6,
        CC_DESCR_DATA_CONTENT	= 0xc7,
        CC_DESCR_VIDEO_DECODE_CONTROL	= 0xc8,
        CC_DESCR_TS_INFORMATION	= 0xcd,
        CC_DESCR_EXTENDED_BROADCASTER	= 0xce,
        CC_DESCR_SERIES	= 0xd5,
        CC_DESCR_EVENT_GROUP	= 0xd6,
        CC_DESCR_BROADCASTER_NAME	= 0xd8,
        CC_DESCR_COMPONENT_GROUP	= 0xd9,
        CC_DESCR_CONTENT_AVAILABILITY	= 0xde,
        CC_DESCR_EMERGENCY_INFORMATION	= 0xfc,
        CC_DESCR_DATA_COMPONENT	= 0xfd
    } 	MPEG_SYSTEM_DESCRIPTOR_TAG;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_Cinecoder_0000_0171_0001
    {
    MPEG_SYSTEM_DESCRIPTOR_TAG code;
    DWORD length;
    BYTE data[ 256 ];
    } 	CC_SYSDESCR;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0171_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0171_v0_0_s_ifspec;

#ifndef __ICC_SystemDescriptorsReader_INTERFACE_DEFINED__
#define __ICC_SystemDescriptorsReader_INTERFACE_DEFINED__

/* interface ICC_SystemDescriptorsReader */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SystemDescriptorsReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001ffe-be08-11dc-aa88-005056c00008")
    ICC_SystemDescriptorsReader : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumDescr( 
            /* [retval][out] */ INT *pNumDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ DWORD *pcbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ INT dwDescrIndex,
            /* [retval][out] */ CC_SYSDESCR *pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IndexOf( 
            /* [in] */ MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,
            /* [defaultvalue][in] */ INT idxSearchFrom,
            /* [retval][out] */ INT *pDescrIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StoreToBuffer( 
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SystemDescriptorsReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SystemDescriptorsReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SystemDescriptorsReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SystemDescriptorsReader * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumDescr )( 
            ICC_SystemDescriptorsReader * This,
            /* [retval][out] */ INT *pNumDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            ICC_SystemDescriptorsReader * This,
            /* [retval][out] */ DWORD *pcbSize);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICC_SystemDescriptorsReader * This,
            /* [in] */ INT dwDescrIndex,
            /* [retval][out] */ CC_SYSDESCR *pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            ICC_SystemDescriptorsReader * This,
            /* [in] */ MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,
            /* [defaultvalue][in] */ INT idxSearchFrom,
            /* [retval][out] */ INT *pDescrIndex);
        
        HRESULT ( STDMETHODCALLTYPE *StoreToBuffer )( 
            ICC_SystemDescriptorsReader * This,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_SystemDescriptorsReaderVtbl;

    interface ICC_SystemDescriptorsReader
    {
        CONST_VTBL struct ICC_SystemDescriptorsReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SystemDescriptorsReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SystemDescriptorsReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SystemDescriptorsReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SystemDescriptorsReader_get_NumDescr(This,pNumDescr)	\
    ( (This)->lpVtbl -> get_NumDescr(This,pNumDescr) ) 

#define ICC_SystemDescriptorsReader_get_Size(This,pcbSize)	\
    ( (This)->lpVtbl -> get_Size(This,pcbSize) ) 

#define ICC_SystemDescriptorsReader_Get(This,dwDescrIndex,pDescr)	\
    ( (This)->lpVtbl -> Get(This,dwDescrIndex,pDescr) ) 

#define ICC_SystemDescriptorsReader_IndexOf(This,DescrCode,idxSearchFrom,pDescrIndex)	\
    ( (This)->lpVtbl -> IndexOf(This,DescrCode,idxSearchFrom,pDescrIndex) ) 

#define ICC_SystemDescriptorsReader_StoreToBuffer(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> StoreToBuffer(This,pbData,cbBufSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SystemDescriptorsReader_INTERFACE_DEFINED__ */


#ifndef __ICC_SystemDescriptorsManager_INTERFACE_DEFINED__
#define __ICC_SystemDescriptorsManager_INTERFACE_DEFINED__

/* interface ICC_SystemDescriptorsManager */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SystemDescriptorsManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001fff-be08-11dc-aa88-005056c00008")
    ICC_SystemDescriptorsManager : public ICC_SystemDescriptorsReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,
            /* [size_is][in] */ BYTE *pbData,
            /* [in] */ DWORD cbDescrSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ INT dwDescrNumber) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CopyFrom( 
            /* [in] */ ICC_SystemDescriptorsReader *pSrc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddFromBuffer( 
            /* [size_is][in] */ BYTE *pbData,
            /* [in] */ DWORD cbSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SystemDescriptorsManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SystemDescriptorsManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SystemDescriptorsManager * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumDescr )( 
            ICC_SystemDescriptorsManager * This,
            /* [retval][out] */ INT *pNumDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            ICC_SystemDescriptorsManager * This,
            /* [retval][out] */ DWORD *pcbSize);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ INT dwDescrIndex,
            /* [retval][out] */ CC_SYSDESCR *pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,
            /* [defaultvalue][in] */ INT idxSearchFrom,
            /* [retval][out] */ INT *pDescrIndex);
        
        HRESULT ( STDMETHODCALLTYPE *StoreToBuffer )( 
            ICC_SystemDescriptorsManager * This,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbBufSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,
            /* [size_is][in] */ BYTE *pbData,
            /* [in] */ DWORD cbDescrSize);
        
        HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ INT dwDescrNumber);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_SystemDescriptorsManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CopyFrom )( 
            ICC_SystemDescriptorsManager * This,
            /* [in] */ ICC_SystemDescriptorsReader *pSrc);
        
        HRESULT ( STDMETHODCALLTYPE *AddFromBuffer )( 
            ICC_SystemDescriptorsManager * This,
            /* [size_is][in] */ BYTE *pbData,
            /* [in] */ DWORD cbSize);
        
        END_INTERFACE
    } ICC_SystemDescriptorsManagerVtbl;

    interface ICC_SystemDescriptorsManager
    {
        CONST_VTBL struct ICC_SystemDescriptorsManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SystemDescriptorsManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SystemDescriptorsManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SystemDescriptorsManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SystemDescriptorsManager_get_NumDescr(This,pNumDescr)	\
    ( (This)->lpVtbl -> get_NumDescr(This,pNumDescr) ) 

#define ICC_SystemDescriptorsManager_get_Size(This,pcbSize)	\
    ( (This)->lpVtbl -> get_Size(This,pcbSize) ) 

#define ICC_SystemDescriptorsManager_Get(This,dwDescrIndex,pDescr)	\
    ( (This)->lpVtbl -> Get(This,dwDescrIndex,pDescr) ) 

#define ICC_SystemDescriptorsManager_IndexOf(This,DescrCode,idxSearchFrom,pDescrIndex)	\
    ( (This)->lpVtbl -> IndexOf(This,DescrCode,idxSearchFrom,pDescrIndex) ) 

#define ICC_SystemDescriptorsManager_StoreToBuffer(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> StoreToBuffer(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_SystemDescriptorsManager_Add(This,DescrCode,pbData,cbDescrSize)	\
    ( (This)->lpVtbl -> Add(This,DescrCode,pbData,cbDescrSize) ) 

#define ICC_SystemDescriptorsManager_Remove(This,dwDescrNumber)	\
    ( (This)->lpVtbl -> Remove(This,dwDescrNumber) ) 

#define ICC_SystemDescriptorsManager_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define ICC_SystemDescriptorsManager_CopyFrom(This,pSrc)	\
    ( (This)->lpVtbl -> CopyFrom(This,pSrc) ) 

#define ICC_SystemDescriptorsManager_AddFromBuffer(This,pbData,cbSize)	\
    ( (This)->lpVtbl -> AddFromBuffer(This,pbData,cbSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SystemDescriptorsManager_INTERFACE_DEFINED__ */


#ifndef __ICC_PES_Info_INTERFACE_DEFINED__
#define __ICC_PES_Info_INTERFACE_DEFINED__

/* interface ICC_PES_Info */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_PES_Info;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001801-be08-11dc-aa88-005056c00008")
    ICC_PES_Info : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_PES_Info0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_PES_Info0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ BYTE *__MIDL__ICC_PES_Info0002) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BasePTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_PES_Info0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ScramblingControl( 
            /* [retval][out] */ DWORD *__MIDL__ICC_PES_Info0004) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PriorityFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0006) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AdditionalCopyInfo( 
            /* [retval][out] */ BYTE *__MIDL__ICC_PES_Info0008) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_PES_Info0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketSize( 
            /* [retval][out] */ INT *__MIDL__ICC_PES_Info0010) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketHeaderSize( 
            /* [retval][out] */ DWORD *__MIDL__ICC_PES_Info0011) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_PES_InfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_PES_Info * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_PES_Info * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_PES_Info * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_PES_Info * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_PES_Info * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_PES_Info * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PID )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_PES_Info0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_PES_Info0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_PES_Info * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_PES_Info0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_PES_Info0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScramblingControl )( 
            ICC_PES_Info * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_PES_Info0004);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PriorityFlag )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0006);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_PES_Info * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_PES_Info0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalCopyInfo )( 
            ICC_PES_Info * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_PES_Info0008);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_PES_Info * This,
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_PES_Info0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketSize )( 
            ICC_PES_Info * This,
            /* [retval][out] */ INT *__MIDL__ICC_PES_Info0010);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketHeaderSize )( 
            ICC_PES_Info * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_PES_Info0011);
        
        END_INTERFACE
    } ICC_PES_InfoVtbl;

    interface ICC_PES_Info
    {
        CONST_VTBL struct ICC_PES_InfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_PES_Info_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_PES_Info_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_PES_Info_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_PES_Info_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_PES_Info_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_PES_Info_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_PES_Info_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_PES_Info_get_PID(This,__MIDL__ICC_PES_Info0000)	\
    ( (This)->lpVtbl -> get_PID(This,__MIDL__ICC_PES_Info0000) ) 

#define ICC_PES_Info_get_StreamType(This,__MIDL__ICC_PES_Info0001)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_PES_Info0001) ) 

#define ICC_PES_Info_get_StreamID(This,__MIDL__ICC_PES_Info0002)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_PES_Info0002) ) 

#define ICC_PES_Info_get_BasePTS(This,__MIDL__ICC_PES_Info0003)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_PES_Info0003) ) 

#define ICC_PES_Info_get_ScramblingControl(This,__MIDL__ICC_PES_Info0004)	\
    ( (This)->lpVtbl -> get_ScramblingControl(This,__MIDL__ICC_PES_Info0004) ) 

#define ICC_PES_Info_get_PriorityFlag(This,__MIDL__ICC_PES_Info0005)	\
    ( (This)->lpVtbl -> get_PriorityFlag(This,__MIDL__ICC_PES_Info0005) ) 

#define ICC_PES_Info_get_OriginalFlag(This,__MIDL__ICC_PES_Info0006)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,__MIDL__ICC_PES_Info0006) ) 

#define ICC_PES_Info_get_CrcProtected(This,__MIDL__ICC_PES_Info0007)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_PES_Info0007) ) 

#define ICC_PES_Info_get_AdditionalCopyInfo(This,__MIDL__ICC_PES_Info0008)	\
    ( (This)->lpVtbl -> get_AdditionalCopyInfo(This,__MIDL__ICC_PES_Info0008) ) 

#define ICC_PES_Info_get_Descriptors(This,__MIDL__ICC_PES_Info0009)	\
    ( (This)->lpVtbl -> get_Descriptors(This,__MIDL__ICC_PES_Info0009) ) 

#define ICC_PES_Info_get_PacketSize(This,__MIDL__ICC_PES_Info0010)	\
    ( (This)->lpVtbl -> get_PacketSize(This,__MIDL__ICC_PES_Info0010) ) 

#define ICC_PES_Info_get_PacketHeaderSize(This,__MIDL__ICC_PES_Info0011)	\
    ( (This)->lpVtbl -> get_PacketHeaderSize(This,__MIDL__ICC_PES_Info0011) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_PES_Info_INTERFACE_DEFINED__ */


#ifndef __ICC_ProgramInfo_INTERFACE_DEFINED__
#define __ICC_ProgramInfo_INTERFACE_DEFINED__

/* interface ICC_ProgramInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ProgramInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001802-be08-11dc-aa88-005056c00008")
    ICC_ProgramInfo : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNum( 
            /* [retval][out] */ WORD *__MIDL__ICC_ProgramInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_ProgramInfo0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_ProgramInfo0002) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_ProgramInfo0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumStreams( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramInfo0004) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStream( 
            /* [in] */ DWORD StreamNumber,
            /* [retval][out] */ ICC_PES_Info **__MIDL__ICC_ProgramInfo0005) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ProgramInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ProgramInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ProgramInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ProgramInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ProgramInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ProgramInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ProgramInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNum )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ WORD *__MIDL__ICC_ProgramInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_PID )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_ProgramInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_PID )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_ProgramInfo0002);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_ProgramInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumStreams )( 
            ICC_ProgramInfo * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramInfo0004);
        
        HRESULT ( STDMETHODCALLTYPE *GetStream )( 
            ICC_ProgramInfo * This,
            /* [in] */ DWORD StreamNumber,
            /* [retval][out] */ ICC_PES_Info **__MIDL__ICC_ProgramInfo0005);
        
        END_INTERFACE
    } ICC_ProgramInfoVtbl;

    interface ICC_ProgramInfo
    {
        CONST_VTBL struct ICC_ProgramInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ProgramInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ProgramInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ProgramInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ProgramInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ProgramInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ProgramInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ProgramInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ProgramInfo_get_ProgNum(This,__MIDL__ICC_ProgramInfo0000)	\
    ( (This)->lpVtbl -> get_ProgNum(This,__MIDL__ICC_ProgramInfo0000) ) 

#define ICC_ProgramInfo_get_PMT_PID(This,__MIDL__ICC_ProgramInfo0001)	\
    ( (This)->lpVtbl -> get_PMT_PID(This,__MIDL__ICC_ProgramInfo0001) ) 

#define ICC_ProgramInfo_get_PCR_PID(This,__MIDL__ICC_ProgramInfo0002)	\
    ( (This)->lpVtbl -> get_PCR_PID(This,__MIDL__ICC_ProgramInfo0002) ) 

#define ICC_ProgramInfo_get_Descriptors(This,__MIDL__ICC_ProgramInfo0003)	\
    ( (This)->lpVtbl -> get_Descriptors(This,__MIDL__ICC_ProgramInfo0003) ) 

#define ICC_ProgramInfo_get_NumStreams(This,__MIDL__ICC_ProgramInfo0004)	\
    ( (This)->lpVtbl -> get_NumStreams(This,__MIDL__ICC_ProgramInfo0004) ) 

#define ICC_ProgramInfo_GetStream(This,StreamNumber,__MIDL__ICC_ProgramInfo0005)	\
    ( (This)->lpVtbl -> GetStream(This,StreamNumber,__MIDL__ICC_ProgramInfo0005) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ProgramInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MultiplexedStreamInfo_INTERFACE_DEFINED__
#define __ICC_MultiplexedStreamInfo_INTERFACE_DEFINED__

/* interface ICC_MultiplexedStreamInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MultiplexedStreamInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001803-be08-11dc-aa88-005056c00008")
    ICC_MultiplexedStreamInfo : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_MULTIPLEXED_STREAM_TYPE *__MIDL__ICC_MultiplexedStreamInfo0000) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_MultiplexedStreamInfo0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumPrograms( 
            /* [retval][out] */ DWORD *__MIDL__ICC_MultiplexedStreamInfo0002) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProgram( 
            /* [in] */ DWORD ProgramIdx,
            /* [retval][out] */ ICC_ProgramInfo **__MIDL__ICC_MultiplexedStreamInfo0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ WORD *__MIDL__ICC_MultiplexedStreamInfo0004) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MultiplexedStreamInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MultiplexedStreamInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MultiplexedStreamInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MultiplexedStreamInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MultiplexedStreamInfo * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MultiplexedStreamInfo * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MultiplexedStreamInfo * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MultiplexedStreamInfo * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_MultiplexedStreamInfo * This,
            /* [retval][out] */ CC_MULTIPLEXED_STREAM_TYPE *__MIDL__ICC_MultiplexedStreamInfo0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MultiplexedStreamInfo * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_MultiplexedStreamInfo0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumPrograms )( 
            ICC_MultiplexedStreamInfo * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_MultiplexedStreamInfo0002);
        
        HRESULT ( STDMETHODCALLTYPE *GetProgram )( 
            ICC_MultiplexedStreamInfo * This,
            /* [in] */ DWORD ProgramIdx,
            /* [retval][out] */ ICC_ProgramInfo **__MIDL__ICC_MultiplexedStreamInfo0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_MultiplexedStreamInfo * This,
            /* [retval][out] */ WORD *__MIDL__ICC_MultiplexedStreamInfo0004);
        
        END_INTERFACE
    } ICC_MultiplexedStreamInfoVtbl;

    interface ICC_MultiplexedStreamInfo
    {
        CONST_VTBL struct ICC_MultiplexedStreamInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MultiplexedStreamInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MultiplexedStreamInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MultiplexedStreamInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MultiplexedStreamInfo_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MultiplexedStreamInfo_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MultiplexedStreamInfo_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MultiplexedStreamInfo_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MultiplexedStreamInfo_get_StreamType(This,__MIDL__ICC_MultiplexedStreamInfo0000)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_MultiplexedStreamInfo0000) ) 

#define ICC_MultiplexedStreamInfo_get_BitRate(This,__MIDL__ICC_MultiplexedStreamInfo0001)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_MultiplexedStreamInfo0001) ) 

#define ICC_MultiplexedStreamInfo_get_NumPrograms(This,__MIDL__ICC_MultiplexedStreamInfo0002)	\
    ( (This)->lpVtbl -> get_NumPrograms(This,__MIDL__ICC_MultiplexedStreamInfo0002) ) 

#define ICC_MultiplexedStreamInfo_GetProgram(This,ProgramIdx,__MIDL__ICC_MultiplexedStreamInfo0003)	\
    ( (This)->lpVtbl -> GetProgram(This,ProgramIdx,__MIDL__ICC_MultiplexedStreamInfo0003) ) 

#define ICC_MultiplexedStreamInfo_get_StreamID(This,__MIDL__ICC_MultiplexedStreamInfo0004)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_MultiplexedStreamInfo0004) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MultiplexedStreamInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_BaseMultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_BaseMultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_BaseMultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_BaseMultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001A01-be08-11dc-aa88-005056c00008")
    ICC_BaseMultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_MULTIPLEXED_STREAM_TYPE *t) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamType( 
            /* [in] */ CC_MULTIPLEXED_STREAM_TYPE t) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *m) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE m) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE b) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrailingAlignment( 
            /* [retval][out] */ CC_UINT *a) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrailingAlignment( 
            /* [in] */ CC_UINT a) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialPTS( 
            /* [retval][out] */ CC_TIME *t) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialPTS( 
            /* [in] */ CC_TIME t) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OutputPolicy( 
            /* [retval][out] */ CC_MUX_OUTPUT_POLICY *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OutputPolicy( 
            /* [in] */ CC_MUX_OUTPUT_POLICY p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MaxOutputBlkSize( 
            /* [retval][out] */ CC_UINT *s) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MaxOutputBlkSize( 
            /* [in] */ CC_UINT s) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AsyncInputMode( 
            /* [retval][out] */ CC_BOOL *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AsyncInputMode( 
            /* [in] */ CC_BOOL b) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BaseMultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_BaseMultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_BaseMultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_MULTIPLEXED_STREAM_TYPE *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_MULTIPLEXED_STREAM_TYPE t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *m);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_BITRATE_MODE m);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_BITRATE b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingAlignment )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_UINT *a);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingAlignment )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_UINT a);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialPTS )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_TIME *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialPTS )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_TIME t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputPolicy )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_MUX_OUTPUT_POLICY *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputPolicy )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_MUX_OUTPUT_POLICY p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxOutputBlkSize )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_UINT *s);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaxOutputBlkSize )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_UINT s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AsyncInputMode )( 
            ICC_BaseMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AsyncInputMode )( 
            ICC_BaseMultiplexerSettings * This,
            /* [in] */ CC_BOOL b);
        
        END_INTERFACE
    } ICC_BaseMultiplexerSettingsVtbl;

    interface ICC_BaseMultiplexerSettings
    {
        CONST_VTBL struct ICC_BaseMultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_BaseMultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_BaseMultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_BaseMultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_BaseMultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_BaseMultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_BaseMultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_BaseMultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_BaseMultiplexerSettings_get_StreamType(This,t)	\
    ( (This)->lpVtbl -> get_StreamType(This,t) ) 

#define ICC_BaseMultiplexerSettings_put_StreamType(This,t)	\
    ( (This)->lpVtbl -> put_StreamType(This,t) ) 

#define ICC_BaseMultiplexerSettings_get_RateMode(This,m)	\
    ( (This)->lpVtbl -> get_RateMode(This,m) ) 

#define ICC_BaseMultiplexerSettings_put_RateMode(This,m)	\
    ( (This)->lpVtbl -> put_RateMode(This,m) ) 

#define ICC_BaseMultiplexerSettings_get_BitRate(This,b)	\
    ( (This)->lpVtbl -> get_BitRate(This,b) ) 

#define ICC_BaseMultiplexerSettings_put_BitRate(This,b)	\
    ( (This)->lpVtbl -> put_BitRate(This,b) ) 

#define ICC_BaseMultiplexerSettings_get_TrailingAlignment(This,a)	\
    ( (This)->lpVtbl -> get_TrailingAlignment(This,a) ) 

#define ICC_BaseMultiplexerSettings_put_TrailingAlignment(This,a)	\
    ( (This)->lpVtbl -> put_TrailingAlignment(This,a) ) 

#define ICC_BaseMultiplexerSettings_get_InitialPTS(This,t)	\
    ( (This)->lpVtbl -> get_InitialPTS(This,t) ) 

#define ICC_BaseMultiplexerSettings_put_InitialPTS(This,t)	\
    ( (This)->lpVtbl -> put_InitialPTS(This,t) ) 

#define ICC_BaseMultiplexerSettings_get_OutputPolicy(This,p)	\
    ( (This)->lpVtbl -> get_OutputPolicy(This,p) ) 

#define ICC_BaseMultiplexerSettings_put_OutputPolicy(This,p)	\
    ( (This)->lpVtbl -> put_OutputPolicy(This,p) ) 

#define ICC_BaseMultiplexerSettings_get_MaxOutputBlkSize(This,s)	\
    ( (This)->lpVtbl -> get_MaxOutputBlkSize(This,s) ) 

#define ICC_BaseMultiplexerSettings_put_MaxOutputBlkSize(This,s)	\
    ( (This)->lpVtbl -> put_MaxOutputBlkSize(This,s) ) 

#define ICC_BaseMultiplexerSettings_get_AsyncInputMode(This,b)	\
    ( (This)->lpVtbl -> get_AsyncInputMode(This,b) ) 

#define ICC_BaseMultiplexerSettings_put_AsyncInputMode(This,b)	\
    ( (This)->lpVtbl -> put_AsyncInputMode(This,b) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_BaseMultiplexerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_BaseMultiplexerPinSettings_INTERFACE_DEFINED__
#define __ICC_BaseMultiplexerPinSettings_INTERFACE_DEFINED__

/* interface ICC_BaseMultiplexerPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_BaseMultiplexerPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001A02-be08-11dc-aa88-005056c00008")
    ICC_BaseMultiplexerPinSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamType( 
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_BaseMultiplexerPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamType( 
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE __MIDL__ICC_BaseMultiplexerPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ BYTE *__MIDL__ICC_BaseMultiplexerPinSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamID( 
            /* [in] */ BYTE __MIDL__ICC_BaseMultiplexerPinSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BasePTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_BaseMultiplexerPinSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BasePTS( 
            /* [in] */ CC_TIME __MIDL__ICC_BaseMultiplexerPinSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_BaseMultiplexerPinSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_BaseMultiplexerPinSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_BaseMultiplexerPinSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameRate( 
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_BaseMultiplexerPinSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataAlignPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_BaseMultiplexerPinSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DataAlignPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_BaseMultiplexerPinSettings0013) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_BaseMultiplexerPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_BaseMultiplexerPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_BaseMultiplexerPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_BaseMultiplexerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE __MIDL__ICC_BaseMultiplexerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_BaseMultiplexerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_BaseMultiplexerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_BaseMultiplexerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_BaseMultiplexerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_BaseMultiplexerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_BaseMultiplexerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_BaseMultiplexerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_BaseMultiplexerPinSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataAlignPeriod )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_BaseMultiplexerPinSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataAlignPeriod )( 
            ICC_BaseMultiplexerPinSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_BaseMultiplexerPinSettings0013);
        
        END_INTERFACE
    } ICC_BaseMultiplexerPinSettingsVtbl;

    interface ICC_BaseMultiplexerPinSettings
    {
        CONST_VTBL struct ICC_BaseMultiplexerPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_BaseMultiplexerPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_BaseMultiplexerPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_BaseMultiplexerPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_BaseMultiplexerPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_BaseMultiplexerPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_BaseMultiplexerPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_BaseMultiplexerPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_BaseMultiplexerPinSettings_get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000) ) 

#define ICC_BaseMultiplexerPinSettings_put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001)	\
    ( (This)->lpVtbl -> put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001) ) 

#define ICC_BaseMultiplexerPinSettings_get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002) ) 

#define ICC_BaseMultiplexerPinSettings_put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003) ) 

#define ICC_BaseMultiplexerPinSettings_get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004) ) 

#define ICC_BaseMultiplexerPinSettings_put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005) ) 

#define ICC_BaseMultiplexerPinSettings_get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006) ) 

#define ICC_BaseMultiplexerPinSettings_put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007) ) 

#define ICC_BaseMultiplexerPinSettings_get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008) ) 

#define ICC_BaseMultiplexerPinSettings_put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009) ) 

#define ICC_BaseMultiplexerPinSettings_get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010) ) 

#define ICC_BaseMultiplexerPinSettings_put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011) ) 

#define ICC_BaseMultiplexerPinSettings_get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012)	\
    ( (This)->lpVtbl -> get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012) ) 

#define ICC_BaseMultiplexerPinSettings_put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013)	\
    ( (This)->lpVtbl -> put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_BaseMultiplexerPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_SystemMuxerPinSettings_INTERFACE_DEFINED__
#define __ICC_SystemMuxerPinSettings_INTERFACE_DEFINED__

/* interface ICC_SystemMuxerPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SystemMuxerPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001B11-be08-11dc-aa88-005056c00008")
    ICC_SystemMuxerPinSettings : public ICC_BaseMultiplexerPinSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketSize( 
            /* [retval][out] */ INT *__MIDL__ICC_SystemMuxerPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketSize( 
            /* [in] */ INT __MIDL__ICC_SystemMuxerPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketHeaderSize( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketHeaderSize( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketAlignment( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PayloadAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PayloadAlignment( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0007) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SystemMuxerPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SystemMuxerPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SystemMuxerPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_BaseMultiplexerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE __MIDL__ICC_BaseMultiplexerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_BaseMultiplexerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_BaseMultiplexerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_BaseMultiplexerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_BaseMultiplexerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_BaseMultiplexerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_BaseMultiplexerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_BaseMultiplexerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_BaseMultiplexerPinSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataAlignPeriod )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_BaseMultiplexerPinSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataAlignPeriod )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_BaseMultiplexerPinSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketSize )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ INT *__MIDL__ICC_SystemMuxerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketSize )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ INT __MIDL__ICC_SystemMuxerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketHeaderSize )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketHeaderSize )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketAlignment )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketAlignment )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PayloadAlignment )( 
            ICC_SystemMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PayloadAlignment )( 
            ICC_SystemMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerPinSettings0007);
        
        END_INTERFACE
    } ICC_SystemMuxerPinSettingsVtbl;

    interface ICC_SystemMuxerPinSettings
    {
        CONST_VTBL struct ICC_SystemMuxerPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SystemMuxerPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SystemMuxerPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SystemMuxerPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SystemMuxerPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_SystemMuxerPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_SystemMuxerPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_SystemMuxerPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_SystemMuxerPinSettings_get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000) ) 

#define ICC_SystemMuxerPinSettings_put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001)	\
    ( (This)->lpVtbl -> put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001) ) 

#define ICC_SystemMuxerPinSettings_get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002) ) 

#define ICC_SystemMuxerPinSettings_put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003) ) 

#define ICC_SystemMuxerPinSettings_get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004) ) 

#define ICC_SystemMuxerPinSettings_put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005) ) 

#define ICC_SystemMuxerPinSettings_get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006) ) 

#define ICC_SystemMuxerPinSettings_put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007) ) 

#define ICC_SystemMuxerPinSettings_get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008) ) 

#define ICC_SystemMuxerPinSettings_put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009) ) 

#define ICC_SystemMuxerPinSettings_get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010) ) 

#define ICC_SystemMuxerPinSettings_put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011) ) 

#define ICC_SystemMuxerPinSettings_get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012)	\
    ( (This)->lpVtbl -> get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012) ) 

#define ICC_SystemMuxerPinSettings_put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013)	\
    ( (This)->lpVtbl -> put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013) ) 


#define ICC_SystemMuxerPinSettings_get_PacketSize(This,__MIDL__ICC_SystemMuxerPinSettings0000)	\
    ( (This)->lpVtbl -> get_PacketSize(This,__MIDL__ICC_SystemMuxerPinSettings0000) ) 

#define ICC_SystemMuxerPinSettings_put_PacketSize(This,__MIDL__ICC_SystemMuxerPinSettings0001)	\
    ( (This)->lpVtbl -> put_PacketSize(This,__MIDL__ICC_SystemMuxerPinSettings0001) ) 

#define ICC_SystemMuxerPinSettings_get_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerPinSettings0002)	\
    ( (This)->lpVtbl -> get_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerPinSettings0002) ) 

#define ICC_SystemMuxerPinSettings_put_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerPinSettings0003)	\
    ( (This)->lpVtbl -> put_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerPinSettings0003) ) 

#define ICC_SystemMuxerPinSettings_get_PacketAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0004)	\
    ( (This)->lpVtbl -> get_PacketAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0004) ) 

#define ICC_SystemMuxerPinSettings_put_PacketAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0005)	\
    ( (This)->lpVtbl -> put_PacketAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0005) ) 

#define ICC_SystemMuxerPinSettings_get_PayloadAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0006)	\
    ( (This)->lpVtbl -> get_PayloadAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0006) ) 

#define ICC_SystemMuxerPinSettings_put_PayloadAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0007)	\
    ( (This)->lpVtbl -> put_PayloadAlignment(This,__MIDL__ICC_SystemMuxerPinSettings0007) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SystemMuxerPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_SystemMuxerSettings_INTERFACE_DEFINED__
#define __ICC_SystemMuxerSettings_INTERFACE_DEFINED__

/* interface ICC_SystemMuxerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_SystemMuxerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001B01-be08-11dc-aa88-005056c00008")
    ICC_SystemMuxerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_SystemMuxerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_SystemMuxerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_SystemMuxerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_SystemMuxerSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrailingAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrailingAlignment( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PackHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_SystemMuxerSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PackHeaderPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_SystemMuxerSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SystemHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_SystemMuxerSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SystemHeaderPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_SystemMuxerSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandaloneSystemHeader( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_SystemMuxerSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StandaloneSystemHeader( 
            /* [in] */ CC_BOOL __MIDL__ICC_SystemMuxerSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SuppressIsoEndCode( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_SystemMuxerSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SuppressIsoEndCode( 
            /* [in] */ CC_BOOL __MIDL__ICC_SystemMuxerSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketSize( 
            /* [retval][out] */ INT *__MIDL__ICC_SystemMuxerSettings0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketSize( 
            /* [in] */ INT __MIDL__ICC_SystemMuxerSettings0015) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketHeaderSize( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0016) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketHeaderSize( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0017) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0018) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketAlignment( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0019) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PayloadAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0020) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PayloadAlignment( 
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0021) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_SystemMuxerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_SystemMuxerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_SystemMuxerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_SystemMuxerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_SystemMuxerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_SystemMuxerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_SystemMuxerSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PackHeaderPeriod )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_SystemMuxerSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PackHeaderPeriod )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_SystemMuxerSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SystemHeaderPeriod )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_SystemMuxerSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SystemHeaderPeriod )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_SystemMuxerSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandaloneSystemHeader )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_SystemMuxerSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StandaloneSystemHeader )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_SystemMuxerSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressIsoEndCode )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_SystemMuxerSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressIsoEndCode )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_SystemMuxerSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketSize )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ INT *__MIDL__ICC_SystemMuxerSettings0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketSize )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ INT __MIDL__ICC_SystemMuxerSettings0015);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketHeaderSize )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0016);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketHeaderSize )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0017);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0018);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0019);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PayloadAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_SystemMuxerSettings0020);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PayloadAlignment )( 
            ICC_SystemMuxerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_SystemMuxerSettings0021);
        
        END_INTERFACE
    } ICC_SystemMuxerSettingsVtbl;

    interface ICC_SystemMuxerSettings
    {
        CONST_VTBL struct ICC_SystemMuxerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_SystemMuxerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_SystemMuxerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_SystemMuxerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_SystemMuxerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_SystemMuxerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_SystemMuxerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_SystemMuxerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_SystemMuxerSettings_get_RateMode(This,__MIDL__ICC_SystemMuxerSettings0000)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_SystemMuxerSettings0000) ) 

#define ICC_SystemMuxerSettings_put_RateMode(This,__MIDL__ICC_SystemMuxerSettings0001)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_SystemMuxerSettings0001) ) 

#define ICC_SystemMuxerSettings_get_BitRate(This,__MIDL__ICC_SystemMuxerSettings0002)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_SystemMuxerSettings0002) ) 

#define ICC_SystemMuxerSettings_put_BitRate(This,__MIDL__ICC_SystemMuxerSettings0003)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_SystemMuxerSettings0003) ) 

#define ICC_SystemMuxerSettings_get_TrailingAlignment(This,__MIDL__ICC_SystemMuxerSettings0004)	\
    ( (This)->lpVtbl -> get_TrailingAlignment(This,__MIDL__ICC_SystemMuxerSettings0004) ) 

#define ICC_SystemMuxerSettings_put_TrailingAlignment(This,__MIDL__ICC_SystemMuxerSettings0005)	\
    ( (This)->lpVtbl -> put_TrailingAlignment(This,__MIDL__ICC_SystemMuxerSettings0005) ) 

#define ICC_SystemMuxerSettings_get_PackHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0006)	\
    ( (This)->lpVtbl -> get_PackHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0006) ) 

#define ICC_SystemMuxerSettings_put_PackHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0007)	\
    ( (This)->lpVtbl -> put_PackHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0007) ) 

#define ICC_SystemMuxerSettings_get_SystemHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0008)	\
    ( (This)->lpVtbl -> get_SystemHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0008) ) 

#define ICC_SystemMuxerSettings_put_SystemHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0009)	\
    ( (This)->lpVtbl -> put_SystemHeaderPeriod(This,__MIDL__ICC_SystemMuxerSettings0009) ) 

#define ICC_SystemMuxerSettings_get_StandaloneSystemHeader(This,__MIDL__ICC_SystemMuxerSettings0010)	\
    ( (This)->lpVtbl -> get_StandaloneSystemHeader(This,__MIDL__ICC_SystemMuxerSettings0010) ) 

#define ICC_SystemMuxerSettings_put_StandaloneSystemHeader(This,__MIDL__ICC_SystemMuxerSettings0011)	\
    ( (This)->lpVtbl -> put_StandaloneSystemHeader(This,__MIDL__ICC_SystemMuxerSettings0011) ) 

#define ICC_SystemMuxerSettings_get_SuppressIsoEndCode(This,__MIDL__ICC_SystemMuxerSettings0012)	\
    ( (This)->lpVtbl -> get_SuppressIsoEndCode(This,__MIDL__ICC_SystemMuxerSettings0012) ) 

#define ICC_SystemMuxerSettings_put_SuppressIsoEndCode(This,__MIDL__ICC_SystemMuxerSettings0013)	\
    ( (This)->lpVtbl -> put_SuppressIsoEndCode(This,__MIDL__ICC_SystemMuxerSettings0013) ) 

#define ICC_SystemMuxerSettings_get_PacketSize(This,__MIDL__ICC_SystemMuxerSettings0014)	\
    ( (This)->lpVtbl -> get_PacketSize(This,__MIDL__ICC_SystemMuxerSettings0014) ) 

#define ICC_SystemMuxerSettings_put_PacketSize(This,__MIDL__ICC_SystemMuxerSettings0015)	\
    ( (This)->lpVtbl -> put_PacketSize(This,__MIDL__ICC_SystemMuxerSettings0015) ) 

#define ICC_SystemMuxerSettings_get_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerSettings0016)	\
    ( (This)->lpVtbl -> get_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerSettings0016) ) 

#define ICC_SystemMuxerSettings_put_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerSettings0017)	\
    ( (This)->lpVtbl -> put_PacketHeaderSize(This,__MIDL__ICC_SystemMuxerSettings0017) ) 

#define ICC_SystemMuxerSettings_get_PacketAlignment(This,__MIDL__ICC_SystemMuxerSettings0018)	\
    ( (This)->lpVtbl -> get_PacketAlignment(This,__MIDL__ICC_SystemMuxerSettings0018) ) 

#define ICC_SystemMuxerSettings_put_PacketAlignment(This,__MIDL__ICC_SystemMuxerSettings0019)	\
    ( (This)->lpVtbl -> put_PacketAlignment(This,__MIDL__ICC_SystemMuxerSettings0019) ) 

#define ICC_SystemMuxerSettings_get_PayloadAlignment(This,__MIDL__ICC_SystemMuxerSettings0020)	\
    ( (This)->lpVtbl -> get_PayloadAlignment(This,__MIDL__ICC_SystemMuxerSettings0020) ) 

#define ICC_SystemMuxerSettings_put_PayloadAlignment(This,__MIDL__ICC_SystemMuxerSettings0021)	\
    ( (This)->lpVtbl -> put_PayloadAlignment(This,__MIDL__ICC_SystemMuxerSettings0021) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_SystemMuxerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_ProgramMuxerPinSettings_INTERFACE_DEFINED__
#define __ICC_ProgramMuxerPinSettings_INTERFACE_DEFINED__

/* interface ICC_ProgramMuxerPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ProgramMuxerPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001B12-be08-11dc-aa88-005056c00008")
    ICC_ProgramMuxerPinSettings : public ICC_BaseMultiplexerPinSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ScramblingControl( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ScramblingControl( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PriorityFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PriorityFlag( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginalFlag( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AdditionalCopyInfo( 
            /* [retval][out] */ BYTE *__MIDL__ICC_ProgramMuxerPinSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AdditionalCopyInfo( 
            /* [in] */ BYTE __MIDL__ICC_ProgramMuxerPinSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_ProgramMuxerPinSettings0010) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketSize( 
            /* [retval][out] */ INT *__MIDL__ICC_ProgramMuxerPinSettings0011) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketSize( 
            /* [in] */ INT __MIDL__ICC_ProgramMuxerPinSettings0012) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketHeaderSize( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0013) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketHeaderSize( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0014) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0015) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketAlignment( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0016) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PayloadAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0017) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PayloadAlignment( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0018) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_HideFromSystemHeader( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0019) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HideFromSystemHeader( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0020) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ProgramMuxerPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ProgramMuxerPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ProgramMuxerPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_BaseMultiplexerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE __MIDL__ICC_BaseMultiplexerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_BaseMultiplexerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_BaseMultiplexerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_BaseMultiplexerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_BaseMultiplexerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_BaseMultiplexerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_BaseMultiplexerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_BaseMultiplexerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_BaseMultiplexerPinSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataAlignPeriod )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_BaseMultiplexerPinSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataAlignPeriod )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_BaseMultiplexerPinSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScramblingControl )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScramblingControl )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PriorityFlag )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PriorityFlag )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginalFlag )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalCopyInfo )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_ProgramMuxerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AdditionalCopyInfo )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_ProgramMuxerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ ICC_SystemDescriptorsReader **__MIDL__ICC_ProgramMuxerPinSettings0010);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketSize )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ INT *__MIDL__ICC_ProgramMuxerPinSettings0011);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketSize )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ INT __MIDL__ICC_ProgramMuxerPinSettings0012);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketHeaderSize )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0013);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketHeaderSize )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0014);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketAlignment )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0015);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketAlignment )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0016);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PayloadAlignment )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMuxerPinSettings0017);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PayloadAlignment )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMuxerPinSettings0018);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HideFromSystemHeader )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMuxerPinSettings0019);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HideFromSystemHeader )( 
            ICC_ProgramMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMuxerPinSettings0020);
        
        END_INTERFACE
    } ICC_ProgramMuxerPinSettingsVtbl;

    interface ICC_ProgramMuxerPinSettings
    {
        CONST_VTBL struct ICC_ProgramMuxerPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ProgramMuxerPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ProgramMuxerPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ProgramMuxerPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ProgramMuxerPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ProgramMuxerPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ProgramMuxerPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ProgramMuxerPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ProgramMuxerPinSettings_get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000) ) 

#define ICC_ProgramMuxerPinSettings_put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001)	\
    ( (This)->lpVtbl -> put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001) ) 

#define ICC_ProgramMuxerPinSettings_get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002) ) 

#define ICC_ProgramMuxerPinSettings_put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003) ) 

#define ICC_ProgramMuxerPinSettings_get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004) ) 

#define ICC_ProgramMuxerPinSettings_put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005) ) 

#define ICC_ProgramMuxerPinSettings_get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006) ) 

#define ICC_ProgramMuxerPinSettings_put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007) ) 

#define ICC_ProgramMuxerPinSettings_get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008) ) 

#define ICC_ProgramMuxerPinSettings_put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009) ) 

#define ICC_ProgramMuxerPinSettings_get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010) ) 

#define ICC_ProgramMuxerPinSettings_put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011) ) 

#define ICC_ProgramMuxerPinSettings_get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012)	\
    ( (This)->lpVtbl -> get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012) ) 

#define ICC_ProgramMuxerPinSettings_put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013)	\
    ( (This)->lpVtbl -> put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013) ) 


#define ICC_ProgramMuxerPinSettings_get_ScramblingControl(This,__MIDL__ICC_ProgramMuxerPinSettings0000)	\
    ( (This)->lpVtbl -> get_ScramblingControl(This,__MIDL__ICC_ProgramMuxerPinSettings0000) ) 

#define ICC_ProgramMuxerPinSettings_put_ScramblingControl(This,__MIDL__ICC_ProgramMuxerPinSettings0001)	\
    ( (This)->lpVtbl -> put_ScramblingControl(This,__MIDL__ICC_ProgramMuxerPinSettings0001) ) 

#define ICC_ProgramMuxerPinSettings_get_PriorityFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0002)	\
    ( (This)->lpVtbl -> get_PriorityFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0002) ) 

#define ICC_ProgramMuxerPinSettings_put_PriorityFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0003)	\
    ( (This)->lpVtbl -> put_PriorityFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0003) ) 

#define ICC_ProgramMuxerPinSettings_get_OriginalFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0004)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0004) ) 

#define ICC_ProgramMuxerPinSettings_put_OriginalFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0005)	\
    ( (This)->lpVtbl -> put_OriginalFlag(This,__MIDL__ICC_ProgramMuxerPinSettings0005) ) 

#define ICC_ProgramMuxerPinSettings_get_CrcProtected(This,__MIDL__ICC_ProgramMuxerPinSettings0006)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_ProgramMuxerPinSettings0006) ) 

#define ICC_ProgramMuxerPinSettings_put_CrcProtected(This,__MIDL__ICC_ProgramMuxerPinSettings0007)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_ProgramMuxerPinSettings0007) ) 

#define ICC_ProgramMuxerPinSettings_get_AdditionalCopyInfo(This,__MIDL__ICC_ProgramMuxerPinSettings0008)	\
    ( (This)->lpVtbl -> get_AdditionalCopyInfo(This,__MIDL__ICC_ProgramMuxerPinSettings0008) ) 

#define ICC_ProgramMuxerPinSettings_put_AdditionalCopyInfo(This,__MIDL__ICC_ProgramMuxerPinSettings0009)	\
    ( (This)->lpVtbl -> put_AdditionalCopyInfo(This,__MIDL__ICC_ProgramMuxerPinSettings0009) ) 

#define ICC_ProgramMuxerPinSettings_get_Descriptors(This,__MIDL__ICC_ProgramMuxerPinSettings0010)	\
    ( (This)->lpVtbl -> get_Descriptors(This,__MIDL__ICC_ProgramMuxerPinSettings0010) ) 

#define ICC_ProgramMuxerPinSettings_get_PacketSize(This,__MIDL__ICC_ProgramMuxerPinSettings0011)	\
    ( (This)->lpVtbl -> get_PacketSize(This,__MIDL__ICC_ProgramMuxerPinSettings0011) ) 

#define ICC_ProgramMuxerPinSettings_put_PacketSize(This,__MIDL__ICC_ProgramMuxerPinSettings0012)	\
    ( (This)->lpVtbl -> put_PacketSize(This,__MIDL__ICC_ProgramMuxerPinSettings0012) ) 

#define ICC_ProgramMuxerPinSettings_get_PacketHeaderSize(This,__MIDL__ICC_ProgramMuxerPinSettings0013)	\
    ( (This)->lpVtbl -> get_PacketHeaderSize(This,__MIDL__ICC_ProgramMuxerPinSettings0013) ) 

#define ICC_ProgramMuxerPinSettings_put_PacketHeaderSize(This,__MIDL__ICC_ProgramMuxerPinSettings0014)	\
    ( (This)->lpVtbl -> put_PacketHeaderSize(This,__MIDL__ICC_ProgramMuxerPinSettings0014) ) 

#define ICC_ProgramMuxerPinSettings_get_PacketAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0015)	\
    ( (This)->lpVtbl -> get_PacketAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0015) ) 

#define ICC_ProgramMuxerPinSettings_put_PacketAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0016)	\
    ( (This)->lpVtbl -> put_PacketAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0016) ) 

#define ICC_ProgramMuxerPinSettings_get_PayloadAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0017)	\
    ( (This)->lpVtbl -> get_PayloadAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0017) ) 

#define ICC_ProgramMuxerPinSettings_put_PayloadAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0018)	\
    ( (This)->lpVtbl -> put_PayloadAlignment(This,__MIDL__ICC_ProgramMuxerPinSettings0018) ) 

#define ICC_ProgramMuxerPinSettings_get_HideFromSystemHeader(This,__MIDL__ICC_ProgramMuxerPinSettings0019)	\
    ( (This)->lpVtbl -> get_HideFromSystemHeader(This,__MIDL__ICC_ProgramMuxerPinSettings0019) ) 

#define ICC_ProgramMuxerPinSettings_put_HideFromSystemHeader(This,__MIDL__ICC_ProgramMuxerPinSettings0020)	\
    ( (This)->lpVtbl -> put_HideFromSystemHeader(This,__MIDL__ICC_ProgramMuxerPinSettings0020) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ProgramMuxerPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_ProgramMultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_ProgramMultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_ProgramMultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ProgramMultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001B02-be08-11dc-aa88-005056c00008")
    ICC_ProgramMultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_ProgramMultiplexerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_ProgramMultiplexerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_ProgramMultiplexerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_ProgramMultiplexerSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrailingAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrailingAlignment( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PackHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_ProgramMultiplexerSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PackHeaderPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_ProgramMultiplexerSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SystemHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_ProgramMultiplexerSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SystemHeaderPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_ProgramMultiplexerSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StandaloneSystemHeader( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StandaloneSystemHeader( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SuppressIsoEndCode( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SuppressIsoEndCode( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PutProgramStreamMap( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PutProgramStreamMap( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0015) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketSize( 
            /* [retval][out] */ INT *__MIDL__ICC_ProgramMultiplexerSettings0016) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketSize( 
            /* [in] */ INT __MIDL__ICC_ProgramMultiplexerSettings0017) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketHeaderSize( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0018) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketHeaderSize( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0019) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PacketAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0020) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PacketAlignment( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0021) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PayloadAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0022) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PayloadAlignment( 
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0023) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0024) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0025) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumStreams( 
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0026) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStream( 
            /* [in] */ DWORD StreamNumber,
            /* [retval][out] */ ICC_ProgramMuxerPinSettings **__MIDL__ICC_ProgramMultiplexerSettings0027) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddStream( 
            /* [in] */ ICC_ProgramMuxerPinSettings *__MIDL__ICC_ProgramMultiplexerSettings0028) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ProgramMultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ProgramMultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ProgramMultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_ProgramMultiplexerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_ProgramMultiplexerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_ProgramMultiplexerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_ProgramMultiplexerSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PackHeaderPeriod )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_ProgramMultiplexerSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PackHeaderPeriod )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_ProgramMultiplexerSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SystemHeaderPeriod )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_ProgramMultiplexerSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SystemHeaderPeriod )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_ProgramMultiplexerSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StandaloneSystemHeader )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StandaloneSystemHeader )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressIsoEndCode )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressIsoEndCode )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PutProgramStreamMap )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PutProgramStreamMap )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0015);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketSize )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ INT *__MIDL__ICC_ProgramMultiplexerSettings0016);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketSize )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ INT __MIDL__ICC_ProgramMultiplexerSettings0017);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketHeaderSize )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0018);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketHeaderSize )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0019);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PacketAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0020);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PacketAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0021);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PayloadAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0022);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PayloadAlignment )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_ProgramMultiplexerSettings0023);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_ProgramMultiplexerSettings0024);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_ProgramMultiplexerSettings0025);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumStreams )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_ProgramMultiplexerSettings0026);
        
        HRESULT ( STDMETHODCALLTYPE *GetStream )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ DWORD StreamNumber,
            /* [retval][out] */ ICC_ProgramMuxerPinSettings **__MIDL__ICC_ProgramMultiplexerSettings0027);
        
        HRESULT ( STDMETHODCALLTYPE *AddStream )( 
            ICC_ProgramMultiplexerSettings * This,
            /* [in] */ ICC_ProgramMuxerPinSettings *__MIDL__ICC_ProgramMultiplexerSettings0028);
        
        END_INTERFACE
    } ICC_ProgramMultiplexerSettingsVtbl;

    interface ICC_ProgramMultiplexerSettings
    {
        CONST_VTBL struct ICC_ProgramMultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ProgramMultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ProgramMultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ProgramMultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ProgramMultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_ProgramMultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_ProgramMultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_ProgramMultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_ProgramMultiplexerSettings_get_RateMode(This,__MIDL__ICC_ProgramMultiplexerSettings0000)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_ProgramMultiplexerSettings0000) ) 

#define ICC_ProgramMultiplexerSettings_put_RateMode(This,__MIDL__ICC_ProgramMultiplexerSettings0001)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_ProgramMultiplexerSettings0001) ) 

#define ICC_ProgramMultiplexerSettings_get_BitRate(This,__MIDL__ICC_ProgramMultiplexerSettings0002)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_ProgramMultiplexerSettings0002) ) 

#define ICC_ProgramMultiplexerSettings_put_BitRate(This,__MIDL__ICC_ProgramMultiplexerSettings0003)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_ProgramMultiplexerSettings0003) ) 

#define ICC_ProgramMultiplexerSettings_get_TrailingAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0004)	\
    ( (This)->lpVtbl -> get_TrailingAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0004) ) 

#define ICC_ProgramMultiplexerSettings_put_TrailingAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0005)	\
    ( (This)->lpVtbl -> put_TrailingAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0005) ) 

#define ICC_ProgramMultiplexerSettings_get_PackHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0006)	\
    ( (This)->lpVtbl -> get_PackHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0006) ) 

#define ICC_ProgramMultiplexerSettings_put_PackHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0007)	\
    ( (This)->lpVtbl -> put_PackHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0007) ) 

#define ICC_ProgramMultiplexerSettings_get_SystemHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0008)	\
    ( (This)->lpVtbl -> get_SystemHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0008) ) 

#define ICC_ProgramMultiplexerSettings_put_SystemHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0009)	\
    ( (This)->lpVtbl -> put_SystemHeaderPeriod(This,__MIDL__ICC_ProgramMultiplexerSettings0009) ) 

#define ICC_ProgramMultiplexerSettings_get_StandaloneSystemHeader(This,__MIDL__ICC_ProgramMultiplexerSettings0010)	\
    ( (This)->lpVtbl -> get_StandaloneSystemHeader(This,__MIDL__ICC_ProgramMultiplexerSettings0010) ) 

#define ICC_ProgramMultiplexerSettings_put_StandaloneSystemHeader(This,__MIDL__ICC_ProgramMultiplexerSettings0011)	\
    ( (This)->lpVtbl -> put_StandaloneSystemHeader(This,__MIDL__ICC_ProgramMultiplexerSettings0011) ) 

#define ICC_ProgramMultiplexerSettings_get_SuppressIsoEndCode(This,__MIDL__ICC_ProgramMultiplexerSettings0012)	\
    ( (This)->lpVtbl -> get_SuppressIsoEndCode(This,__MIDL__ICC_ProgramMultiplexerSettings0012) ) 

#define ICC_ProgramMultiplexerSettings_put_SuppressIsoEndCode(This,__MIDL__ICC_ProgramMultiplexerSettings0013)	\
    ( (This)->lpVtbl -> put_SuppressIsoEndCode(This,__MIDL__ICC_ProgramMultiplexerSettings0013) ) 

#define ICC_ProgramMultiplexerSettings_get_PutProgramStreamMap(This,__MIDL__ICC_ProgramMultiplexerSettings0014)	\
    ( (This)->lpVtbl -> get_PutProgramStreamMap(This,__MIDL__ICC_ProgramMultiplexerSettings0014) ) 

#define ICC_ProgramMultiplexerSettings_put_PutProgramStreamMap(This,__MIDL__ICC_ProgramMultiplexerSettings0015)	\
    ( (This)->lpVtbl -> put_PutProgramStreamMap(This,__MIDL__ICC_ProgramMultiplexerSettings0015) ) 

#define ICC_ProgramMultiplexerSettings_get_PacketSize(This,__MIDL__ICC_ProgramMultiplexerSettings0016)	\
    ( (This)->lpVtbl -> get_PacketSize(This,__MIDL__ICC_ProgramMultiplexerSettings0016) ) 

#define ICC_ProgramMultiplexerSettings_put_PacketSize(This,__MIDL__ICC_ProgramMultiplexerSettings0017)	\
    ( (This)->lpVtbl -> put_PacketSize(This,__MIDL__ICC_ProgramMultiplexerSettings0017) ) 

#define ICC_ProgramMultiplexerSettings_get_PacketHeaderSize(This,__MIDL__ICC_ProgramMultiplexerSettings0018)	\
    ( (This)->lpVtbl -> get_PacketHeaderSize(This,__MIDL__ICC_ProgramMultiplexerSettings0018) ) 

#define ICC_ProgramMultiplexerSettings_put_PacketHeaderSize(This,__MIDL__ICC_ProgramMultiplexerSettings0019)	\
    ( (This)->lpVtbl -> put_PacketHeaderSize(This,__MIDL__ICC_ProgramMultiplexerSettings0019) ) 

#define ICC_ProgramMultiplexerSettings_get_PacketAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0020)	\
    ( (This)->lpVtbl -> get_PacketAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0020) ) 

#define ICC_ProgramMultiplexerSettings_put_PacketAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0021)	\
    ( (This)->lpVtbl -> put_PacketAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0021) ) 

#define ICC_ProgramMultiplexerSettings_get_PayloadAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0022)	\
    ( (This)->lpVtbl -> get_PayloadAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0022) ) 

#define ICC_ProgramMultiplexerSettings_put_PayloadAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0023)	\
    ( (This)->lpVtbl -> put_PayloadAlignment(This,__MIDL__ICC_ProgramMultiplexerSettings0023) ) 

#define ICC_ProgramMultiplexerSettings_get_CrcProtected(This,__MIDL__ICC_ProgramMultiplexerSettings0024)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_ProgramMultiplexerSettings0024) ) 

#define ICC_ProgramMultiplexerSettings_put_CrcProtected(This,__MIDL__ICC_ProgramMultiplexerSettings0025)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_ProgramMultiplexerSettings0025) ) 

#define ICC_ProgramMultiplexerSettings_get_Descriptors(This,pDescr)	\
    ( (This)->lpVtbl -> get_Descriptors(This,pDescr) ) 

#define ICC_ProgramMultiplexerSettings_get_NumStreams(This,__MIDL__ICC_ProgramMultiplexerSettings0026)	\
    ( (This)->lpVtbl -> get_NumStreams(This,__MIDL__ICC_ProgramMultiplexerSettings0026) ) 

#define ICC_ProgramMultiplexerSettings_GetStream(This,StreamNumber,__MIDL__ICC_ProgramMultiplexerSettings0027)	\
    ( (This)->lpVtbl -> GetStream(This,StreamNumber,__MIDL__ICC_ProgramMultiplexerSettings0027) ) 

#define ICC_ProgramMultiplexerSettings_AddStream(This,__MIDL__ICC_ProgramMultiplexerSettings0028)	\
    ( (This)->lpVtbl -> AddStream(This,__MIDL__ICC_ProgramMultiplexerSettings0028) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ProgramMultiplexerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_TransportMuxerPinSettings_INTERFACE_DEFINED__
#define __ICC_TransportMuxerPinSettings_INTERFACE_DEFINED__

/* interface ICC_TransportMuxerPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_TransportMuxerPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001C21-be08-11dc-aa88-005056c00008")
    ICC_TransportMuxerPinSettings : public ICC_BaseMultiplexerPinSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMuxerPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PID( 
            /* [in] */ CC_PID __MIDL__ICC_TransportMuxerPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PesHeaderPeriod( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMuxerPinSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PesHeaderPeriod( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMuxerPinSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ScramblingControl( 
            /* [retval][out] */ DWORD *__MIDL__ICC_TransportMuxerPinSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ScramblingControl( 
            /* [in] */ DWORD __MIDL__ICC_TransportMuxerPinSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PriorityFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PriorityFlag( 
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFlag( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OriginalFlag( 
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AdditionalCopyInfo( 
            /* [retval][out] */ BYTE *__MIDL__ICC_TransportMuxerPinSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AdditionalCopyInfo( 
            /* [in] */ BYTE __MIDL__ICC_TransportMuxerPinSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsManager **__MIDL__ICC_TransportMuxerPinSettings0014) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_TransportMuxerPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_TransportMuxerPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_TransportMuxerPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *__MIDL__ICC_BaseMultiplexerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE __MIDL__ICC_BaseMultiplexerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_BaseMultiplexerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_BaseMultiplexerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_BaseMultiplexerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_BaseMultiplexerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_BaseMultiplexerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_BaseMultiplexerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_BaseMultiplexerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *__MIDL__ICC_BaseMultiplexerPinSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_FRAME_RATE __MIDL__ICC_BaseMultiplexerPinSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataAlignPeriod )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_BaseMultiplexerPinSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataAlignPeriod )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_BaseMultiplexerPinSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PID )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMuxerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PID )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_PID __MIDL__ICC_TransportMuxerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PesHeaderPeriod )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMuxerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PesHeaderPeriod )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMuxerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScramblingControl )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_TransportMuxerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScramblingControl )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_TransportMuxerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PriorityFlag )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PriorityFlag )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFlag )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OriginalFlag )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMuxerPinSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMuxerPinSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AdditionalCopyInfo )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ BYTE *__MIDL__ICC_TransportMuxerPinSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AdditionalCopyInfo )( 
            ICC_TransportMuxerPinSettings * This,
            /* [in] */ BYTE __MIDL__ICC_TransportMuxerPinSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_TransportMuxerPinSettings * This,
            /* [retval][out] */ ICC_SystemDescriptorsManager **__MIDL__ICC_TransportMuxerPinSettings0014);
        
        END_INTERFACE
    } ICC_TransportMuxerPinSettingsVtbl;

    interface ICC_TransportMuxerPinSettings
    {
        CONST_VTBL struct ICC_TransportMuxerPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_TransportMuxerPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_TransportMuxerPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_TransportMuxerPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_TransportMuxerPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_TransportMuxerPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_TransportMuxerPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_TransportMuxerPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_TransportMuxerPinSettings_get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000)	\
    ( (This)->lpVtbl -> get_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0000) ) 

#define ICC_TransportMuxerPinSettings_put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001)	\
    ( (This)->lpVtbl -> put_StreamType(This,__MIDL__ICC_BaseMultiplexerPinSettings0001) ) 

#define ICC_TransportMuxerPinSettings_get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0002) ) 

#define ICC_TransportMuxerPinSettings_put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_BaseMultiplexerPinSettings0003) ) 

#define ICC_TransportMuxerPinSettings_get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0004) ) 

#define ICC_TransportMuxerPinSettings_put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_BaseMultiplexerPinSettings0005) ) 

#define ICC_TransportMuxerPinSettings_get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0006) ) 

#define ICC_TransportMuxerPinSettings_put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0007) ) 

#define ICC_TransportMuxerPinSettings_get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0008) ) 

#define ICC_TransportMuxerPinSettings_put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0009) ) 

#define ICC_TransportMuxerPinSettings_get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010)	\
    ( (This)->lpVtbl -> get_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0010) ) 

#define ICC_TransportMuxerPinSettings_put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011)	\
    ( (This)->lpVtbl -> put_FrameRate(This,__MIDL__ICC_BaseMultiplexerPinSettings0011) ) 

#define ICC_TransportMuxerPinSettings_get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012)	\
    ( (This)->lpVtbl -> get_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0012) ) 

#define ICC_TransportMuxerPinSettings_put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013)	\
    ( (This)->lpVtbl -> put_DataAlignPeriod(This,__MIDL__ICC_BaseMultiplexerPinSettings0013) ) 


#define ICC_TransportMuxerPinSettings_get_PID(This,__MIDL__ICC_TransportMuxerPinSettings0000)	\
    ( (This)->lpVtbl -> get_PID(This,__MIDL__ICC_TransportMuxerPinSettings0000) ) 

#define ICC_TransportMuxerPinSettings_put_PID(This,__MIDL__ICC_TransportMuxerPinSettings0001)	\
    ( (This)->lpVtbl -> put_PID(This,__MIDL__ICC_TransportMuxerPinSettings0001) ) 

#define ICC_TransportMuxerPinSettings_get_PesHeaderPeriod(This,__MIDL__ICC_TransportMuxerPinSettings0002)	\
    ( (This)->lpVtbl -> get_PesHeaderPeriod(This,__MIDL__ICC_TransportMuxerPinSettings0002) ) 

#define ICC_TransportMuxerPinSettings_put_PesHeaderPeriod(This,__MIDL__ICC_TransportMuxerPinSettings0003)	\
    ( (This)->lpVtbl -> put_PesHeaderPeriod(This,__MIDL__ICC_TransportMuxerPinSettings0003) ) 

#define ICC_TransportMuxerPinSettings_get_ScramblingControl(This,__MIDL__ICC_TransportMuxerPinSettings0004)	\
    ( (This)->lpVtbl -> get_ScramblingControl(This,__MIDL__ICC_TransportMuxerPinSettings0004) ) 

#define ICC_TransportMuxerPinSettings_put_ScramblingControl(This,__MIDL__ICC_TransportMuxerPinSettings0005)	\
    ( (This)->lpVtbl -> put_ScramblingControl(This,__MIDL__ICC_TransportMuxerPinSettings0005) ) 

#define ICC_TransportMuxerPinSettings_get_PriorityFlag(This,__MIDL__ICC_TransportMuxerPinSettings0006)	\
    ( (This)->lpVtbl -> get_PriorityFlag(This,__MIDL__ICC_TransportMuxerPinSettings0006) ) 

#define ICC_TransportMuxerPinSettings_put_PriorityFlag(This,__MIDL__ICC_TransportMuxerPinSettings0007)	\
    ( (This)->lpVtbl -> put_PriorityFlag(This,__MIDL__ICC_TransportMuxerPinSettings0007) ) 

#define ICC_TransportMuxerPinSettings_get_OriginalFlag(This,__MIDL__ICC_TransportMuxerPinSettings0008)	\
    ( (This)->lpVtbl -> get_OriginalFlag(This,__MIDL__ICC_TransportMuxerPinSettings0008) ) 

#define ICC_TransportMuxerPinSettings_put_OriginalFlag(This,__MIDL__ICC_TransportMuxerPinSettings0009)	\
    ( (This)->lpVtbl -> put_OriginalFlag(This,__MIDL__ICC_TransportMuxerPinSettings0009) ) 

#define ICC_TransportMuxerPinSettings_get_CrcProtected(This,__MIDL__ICC_TransportMuxerPinSettings0010)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_TransportMuxerPinSettings0010) ) 

#define ICC_TransportMuxerPinSettings_put_CrcProtected(This,__MIDL__ICC_TransportMuxerPinSettings0011)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_TransportMuxerPinSettings0011) ) 

#define ICC_TransportMuxerPinSettings_get_AdditionalCopyInfo(This,__MIDL__ICC_TransportMuxerPinSettings0012)	\
    ( (This)->lpVtbl -> get_AdditionalCopyInfo(This,__MIDL__ICC_TransportMuxerPinSettings0012) ) 

#define ICC_TransportMuxerPinSettings_put_AdditionalCopyInfo(This,__MIDL__ICC_TransportMuxerPinSettings0013)	\
    ( (This)->lpVtbl -> put_AdditionalCopyInfo(This,__MIDL__ICC_TransportMuxerPinSettings0013) ) 

#define ICC_TransportMuxerPinSettings_get_Descriptors(This,__MIDL__ICC_TransportMuxerPinSettings0014)	\
    ( (This)->lpVtbl -> get_Descriptors(This,__MIDL__ICC_TransportMuxerPinSettings0014) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_TransportMuxerPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_TransportMultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_TransportMultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_TransportMultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_TransportMultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001C01-be08-11dc-aa88-005056c00008")
    ICC_TransportMultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_TransportMultiplexerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_TransportMultiplexerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_TransportMultiplexerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_TransportMultiplexerSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrailingAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_TransportMultiplexerSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrailingAlignment( 
            /* [in] */ DWORD __MIDL__ICC_TransportMultiplexerSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ WORD *__MIDL__ICC_TransportMultiplexerSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamID( 
            /* [in] */ WORD __MIDL__ICC_TransportMultiplexerSettings0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PMT_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PAT_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PAT_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMultiplexerSettings0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMultiplexerSettings0015) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNum( 
            /* [retval][out] */ WORD *__MIDL__ICC_TransportMultiplexerSettings0016) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgNum( 
            /* [in] */ WORD __MIDL__ICC_TransportMultiplexerSettings0017) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMultiplexerSettings0018) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PMT_PID( 
            /* [in] */ CC_PID __MIDL__ICC_TransportMultiplexerSettings0019) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMultiplexerSettings0020) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_PID( 
            /* [in] */ CC_PID __MIDL__ICC_TransportMultiplexerSettings0021) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_TransportMultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_TransportMultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_TransportMultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_TransportMultiplexerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_TransportMultiplexerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_TransportMultiplexerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_TransportMultiplexerSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingAlignment )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_TransportMultiplexerSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingAlignment )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_TransportMultiplexerSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_TransportMultiplexerSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ WORD __MIDL__ICC_TransportMultiplexerSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PMT_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PAT_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TransportMultiplexerSettings0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PAT_Period )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TransportMultiplexerSettings0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TransportMultiplexerSettings0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_TransportMultiplexerSettings0015);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNum )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_TransportMultiplexerSettings0016);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgNum )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ WORD __MIDL__ICC_TransportMultiplexerSettings0017);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_PID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMultiplexerSettings0018);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PMT_PID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_PID __MIDL__ICC_TransportMultiplexerSettings0019);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_PID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_TransportMultiplexerSettings0020);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_PID )( 
            ICC_TransportMultiplexerSettings * This,
            /* [in] */ CC_PID __MIDL__ICC_TransportMultiplexerSettings0021);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_TransportMultiplexerSettings * This,
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr);
        
        END_INTERFACE
    } ICC_TransportMultiplexerSettingsVtbl;

    interface ICC_TransportMultiplexerSettings
    {
        CONST_VTBL struct ICC_TransportMultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_TransportMultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_TransportMultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_TransportMultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_TransportMultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_TransportMultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_TransportMultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_TransportMultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_TransportMultiplexerSettings_get_RateMode(This,__MIDL__ICC_TransportMultiplexerSettings0000)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_TransportMultiplexerSettings0000) ) 

#define ICC_TransportMultiplexerSettings_put_RateMode(This,__MIDL__ICC_TransportMultiplexerSettings0001)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_TransportMultiplexerSettings0001) ) 

#define ICC_TransportMultiplexerSettings_get_BitRate(This,__MIDL__ICC_TransportMultiplexerSettings0002)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_TransportMultiplexerSettings0002) ) 

#define ICC_TransportMultiplexerSettings_put_BitRate(This,__MIDL__ICC_TransportMultiplexerSettings0003)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_TransportMultiplexerSettings0003) ) 

#define ICC_TransportMultiplexerSettings_get_TrailingAlignment(This,__MIDL__ICC_TransportMultiplexerSettings0004)	\
    ( (This)->lpVtbl -> get_TrailingAlignment(This,__MIDL__ICC_TransportMultiplexerSettings0004) ) 

#define ICC_TransportMultiplexerSettings_put_TrailingAlignment(This,__MIDL__ICC_TransportMultiplexerSettings0005)	\
    ( (This)->lpVtbl -> put_TrailingAlignment(This,__MIDL__ICC_TransportMultiplexerSettings0005) ) 

#define ICC_TransportMultiplexerSettings_get_StreamID(This,__MIDL__ICC_TransportMultiplexerSettings0006)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_TransportMultiplexerSettings0006) ) 

#define ICC_TransportMultiplexerSettings_put_StreamID(This,__MIDL__ICC_TransportMultiplexerSettings0007)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_TransportMultiplexerSettings0007) ) 

#define ICC_TransportMultiplexerSettings_get_PMT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0008)	\
    ( (This)->lpVtbl -> get_PMT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0008) ) 

#define ICC_TransportMultiplexerSettings_put_PMT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0009)	\
    ( (This)->lpVtbl -> put_PMT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0009) ) 

#define ICC_TransportMultiplexerSettings_get_PCR_Period(This,__MIDL__ICC_TransportMultiplexerSettings0010)	\
    ( (This)->lpVtbl -> get_PCR_Period(This,__MIDL__ICC_TransportMultiplexerSettings0010) ) 

#define ICC_TransportMultiplexerSettings_put_PCR_Period(This,__MIDL__ICC_TransportMultiplexerSettings0011)	\
    ( (This)->lpVtbl -> put_PCR_Period(This,__MIDL__ICC_TransportMultiplexerSettings0011) ) 

#define ICC_TransportMultiplexerSettings_get_PAT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0012)	\
    ( (This)->lpVtbl -> get_PAT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0012) ) 

#define ICC_TransportMultiplexerSettings_put_PAT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0013)	\
    ( (This)->lpVtbl -> put_PAT_Period(This,__MIDL__ICC_TransportMultiplexerSettings0013) ) 

#define ICC_TransportMultiplexerSettings_get_CrcProtected(This,__MIDL__ICC_TransportMultiplexerSettings0014)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_TransportMultiplexerSettings0014) ) 

#define ICC_TransportMultiplexerSettings_put_CrcProtected(This,__MIDL__ICC_TransportMultiplexerSettings0015)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_TransportMultiplexerSettings0015) ) 

#define ICC_TransportMultiplexerSettings_get_ProgNum(This,__MIDL__ICC_TransportMultiplexerSettings0016)	\
    ( (This)->lpVtbl -> get_ProgNum(This,__MIDL__ICC_TransportMultiplexerSettings0016) ) 

#define ICC_TransportMultiplexerSettings_put_ProgNum(This,__MIDL__ICC_TransportMultiplexerSettings0017)	\
    ( (This)->lpVtbl -> put_ProgNum(This,__MIDL__ICC_TransportMultiplexerSettings0017) ) 

#define ICC_TransportMultiplexerSettings_get_PMT_PID(This,__MIDL__ICC_TransportMultiplexerSettings0018)	\
    ( (This)->lpVtbl -> get_PMT_PID(This,__MIDL__ICC_TransportMultiplexerSettings0018) ) 

#define ICC_TransportMultiplexerSettings_put_PMT_PID(This,__MIDL__ICC_TransportMultiplexerSettings0019)	\
    ( (This)->lpVtbl -> put_PMT_PID(This,__MIDL__ICC_TransportMultiplexerSettings0019) ) 

#define ICC_TransportMultiplexerSettings_get_PCR_PID(This,__MIDL__ICC_TransportMultiplexerSettings0020)	\
    ( (This)->lpVtbl -> get_PCR_PID(This,__MIDL__ICC_TransportMultiplexerSettings0020) ) 

#define ICC_TransportMultiplexerSettings_put_PCR_PID(This,__MIDL__ICC_TransportMultiplexerSettings0021)	\
    ( (This)->lpVtbl -> put_PCR_PID(This,__MIDL__ICC_TransportMultiplexerSettings0021) ) 

#define ICC_TransportMultiplexerSettings_get_Descriptors(This,pDescr)	\
    ( (This)->lpVtbl -> get_Descriptors(This,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_TransportMultiplexerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_TS_ProgramDescr_INTERFACE_DEFINED__
#define __ICC_TS_ProgramDescr_INTERFACE_DEFINED__

/* interface ICC_TS_ProgramDescr */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_TS_ProgramDescr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001C11-be08-11dc-aa88-005056c00008")
    ICC_TS_ProgramDescr : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNum( 
            /* [retval][out] */ WORD *__MIDL__ICC_TS_ProgramDescr0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgNum( 
            /* [in] */ WORD __MIDL__ICC_TS_ProgramDescr0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_TS_ProgramDescr0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PMT_PID( 
            /* [in] */ CC_PID __MIDL__ICC_TS_ProgramDescr0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TS_ProgramDescr0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PMT_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TS_ProgramDescr0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_PID( 
            /* [retval][out] */ CC_PID *__MIDL__ICC_TS_ProgramDescr0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_PID( 
            /* [in] */ CC_PID __MIDL__ICC_TS_ProgramDescr0007) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TS_ProgramDescr0008) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_TS_ProgramDescr0009) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialPTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_TS_ProgramDescr0010) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialPTS( 
            /* [in] */ CC_TIME __MIDL__ICC_TS_ProgramDescr0011) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DiscontinuityThreshold( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_TS_ProgramDescr0012) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DiscontinuityThreshold( 
            /* [in] */ CC_TIME __MIDL__ICC_TS_ProgramDescr0013) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Descriptors( 
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TS_ProgramDescr0014) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_TS_ProgramDescr0015) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_TS_ProgramDescrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_TS_ProgramDescr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_TS_ProgramDescr * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNum )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ WORD *__MIDL__ICC_TS_ProgramDescr0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgNum )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ WORD __MIDL__ICC_TS_ProgramDescr0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_PID )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_TS_ProgramDescr0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PMT_PID )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_PID __MIDL__ICC_TS_ProgramDescr0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_Period )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TS_ProgramDescr0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PMT_Period )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TS_ProgramDescr0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_PID )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_PID *__MIDL__ICC_TS_ProgramDescr0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_PID )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_PID __MIDL__ICC_TS_ProgramDescr0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_Period )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_TS_ProgramDescr0008);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_Period )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_TS_ProgramDescr0009);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialPTS )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_TS_ProgramDescr0010);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialPTS )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_TIME __MIDL__ICC_TS_ProgramDescr0011);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiscontinuityThreshold )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_TS_ProgramDescr0012);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DiscontinuityThreshold )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_TIME __MIDL__ICC_TS_ProgramDescr0013);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptors )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ ICC_SystemDescriptorsManager **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_TS_ProgramDescr * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_TS_ProgramDescr0014);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_TS_ProgramDescr * This,
            /* [in] */ CC_BOOL __MIDL__ICC_TS_ProgramDescr0015);
        
        END_INTERFACE
    } ICC_TS_ProgramDescrVtbl;

    interface ICC_TS_ProgramDescr
    {
        CONST_VTBL struct ICC_TS_ProgramDescrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_TS_ProgramDescr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_TS_ProgramDescr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_TS_ProgramDescr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_TS_ProgramDescr_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_TS_ProgramDescr_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_TS_ProgramDescr_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_TS_ProgramDescr_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_TS_ProgramDescr_get_ProgNum(This,__MIDL__ICC_TS_ProgramDescr0000)	\
    ( (This)->lpVtbl -> get_ProgNum(This,__MIDL__ICC_TS_ProgramDescr0000) ) 

#define ICC_TS_ProgramDescr_put_ProgNum(This,__MIDL__ICC_TS_ProgramDescr0001)	\
    ( (This)->lpVtbl -> put_ProgNum(This,__MIDL__ICC_TS_ProgramDescr0001) ) 

#define ICC_TS_ProgramDescr_get_PMT_PID(This,__MIDL__ICC_TS_ProgramDescr0002)	\
    ( (This)->lpVtbl -> get_PMT_PID(This,__MIDL__ICC_TS_ProgramDescr0002) ) 

#define ICC_TS_ProgramDescr_put_PMT_PID(This,__MIDL__ICC_TS_ProgramDescr0003)	\
    ( (This)->lpVtbl -> put_PMT_PID(This,__MIDL__ICC_TS_ProgramDescr0003) ) 

#define ICC_TS_ProgramDescr_get_PMT_Period(This,__MIDL__ICC_TS_ProgramDescr0004)	\
    ( (This)->lpVtbl -> get_PMT_Period(This,__MIDL__ICC_TS_ProgramDescr0004) ) 

#define ICC_TS_ProgramDescr_put_PMT_Period(This,__MIDL__ICC_TS_ProgramDescr0005)	\
    ( (This)->lpVtbl -> put_PMT_Period(This,__MIDL__ICC_TS_ProgramDescr0005) ) 

#define ICC_TS_ProgramDescr_get_PCR_PID(This,__MIDL__ICC_TS_ProgramDescr0006)	\
    ( (This)->lpVtbl -> get_PCR_PID(This,__MIDL__ICC_TS_ProgramDescr0006) ) 

#define ICC_TS_ProgramDescr_put_PCR_PID(This,__MIDL__ICC_TS_ProgramDescr0007)	\
    ( (This)->lpVtbl -> put_PCR_PID(This,__MIDL__ICC_TS_ProgramDescr0007) ) 

#define ICC_TS_ProgramDescr_get_PCR_Period(This,__MIDL__ICC_TS_ProgramDescr0008)	\
    ( (This)->lpVtbl -> get_PCR_Period(This,__MIDL__ICC_TS_ProgramDescr0008) ) 

#define ICC_TS_ProgramDescr_put_PCR_Period(This,__MIDL__ICC_TS_ProgramDescr0009)	\
    ( (This)->lpVtbl -> put_PCR_Period(This,__MIDL__ICC_TS_ProgramDescr0009) ) 

#define ICC_TS_ProgramDescr_get_InitialPTS(This,__MIDL__ICC_TS_ProgramDescr0010)	\
    ( (This)->lpVtbl -> get_InitialPTS(This,__MIDL__ICC_TS_ProgramDescr0010) ) 

#define ICC_TS_ProgramDescr_put_InitialPTS(This,__MIDL__ICC_TS_ProgramDescr0011)	\
    ( (This)->lpVtbl -> put_InitialPTS(This,__MIDL__ICC_TS_ProgramDescr0011) ) 

#define ICC_TS_ProgramDescr_get_DiscontinuityThreshold(This,__MIDL__ICC_TS_ProgramDescr0012)	\
    ( (This)->lpVtbl -> get_DiscontinuityThreshold(This,__MIDL__ICC_TS_ProgramDescr0012) ) 

#define ICC_TS_ProgramDescr_put_DiscontinuityThreshold(This,__MIDL__ICC_TS_ProgramDescr0013)	\
    ( (This)->lpVtbl -> put_DiscontinuityThreshold(This,__MIDL__ICC_TS_ProgramDescr0013) ) 

#define ICC_TS_ProgramDescr_get_Descriptors(This,pDescr)	\
    ( (This)->lpVtbl -> get_Descriptors(This,pDescr) ) 

#define ICC_TS_ProgramDescr_get_CrcProtected(This,__MIDL__ICC_TS_ProgramDescr0014)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_TS_ProgramDescr0014) ) 

#define ICC_TS_ProgramDescr_put_CrcProtected(This,__MIDL__ICC_TS_ProgramDescr0015)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_TS_ProgramDescr0015) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_TS_ProgramDescr_INTERFACE_DEFINED__ */


#ifndef __ICC_M2TSMP_MultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_M2TSMP_MultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_M2TSMP_MultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_M2TSMP_MultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001C02-be08-11dc-aa88-005056c00008")
    ICC_M2TSMP_MultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RateMode( 
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_M2TSMP_MultiplexerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_RateMode( 
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_M2TSMP_MultiplexerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BitRate( 
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_M2TSMP_MultiplexerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BitRate( 
            /* [in] */ CC_BITRATE __MIDL__ICC_M2TSMP_MultiplexerSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrailingAlignment( 
            /* [retval][out] */ DWORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrailingAlignment( 
            /* [in] */ DWORD __MIDL__ICC_M2TSMP_MultiplexerSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumPrograms( 
            /* [retval][out] */ DWORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0006) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProgram( 
            /* [in] */ DWORD ProgramIdx,
            /* [retval][out] */ ICC_TS_ProgramDescr **__MIDL__ICC_M2TSMP_MultiplexerSettings0007) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddProgram( 
            /* [in] */ ICC_TS_ProgramDescr *__MIDL__ICC_M2TSMP_MultiplexerSettings0008) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ WORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0009) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamID( 
            /* [in] */ WORD __MIDL__ICC_M2TSMP_MultiplexerSettings0010) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNumBase( 
            /* [retval][out] */ WORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0011) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgNumBase( 
            /* [in] */ WORD __MIDL__ICC_M2TSMP_MultiplexerSettings0012) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PMT_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0013) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PMT_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0014) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0015) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0016) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PAT_Period( 
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0017) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PAT_Period( 
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0018) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CrcProtected( 
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_M2TSMP_MultiplexerSettings0019) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CrcProtected( 
            /* [in] */ CC_BOOL __MIDL__ICC_M2TSMP_MultiplexerSettings0020) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_M2TSMP_MultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_M2TSMP_MultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_M2TSMP_MultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RateMode )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE_MODE *__MIDL__ICC_M2TSMP_MultiplexerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_RateMode )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_BITRATE_MODE __MIDL__ICC_M2TSMP_MultiplexerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_BITRATE *__MIDL__ICC_M2TSMP_MultiplexerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_BITRATE __MIDL__ICC_M2TSMP_MultiplexerSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingAlignment )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingAlignment )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ DWORD __MIDL__ICC_M2TSMP_MultiplexerSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumPrograms )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0006);
        
        HRESULT ( STDMETHODCALLTYPE *GetProgram )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ DWORD ProgramIdx,
            /* [retval][out] */ ICC_TS_ProgramDescr **__MIDL__ICC_M2TSMP_MultiplexerSettings0007);
        
        HRESULT ( STDMETHODCALLTYPE *AddProgram )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ ICC_TS_ProgramDescr *__MIDL__ICC_M2TSMP_MultiplexerSettings0008);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0009);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ WORD __MIDL__ICC_M2TSMP_MultiplexerSettings0010);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNumBase )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_M2TSMP_MultiplexerSettings0011);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgNumBase )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ WORD __MIDL__ICC_M2TSMP_MultiplexerSettings0012);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PMT_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0013);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PMT_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0014);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0015);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0016);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PAT_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *__MIDL__ICC_M2TSMP_MultiplexerSettings0017);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PAT_Period )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_PERIOD __MIDL__ICC_M2TSMP_MultiplexerSettings0018);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CrcProtected )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *__MIDL__ICC_M2TSMP_MultiplexerSettings0019);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CrcProtected )( 
            ICC_M2TSMP_MultiplexerSettings * This,
            /* [in] */ CC_BOOL __MIDL__ICC_M2TSMP_MultiplexerSettings0020);
        
        END_INTERFACE
    } ICC_M2TSMP_MultiplexerSettingsVtbl;

    interface ICC_M2TSMP_MultiplexerSettings
    {
        CONST_VTBL struct ICC_M2TSMP_MultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_M2TSMP_MultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_M2TSMP_MultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_M2TSMP_MultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_M2TSMP_MultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_M2TSMP_MultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_M2TSMP_MultiplexerSettings_get_RateMode(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0000)	\
    ( (This)->lpVtbl -> get_RateMode(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0000) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_RateMode(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0001)	\
    ( (This)->lpVtbl -> put_RateMode(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0001) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_BitRate(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0002)	\
    ( (This)->lpVtbl -> get_BitRate(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0002) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_BitRate(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0003)	\
    ( (This)->lpVtbl -> put_BitRate(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0003) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_TrailingAlignment(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0004)	\
    ( (This)->lpVtbl -> get_TrailingAlignment(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0004) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_TrailingAlignment(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0005)	\
    ( (This)->lpVtbl -> put_TrailingAlignment(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0005) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_NumPrograms(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0006)	\
    ( (This)->lpVtbl -> get_NumPrograms(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0006) ) 

#define ICC_M2TSMP_MultiplexerSettings_GetProgram(This,ProgramIdx,__MIDL__ICC_M2TSMP_MultiplexerSettings0007)	\
    ( (This)->lpVtbl -> GetProgram(This,ProgramIdx,__MIDL__ICC_M2TSMP_MultiplexerSettings0007) ) 

#define ICC_M2TSMP_MultiplexerSettings_AddProgram(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0008)	\
    ( (This)->lpVtbl -> AddProgram(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0008) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_StreamID(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0009)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0009) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_StreamID(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0010)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0010) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_ProgNumBase(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0011)	\
    ( (This)->lpVtbl -> get_ProgNumBase(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0011) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_ProgNumBase(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0012)	\
    ( (This)->lpVtbl -> put_ProgNumBase(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0012) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_PMT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0013)	\
    ( (This)->lpVtbl -> get_PMT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0013) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_PMT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0014)	\
    ( (This)->lpVtbl -> put_PMT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0014) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_PCR_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0015)	\
    ( (This)->lpVtbl -> get_PCR_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0015) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_PCR_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0016)	\
    ( (This)->lpVtbl -> put_PCR_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0016) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_PAT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0017)	\
    ( (This)->lpVtbl -> get_PAT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0017) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_PAT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0018)	\
    ( (This)->lpVtbl -> put_PAT_Period(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0018) ) 

#define ICC_M2TSMP_MultiplexerSettings_get_CrcProtected(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0019)	\
    ( (This)->lpVtbl -> get_CrcProtected(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0019) ) 

#define ICC_M2TSMP_MultiplexerSettings_put_CrcProtected(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0020)	\
    ( (This)->lpVtbl -> put_CrcProtected(This,__MIDL__ICC_M2TSMP_MultiplexerSettings0020) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_M2TSMP_MultiplexerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_HDV1MuxerSettings_INTERFACE_DEFINED__
#define __ICC_HDV1MuxerSettings_INTERFACE_DEFINED__

/* interface ICC_HDV1MuxerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HDV1MuxerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001D01-be08-11dc-aa88-005056c00008")
    ICC_HDV1MuxerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ WORD *__MIDL__ICC_HDV1MuxerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamID( 
            /* [in] */ WORD __MIDL__ICC_HDV1MuxerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNum( 
            /* [retval][out] */ WORD *__MIDL__ICC_HDV1MuxerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgNum( 
            /* [in] */ WORD __MIDL__ICC_HDV1MuxerSettings0003) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HDV1MuxerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HDV1MuxerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HDV1MuxerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HDV1MuxerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_HDV1MuxerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_HDV1MuxerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ WORD __MIDL__ICC_HDV1MuxerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNum )( 
            ICC_HDV1MuxerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_HDV1MuxerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgNum )( 
            ICC_HDV1MuxerSettings * This,
            /* [in] */ WORD __MIDL__ICC_HDV1MuxerSettings0003);
        
        END_INTERFACE
    } ICC_HDV1MuxerSettingsVtbl;

    interface ICC_HDV1MuxerSettings
    {
        CONST_VTBL struct ICC_HDV1MuxerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HDV1MuxerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HDV1MuxerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HDV1MuxerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HDV1MuxerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HDV1MuxerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HDV1MuxerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HDV1MuxerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HDV1MuxerSettings_get_StreamID(This,__MIDL__ICC_HDV1MuxerSettings0000)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_HDV1MuxerSettings0000) ) 

#define ICC_HDV1MuxerSettings_put_StreamID(This,__MIDL__ICC_HDV1MuxerSettings0001)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_HDV1MuxerSettings0001) ) 

#define ICC_HDV1MuxerSettings_get_ProgNum(This,__MIDL__ICC_HDV1MuxerSettings0002)	\
    ( (This)->lpVtbl -> get_ProgNum(This,__MIDL__ICC_HDV1MuxerSettings0002) ) 

#define ICC_HDV1MuxerSettings_put_ProgNum(This,__MIDL__ICC_HDV1MuxerSettings0003)	\
    ( (This)->lpVtbl -> put_ProgNum(This,__MIDL__ICC_HDV1MuxerSettings0003) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HDV1MuxerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_HDV2MuxerSettings_INTERFACE_DEFINED__
#define __ICC_HDV2MuxerSettings_INTERFACE_DEFINED__

/* interface ICC_HDV2MuxerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HDV2MuxerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001D02-be08-11dc-aa88-005056c00008")
    ICC_HDV2MuxerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ WORD *__MIDL__ICC_HDV2MuxerSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_StreamID( 
            /* [in] */ WORD __MIDL__ICC_HDV2MuxerSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProgNum( 
            /* [retval][out] */ WORD *__MIDL__ICC_HDV2MuxerSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProgNum( 
            /* [in] */ WORD __MIDL__ICC_HDV2MuxerSettings0003) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HDV2MuxerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HDV2MuxerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HDV2MuxerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HDV2MuxerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_HDV2MuxerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_HDV2MuxerSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamID )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ WORD __MIDL__ICC_HDV2MuxerSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgNum )( 
            ICC_HDV2MuxerSettings * This,
            /* [retval][out] */ WORD *__MIDL__ICC_HDV2MuxerSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProgNum )( 
            ICC_HDV2MuxerSettings * This,
            /* [in] */ WORD __MIDL__ICC_HDV2MuxerSettings0003);
        
        END_INTERFACE
    } ICC_HDV2MuxerSettingsVtbl;

    interface ICC_HDV2MuxerSettings
    {
        CONST_VTBL struct ICC_HDV2MuxerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HDV2MuxerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HDV2MuxerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HDV2MuxerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HDV2MuxerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HDV2MuxerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HDV2MuxerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HDV2MuxerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HDV2MuxerSettings_get_StreamID(This,__MIDL__ICC_HDV2MuxerSettings0000)	\
    ( (This)->lpVtbl -> get_StreamID(This,__MIDL__ICC_HDV2MuxerSettings0000) ) 

#define ICC_HDV2MuxerSettings_put_StreamID(This,__MIDL__ICC_HDV2MuxerSettings0001)	\
    ( (This)->lpVtbl -> put_StreamID(This,__MIDL__ICC_HDV2MuxerSettings0001) ) 

#define ICC_HDV2MuxerSettings_get_ProgNum(This,__MIDL__ICC_HDV2MuxerSettings0002)	\
    ( (This)->lpVtbl -> get_ProgNum(This,__MIDL__ICC_HDV2MuxerSettings0002) ) 

#define ICC_HDV2MuxerSettings_put_ProgNum(This,__MIDL__ICC_HDV2MuxerSettings0003)	\
    ( (This)->lpVtbl -> put_ProgNum(This,__MIDL__ICC_HDV2MuxerSettings0003) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HDV2MuxerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_Multiplexer_INTERFACE_DEFINED__
#define __ICC_Multiplexer_INTERFACE_DEFINED__

/* interface ICC_Multiplexer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Multiplexer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6EEBE83C-8F8B-4321-8C1E-D950C7E0A282")
    ICC_Multiplexer : public ICC_Encoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreatePin( 
            /* [in] */ ICC_Settings *pPinDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePinByXml( 
            /* [in] */ CC_STRING pPinXmlDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PinCount( 
            /* [retval][out] */ CC_UINT *pPinCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPin( 
            /* [in] */ CC_UINT PinNumber,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MultiplexerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Multiplexer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Multiplexer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Multiplexer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Multiplexer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Multiplexer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Multiplexer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Multiplexer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Multiplexer * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Multiplexer * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePin )( 
            ICC_Multiplexer * This,
            /* [in] */ ICC_Settings *pPinDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePinByXml )( 
            ICC_Multiplexer * This,
            /* [in] */ CC_STRING pPinXmlDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PinCount )( 
            ICC_Multiplexer * This,
            /* [retval][out] */ CC_UINT *pPinCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetPin )( 
            ICC_Multiplexer * This,
            /* [in] */ CC_UINT PinNumber,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        END_INTERFACE
    } ICC_MultiplexerVtbl;

    interface ICC_Multiplexer
    {
        CONST_VTBL struct ICC_MultiplexerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Multiplexer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Multiplexer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Multiplexer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Multiplexer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Multiplexer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Multiplexer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Multiplexer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Multiplexer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Multiplexer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Multiplexer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Multiplexer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Multiplexer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Multiplexer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Multiplexer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Multiplexer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Multiplexer_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_Multiplexer_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_Multiplexer_CreatePin(This,pPinDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePin(This,pPinDescr,pOutput) ) 

#define ICC_Multiplexer_CreatePinByXml(This,pPinXmlDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePinByXml(This,pPinXmlDescr,pOutput) ) 

#define ICC_Multiplexer_get_PinCount(This,pPinCount)	\
    ( (This)->lpVtbl -> get_PinCount(This,pPinCount) ) 

#define ICC_Multiplexer_GetPin(This,PinNumber,pOutput)	\
    ( (This)->lpVtbl -> GetPin(This,PinNumber,pOutput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Multiplexer_INTERFACE_DEFINED__ */


#ifndef __ICC_DemultiplexedDataCallback_INTERFACE_DEFINED__
#define __ICC_DemultiplexedDataCallback_INTERFACE_DEFINED__

/* interface ICC_DemultiplexedDataCallback */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DemultiplexedDataCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001101-be08-11dc-aa88-005056c00008")
    ICC_DemultiplexedDataCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessData( 
            /* [in] */ DWORD stream_id,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ IUnknown *pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DemultiplexedDataCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DemultiplexedDataCallback * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DemultiplexedDataCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DemultiplexedDataCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DemultiplexedDataCallback * This,
            /* [in] */ DWORD stream_id,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ IUnknown *pDescr);
        
        END_INTERFACE
    } ICC_DemultiplexedDataCallbackVtbl;

    interface ICC_DemultiplexedDataCallback
    {
        CONST_VTBL struct ICC_DemultiplexedDataCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DemultiplexedDataCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DemultiplexedDataCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DemultiplexedDataCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DemultiplexedDataCallback_ProcessData(This,stream_id,pbData,cbSize,pts,pDescr)	\
    ( (This)->lpVtbl -> ProcessData(This,stream_id,pbData,cbSize,pts,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DemultiplexedDataCallback_INTERFACE_DEFINED__ */


#ifndef __ICC_DemultiplexedDataCallbackExt_INTERFACE_DEFINED__
#define __ICC_DemultiplexedDataCallbackExt_INTERFACE_DEFINED__

/* interface ICC_DemultiplexedDataCallbackExt */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DemultiplexedDataCallbackExt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3a2d00f-72e6-4611-b4f6-de4941393acf")
    ICC_DemultiplexedDataCallbackExt : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessData( 
            /* [in] */ DWORD stream_id,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ CC_TIME dts,
            /* [in] */ CC_OFFSET pkt_offset,
            /* [in] */ IUnknown *pDescr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DemultiplexedDataCallbackExtVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DemultiplexedDataCallbackExt * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DemultiplexedDataCallbackExt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DemultiplexedDataCallbackExt * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_DemultiplexedDataCallbackExt * This,
            /* [in] */ DWORD stream_id,
            /* [size_is][in] */ const BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [in] */ CC_TIME pts,
            /* [in] */ CC_TIME dts,
            /* [in] */ CC_OFFSET pkt_offset,
            /* [in] */ IUnknown *pDescr);
        
        END_INTERFACE
    } ICC_DemultiplexedDataCallbackExtVtbl;

    interface ICC_DemultiplexedDataCallbackExt
    {
        CONST_VTBL struct ICC_DemultiplexedDataCallbackExtVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DemultiplexedDataCallbackExt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DemultiplexedDataCallbackExt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DemultiplexedDataCallbackExt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DemultiplexedDataCallbackExt_ProcessData(This,stream_id,pbData,cbSize,pts,dts,pkt_offset,pDescr)	\
    ( (This)->lpVtbl -> ProcessData(This,stream_id,pbData,cbSize,pts,dts,pkt_offset,pDescr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DemultiplexedDataCallbackExt_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamClockReferenceProp_INTERFACE_DEFINED__
#define __ICC_StreamClockReferenceProp_INTERFACE_DEFINED__

/* interface ICC_StreamClockReferenceProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamClockReferenceProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1c420773-d168-404a-85f2-07b2b6ec5455")
    ICC_StreamClockReferenceProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SCR( 
            /* [retval][out] */ CC_SCR *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamClockReferencePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamClockReferenceProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamClockReferenceProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamClockReferenceProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SCR )( 
            ICC_StreamClockReferenceProp * This,
            /* [retval][out] */ CC_SCR *p);
        
        END_INTERFACE
    } ICC_StreamClockReferencePropVtbl;

    interface ICC_StreamClockReferenceProp
    {
        CONST_VTBL struct ICC_StreamClockReferencePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamClockReferenceProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamClockReferenceProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamClockReferenceProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamClockReferenceProp_get_SCR(This,p)	\
    ( (This)->lpVtbl -> get_SCR(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamClockReferenceProp_INTERFACE_DEFINED__ */


#ifndef __ICC_ProgramClockReferencePidProp_INTERFACE_DEFINED__
#define __ICC_ProgramClockReferencePidProp_INTERFACE_DEFINED__

/* interface ICC_ProgramClockReferencePidProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ProgramClockReferencePidProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43a07dea-9101-4b35-b6c2-c9dda551b08b")
    ICC_ProgramClockReferencePidProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_PID( 
            /* [retval][out] */ CC_PID *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_PID( 
            /* [in] */ CC_PID v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ProgramClockReferencePidPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ProgramClockReferencePidProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ProgramClockReferencePidProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ProgramClockReferencePidProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_PID )( 
            ICC_ProgramClockReferencePidProp * This,
            /* [retval][out] */ CC_PID *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_PID )( 
            ICC_ProgramClockReferencePidProp * This,
            /* [in] */ CC_PID v);
        
        END_INTERFACE
    } ICC_ProgramClockReferencePidPropVtbl;

    interface ICC_ProgramClockReferencePidProp
    {
        CONST_VTBL struct ICC_ProgramClockReferencePidPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ProgramClockReferencePidProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ProgramClockReferencePidProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ProgramClockReferencePidProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ProgramClockReferencePidProp_get_PCR_PID(This,p)	\
    ( (This)->lpVtbl -> get_PCR_PID(This,p) ) 

#define ICC_ProgramClockReferencePidProp_put_PCR_PID(This,v)	\
    ( (This)->lpVtbl -> put_PCR_PID(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ProgramClockReferencePidProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0193 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_CATCH_STREAM_MODE
    {
        CC_CATCH_MODE_DEFAULT	= 0,
        CC_CATCH_MODE_RAW_STREAM	= 1,
        CC_CATCH_MODE_PES_STREAM	= 2,
        CC_CATCH_MODE_SI_STREAM	= 3,
        CC_CATCH_MODES_TOTAL	= ( CC_CATCH_MODE_SI_STREAM + 1 ) 
    } 	CC_CATCH_STREAM_MODE;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0193_v0_0_s_ifspec;

#ifndef __ICC_Demultiplexer_INTERFACE_DEFINED__
#define __ICC_Demultiplexer_INTERFACE_DEFINED__

/* interface ICC_Demultiplexer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_Demultiplexer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001102-be08-11dc-aa88-005056c00008")
    ICC_Demultiplexer : public ICC_Decoder
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStreamInfo( 
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pStreamInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CatchStream( 
            /* [in] */ DWORD stream_id,
            /* [defaultvalue][in] */ IUnknown *pDecoder = 0,
            /* [defaultvalue][in] */ CC_CATCH_STREAM_MODE mode = CC_CATCH_MODE_DEFAULT) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseStream( 
            /* [in] */ DWORD stream_id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseAllStreams( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataSize( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_StreamID( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SCR( 
            /* [retval][out] */ CC_SCR *p) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetData( 
            /* [out] */ CC_UINT *p_stream_id,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [out] */ CC_TIME *p_pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DemultiplexerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_Demultiplexer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_Demultiplexer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_Demultiplexer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_Demultiplexer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_Demultiplexer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_Demultiplexer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_Demultiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_Demultiplexer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_Demultiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_Demultiplexer * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessData )( 
            ICC_Demultiplexer * This,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [defaultvalue][in] */ CC_UINT cbOffset,
            /* [defaultvalue][in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        HRESULT ( STDMETHODCALLTYPE *Break )( 
            ICC_Demultiplexer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamInfo )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pStreamInfo);
        
        HRESULT ( STDMETHODCALLTYPE *CatchStream )( 
            ICC_Demultiplexer * This,
            /* [in] */ DWORD stream_id,
            /* [defaultvalue][in] */ IUnknown *pDecoder,
            /* [defaultvalue][in] */ CC_CATCH_STREAM_MODE mode);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseStream )( 
            ICC_Demultiplexer * This,
            /* [in] */ DWORD stream_id);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseAllStreams )( 
            ICC_Demultiplexer * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamID )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SCR )( 
            ICC_Demultiplexer * This,
            /* [retval][out] */ CC_SCR *p);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_Demultiplexer * This,
            /* [out] */ CC_UINT *p_stream_id,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [out] */ CC_TIME *p_pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        END_INTERFACE
    } ICC_DemultiplexerVtbl;

    interface ICC_Demultiplexer
    {
        CONST_VTBL struct ICC_DemultiplexerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_Demultiplexer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_Demultiplexer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_Demultiplexer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_Demultiplexer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_Demultiplexer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_Demultiplexer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_Demultiplexer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_Demultiplexer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_Demultiplexer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_Demultiplexer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_Demultiplexer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_Demultiplexer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_Demultiplexer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_Demultiplexer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_Demultiplexer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_Demultiplexer_ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessData(This,pbData,cbSize,cbOffset,pts,pcbProcessed) ) 

#define ICC_Demultiplexer_Break(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Break(This,bFlush,pbDone) ) 


#define ICC_Demultiplexer_GetStreamInfo(This,pStreamInfo)	\
    ( (This)->lpVtbl -> GetStreamInfo(This,pStreamInfo) ) 

#define ICC_Demultiplexer_CatchStream(This,stream_id,pDecoder,mode)	\
    ( (This)->lpVtbl -> CatchStream(This,stream_id,pDecoder,mode) ) 

#define ICC_Demultiplexer_ReleaseStream(This,stream_id)	\
    ( (This)->lpVtbl -> ReleaseStream(This,stream_id) ) 

#define ICC_Demultiplexer_ReleaseAllStreams(This)	\
    ( (This)->lpVtbl -> ReleaseAllStreams(This) ) 

#define ICC_Demultiplexer_get_DataSize(This,p)	\
    ( (This)->lpVtbl -> get_DataSize(This,p) ) 

#define ICC_Demultiplexer_get_StreamID(This,p)	\
    ( (This)->lpVtbl -> get_StreamID(This,p) ) 

#define ICC_Demultiplexer_get_SCR(This,p)	\
    ( (This)->lpVtbl -> get_SCR(This,p) ) 

#define ICC_Demultiplexer_GetData(This,p_stream_id,pbData,cbBufSize,p_pts,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,p_stream_id,pbData,cbBufSize,p_pts,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_Demultiplexer_INTERFACE_DEFINED__ */


#ifndef __ICC_HDV2_Multiplexer_INTERFACE_DEFINED__
#define __ICC_HDV2_Multiplexer_INTERFACE_DEFINED__

/* interface ICC_HDV2_Multiplexer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HDV2_Multiplexer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00001D12-be08-11dc-aa88-005056c00008")
    ICC_HDV2_Multiplexer : public ICC_Multiplexer
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InitialTimeCode( 
            /* [retval][out] */ CC_TIMECODE *__MIDL__ICC_HDV2_Multiplexer0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InitialTimeCode( 
            /* [in] */ CC_TIMECODE __MIDL__ICC_HDV2_Multiplexer0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HDV2_MultiplexerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HDV2_Multiplexer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HDV2_Multiplexer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_HDV2_Multiplexer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_HDV2_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_HDV2_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_HDV2_Multiplexer * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePin )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ ICC_Settings *pPinDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePinByXml )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_STRING pPinXmlDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PinCount )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ CC_UINT *pPinCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetPin )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_UINT PinNumber,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_HDV2_Multiplexer * This,
            /* [retval][out] */ CC_TIMECODE *__MIDL__ICC_HDV2_Multiplexer0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_HDV2_Multiplexer * This,
            /* [in] */ CC_TIMECODE __MIDL__ICC_HDV2_Multiplexer0001);
        
        END_INTERFACE
    } ICC_HDV2_MultiplexerVtbl;

    interface ICC_HDV2_Multiplexer
    {
        CONST_VTBL struct ICC_HDV2_MultiplexerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HDV2_Multiplexer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HDV2_Multiplexer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HDV2_Multiplexer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HDV2_Multiplexer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_HDV2_Multiplexer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_HDV2_Multiplexer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_HDV2_Multiplexer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_HDV2_Multiplexer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_HDV2_Multiplexer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_HDV2_Multiplexer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_HDV2_Multiplexer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_HDV2_Multiplexer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_HDV2_Multiplexer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_HDV2_Multiplexer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_HDV2_Multiplexer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_HDV2_Multiplexer_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_HDV2_Multiplexer_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_HDV2_Multiplexer_CreatePin(This,pPinDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePin(This,pPinDescr,pOutput) ) 

#define ICC_HDV2_Multiplexer_CreatePinByXml(This,pPinXmlDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePinByXml(This,pPinXmlDescr,pOutput) ) 

#define ICC_HDV2_Multiplexer_get_PinCount(This,pPinCount)	\
    ( (This)->lpVtbl -> get_PinCount(This,pPinCount) ) 

#define ICC_HDV2_Multiplexer_GetPin(This,PinNumber,pOutput)	\
    ( (This)->lpVtbl -> GetPin(This,PinNumber,pOutput) ) 


#define ICC_HDV2_Multiplexer_get_InitialTimeCode(This,__MIDL__ICC_HDV2_Multiplexer0000)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,__MIDL__ICC_HDV2_Multiplexer0000) ) 

#define ICC_HDV2_Multiplexer_put_InitialTimeCode(This,__MIDL__ICC_HDV2_Multiplexer0001)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,__MIDL__ICC_HDV2_Multiplexer0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HDV2_Multiplexer_INTERFACE_DEFINED__ */


#ifndef __ICC_StreamRecognizer_INTERFACE_DEFINED__
#define __ICC_StreamRecognizer_INTERFACE_DEFINED__

/* interface ICC_StreamRecognizer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_StreamRecognizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00007777-be08-11dc-aa88-005056c00008")
    ICC_StreamRecognizer : public ICC_StreamProcessor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStreamInfo( 
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pStreamInfo) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_StreamRecognizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_StreamRecognizer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_StreamRecognizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_StreamRecognizer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_StreamRecognizer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_StreamRecognizer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_StreamRecognizer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_StreamRecognizer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_StreamRecognizer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_StreamRecognizer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_StreamRecognizer * This,
            /* [in] */ IUnknown *p);
        
        HRESULT ( STDMETHODCALLTYPE *GetStreamInfo )( 
            ICC_StreamRecognizer * This,
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pStreamInfo);
        
        END_INTERFACE
    } ICC_StreamRecognizerVtbl;

    interface ICC_StreamRecognizer
    {
        CONST_VTBL struct ICC_StreamRecognizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_StreamRecognizer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_StreamRecognizer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_StreamRecognizer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_StreamRecognizer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_StreamRecognizer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_StreamRecognizer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_StreamRecognizer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_StreamRecognizer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_StreamRecognizer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_StreamRecognizer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_StreamRecognizer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_StreamRecognizer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_StreamRecognizer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_StreamRecognizer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_StreamRecognizer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_StreamRecognizer_GetStreamInfo(This,pStreamInfo)	\
    ( (This)->lpVtbl -> GetStreamInfo(This,pStreamInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_StreamRecognizer_INTERFACE_DEFINED__ */


#ifndef __ICC_DebugDumpIncomingDataToFile_INTERFACE_DEFINED__
#define __ICC_DebugDumpIncomingDataToFile_INTERFACE_DEFINED__

/* interface ICC_DebugDumpIncomingDataToFile */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_DebugDumpIncomingDataToFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3aaf6ee8-11db-4801-9229-9993d743a0ea")
    ICC_DebugDumpIncomingDataToFile : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DumpIncomingDataToFile( 
            /* [in] */ CC_STRING pFileName) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_DebugDumpIncomingDataToFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_DebugDumpIncomingDataToFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_DebugDumpIncomingDataToFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_DebugDumpIncomingDataToFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *DumpIncomingDataToFile )( 
            ICC_DebugDumpIncomingDataToFile * This,
            /* [in] */ CC_STRING pFileName);
        
        END_INTERFACE
    } ICC_DebugDumpIncomingDataToFileVtbl;

    interface ICC_DebugDumpIncomingDataToFile
    {
        CONST_VTBL struct ICC_DebugDumpIncomingDataToFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_DebugDumpIncomingDataToFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_DebugDumpIncomingDataToFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_DebugDumpIncomingDataToFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_DebugDumpIncomingDataToFile_DumpIncomingDataToFile(This,pFileName)	\
    ( (This)->lpVtbl -> DumpIncomingDataToFile(This,pFileName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_DebugDumpIncomingDataToFile_INTERFACE_DEFINED__ */


#ifndef __ICC_PCR_Callback_INTERFACE_DEFINED__
#define __ICC_PCR_Callback_INTERFACE_DEFINED__

/* interface ICC_PCR_Callback */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_PCR_Callback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0fdcdb5a-5eee-4152-9a14-d9daaa755be8")
    ICC_PCR_Callback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE HandlePCR( 
            CC_TIME pcr) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_PCR_CallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_PCR_Callback * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_PCR_Callback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_PCR_Callback * This);
        
        HRESULT ( STDMETHODCALLTYPE *HandlePCR )( 
            ICC_PCR_Callback * This,
            CC_TIME pcr);
        
        END_INTERFACE
    } ICC_PCR_CallbackVtbl;

    interface ICC_PCR_Callback
    {
        CONST_VTBL struct ICC_PCR_CallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_PCR_Callback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_PCR_Callback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_PCR_Callback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_PCR_Callback_HandlePCR(This,pcr)	\
    ( (This)->lpVtbl -> HandlePCR(This,pcr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_PCR_Callback_INTERFACE_DEFINED__ */


#ifndef __ICC_PCR_CallbackProp_INTERFACE_DEFINED__
#define __ICC_PCR_CallbackProp_INTERFACE_DEFINED__

/* interface ICC_PCR_CallbackProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_PCR_CallbackProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c83bc0f4-dffb-4061-b60e-60895f1d4f7d")
    ICC_PCR_CallbackProp : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PCR_Callback( 
            /* [retval][out] */ ICC_PCR_Callback **ppcb) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PCR_Callback( 
            /* [in] */ ICC_PCR_Callback *pcb) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_PCR_CallbackPropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_PCR_CallbackProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_PCR_CallbackProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_PCR_CallbackProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PCR_Callback )( 
            ICC_PCR_CallbackProp * This,
            /* [retval][out] */ ICC_PCR_Callback **ppcb);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PCR_Callback )( 
            ICC_PCR_CallbackProp * This,
            /* [in] */ ICC_PCR_Callback *pcb);
        
        END_INTERFACE
    } ICC_PCR_CallbackPropVtbl;

    interface ICC_PCR_CallbackProp
    {
        CONST_VTBL struct ICC_PCR_CallbackPropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_PCR_CallbackProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_PCR_CallbackProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_PCR_CallbackProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_PCR_CallbackProp_get_PCR_Callback(This,ppcb)	\
    ( (This)->lpVtbl -> get_PCR_Callback(This,ppcb) ) 

#define ICC_PCR_CallbackProp_put_PCR_Callback(This,pcb)	\
    ( (This)->lpVtbl -> put_PCR_Callback(This,pcb) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_PCR_CallbackProp_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0199 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum CC_MP4_CHUNK_FRAGMENT_POSITION
    {
        CC_MP4_INTERMEDIATE_POSITION	= 0,
        CC_MP4_START_POSITION	= 0x1,
        CC_MP4_END_POSITION	= 0x2
    } 	CC_MP4_CHUNK_FRAGMENT_POSITION;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0199_v0_0_s_ifspec;

#ifndef __ICC_MP4_Multiplexer_INTERFACE_DEFINED__
#define __ICC_MP4_Multiplexer_INTERFACE_DEFINED__

/* interface ICC_MP4_Multiplexer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_Multiplexer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4a4fc69f-4a41-4785-97d6-8fa37507769c")
    ICC_MP4_Multiplexer : public ICC_Multiplexer
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ CC_TIME *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Duration( 
            /* [in] */ CC_TIME v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_MultiplexerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_Multiplexer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_Multiplexer * This);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            ICC_MP4_Multiplexer * This,
            /* [defaultvalue][in] */ ICC_Settings *pSettings);
        
        HRESULT ( STDMETHODCALLTYPE *InitByXml )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_STRING strXML);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_BOOL bFlush,
            /* [defaultvalue][retval][out] */ CC_BOOL *pbDone);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsActive )( 
            ICC_MP4_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_StreamProcessor0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamInfo )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsDataReady )( 
            ICC_MP4_Multiplexer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataInfo )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ ICC_Settings **s);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputCallback )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ IUnknown **p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OutputCallback )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ IUnknown *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataSize )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_Encoder0000);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            ICC_MP4_Multiplexer * This,
            /* [size_is][out] */ CC_PBYTE pbData,
            /* [in] */ CC_UINT cbBufSize,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePin )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ ICC_Settings *pPinDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePinByXml )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_STRING pPinXmlDescr,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PinCount )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ CC_UINT *pPinCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetPin )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_UINT PinNumber,
            /* [retval][out] */ ICC_ByteStreamConsumer **pOutput);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_MP4_Multiplexer * This,
            /* [retval][out] */ CC_TIME *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Duration )( 
            ICC_MP4_Multiplexer * This,
            /* [in] */ CC_TIME v);
        
        END_INTERFACE
    } ICC_MP4_MultiplexerVtbl;

    interface ICC_MP4_Multiplexer
    {
        CONST_VTBL struct ICC_MP4_MultiplexerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_Multiplexer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_Multiplexer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_Multiplexer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_Multiplexer_Init(This,pSettings)	\
    ( (This)->lpVtbl -> Init(This,pSettings) ) 

#define ICC_MP4_Multiplexer_InitByXml(This,strXML)	\
    ( (This)->lpVtbl -> InitByXml(This,strXML) ) 

#define ICC_MP4_Multiplexer_Done(This,bFlush,pbDone)	\
    ( (This)->lpVtbl -> Done(This,bFlush,pbDone) ) 

#define ICC_MP4_Multiplexer_get_IsActive(This,__MIDL__ICC_StreamProcessor0000)	\
    ( (This)->lpVtbl -> get_IsActive(This,__MIDL__ICC_StreamProcessor0000) ) 

#define ICC_MP4_Multiplexer_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MP4_Multiplexer_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MP4_Multiplexer_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MP4_Multiplexer_get_StreamInfo(This,p)	\
    ( (This)->lpVtbl -> get_StreamInfo(This,p) ) 

#define ICC_MP4_Multiplexer_get_IsDataReady(This,p)	\
    ( (This)->lpVtbl -> get_IsDataReady(This,p) ) 

#define ICC_MP4_Multiplexer_get_DataInfo(This,s)	\
    ( (This)->lpVtbl -> get_DataInfo(This,s) ) 

#define ICC_MP4_Multiplexer_get_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> get_OutputCallback(This,p) ) 

#define ICC_MP4_Multiplexer_put_OutputCallback(This,p)	\
    ( (This)->lpVtbl -> put_OutputCallback(This,p) ) 


#define ICC_MP4_Multiplexer_get_DataSize(This,__MIDL__ICC_Encoder0000)	\
    ( (This)->lpVtbl -> get_DataSize(This,__MIDL__ICC_Encoder0000) ) 

#define ICC_MP4_Multiplexer_GetData(This,pbData,cbBufSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetData(This,pbData,cbBufSize,pcbRetSize) ) 


#define ICC_MP4_Multiplexer_CreatePin(This,pPinDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePin(This,pPinDescr,pOutput) ) 

#define ICC_MP4_Multiplexer_CreatePinByXml(This,pPinXmlDescr,pOutput)	\
    ( (This)->lpVtbl -> CreatePinByXml(This,pPinXmlDescr,pOutput) ) 

#define ICC_MP4_Multiplexer_get_PinCount(This,pPinCount)	\
    ( (This)->lpVtbl -> get_PinCount(This,pPinCount) ) 

#define ICC_MP4_Multiplexer_GetPin(This,PinNumber,pOutput)	\
    ( (This)->lpVtbl -> GetPin(This,PinNumber,pOutput) ) 


#define ICC_MP4_Multiplexer_get_Duration(This,p)	\
    ( (This)->lpVtbl -> get_Duration(This,p) ) 

#define ICC_MP4_Multiplexer_put_Duration(This,v)	\
    ( (This)->lpVtbl -> put_Duration(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_Multiplexer_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_MultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_MP4_MultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_MP4_MultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_MultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("29d573e4-e709-41e8-a73c-70876f01a578")
    ICC_MP4_MultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Fragmented( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Fragmented( 
            /* [in] */ CC_BOOL p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WriteSingleFragment( 
            /* [retval][out] */ CC_BOOL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_WriteSingleFragment( 
            /* [in] */ CC_BOOL p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_UpdatePeriod( 
            /* [retval][out] */ CC_PERIOD *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_UpdatePeriod( 
            /* [in] */ CC_PERIOD p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DataGranularity( 
            /* [retval][out] */ CC_UINT *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DataGranularity( 
            /* [in] */ CC_UINT p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ ICC_Settings **pp) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ ICC_Settings *p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterleavingPeriod( 
            /* [retval][out] */ CC_PERIOD *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterleavingPeriod( 
            /* [in] */ CC_PERIOD v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_MultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_MultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_MultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fragmented )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Fragmented )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_BOOL p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WriteSingleFragment )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_BOOL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_WriteSingleFragment )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_BOOL p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdatePeriod )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdatePeriod )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_PERIOD p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataGranularity )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_UINT *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataGranularity )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_UINT p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ ICC_Settings **pp);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ ICC_Settings *p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterleavingPeriod )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [retval][out] */ CC_PERIOD *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterleavingPeriod )( 
            ICC_MP4_MultiplexerSettings * This,
            /* [in] */ CC_PERIOD v);
        
        END_INTERFACE
    } ICC_MP4_MultiplexerSettingsVtbl;

    interface ICC_MP4_MultiplexerSettings
    {
        CONST_VTBL struct ICC_MP4_MultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_MultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_MultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_MultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_MultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MP4_MultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MP4_MultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MP4_MultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MP4_MultiplexerSettings_get_Fragmented(This,p)	\
    ( (This)->lpVtbl -> get_Fragmented(This,p) ) 

#define ICC_MP4_MultiplexerSettings_put_Fragmented(This,p)	\
    ( (This)->lpVtbl -> put_Fragmented(This,p) ) 

#define ICC_MP4_MultiplexerSettings_get_WriteSingleFragment(This,p)	\
    ( (This)->lpVtbl -> get_WriteSingleFragment(This,p) ) 

#define ICC_MP4_MultiplexerSettings_put_WriteSingleFragment(This,p)	\
    ( (This)->lpVtbl -> put_WriteSingleFragment(This,p) ) 

#define ICC_MP4_MultiplexerSettings_get_UpdatePeriod(This,p)	\
    ( (This)->lpVtbl -> get_UpdatePeriod(This,p) ) 

#define ICC_MP4_MultiplexerSettings_put_UpdatePeriod(This,p)	\
    ( (This)->lpVtbl -> put_UpdatePeriod(This,p) ) 

#define ICC_MP4_MultiplexerSettings_get_DataGranularity(This,p)	\
    ( (This)->lpVtbl -> get_DataGranularity(This,p) ) 

#define ICC_MP4_MultiplexerSettings_put_DataGranularity(This,p)	\
    ( (This)->lpVtbl -> put_DataGranularity(This,p) ) 

#define ICC_MP4_MultiplexerSettings_get_Format(This,pp)	\
    ( (This)->lpVtbl -> get_Format(This,pp) ) 

#define ICC_MP4_MultiplexerSettings_put_Format(This,p)	\
    ( (This)->lpVtbl -> put_Format(This,p) ) 

#define ICC_MP4_MultiplexerSettings_get_InterleavingPeriod(This,p)	\
    ( (This)->lpVtbl -> get_InterleavingPeriod(This,p) ) 

#define ICC_MP4_MultiplexerSettings_put_InterleavingPeriod(This,v)	\
    ( (This)->lpVtbl -> put_InterleavingPeriod(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_MultiplexerSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_MuxerPinSettings_INTERFACE_DEFINED__
#define __ICC_MP4_MuxerPinSettings_INTERFACE_DEFINED__

/* interface ICC_MP4_MuxerPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_MuxerPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc0a4c83-d677-4a69-8514-5be234b14bda")
    ICC_MP4_MuxerPinSettings : public ICC_ElementaryStreamSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BasePTS( 
            /* [retval][out] */ CC_TIME *__MIDL__ICC_MP4_MuxerPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BasePTS( 
            /* [in] */ CC_TIME __MIDL__ICC_MP4_MuxerPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SampleRate( 
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_MP4_MuxerPinSettings0002) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SampleRate( 
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_MP4_MuxerPinSettings0003) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SubTypeCode( 
            /* [retval][out] */ DWORD *__MIDL__ICC_MP4_MuxerPinSettings0004) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SubTypeCode( 
            /* [in] */ DWORD __MIDL__ICC_MP4_MuxerPinSettings0005) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ReferenceURL( 
            /* [retval][out] */ CC_STRING *pURL) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ReferenceURL( 
            /* [in] */ CC_STRING URL) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TrackTimeScale( 
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MP4_MuxerPinSettings0006) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TrackTimeScale( 
            /* [in] */ CC_UINT __MIDL__ICC_MP4_MuxerPinSettings0007) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_MuxerPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_MuxerPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_MuxerPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_FRAME_RATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_MP4_MuxerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_MP4_MuxerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_MP4_MuxerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_MP4_MuxerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubTypeCode )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_MP4_MuxerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SubTypeCode )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_MP4_MuxerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceURL )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_STRING *pURL);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReferenceURL )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_STRING URL);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrackTimeScale )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MP4_MuxerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrackTimeScale )( 
            ICC_MP4_MuxerPinSettings * This,
            /* [in] */ CC_UINT __MIDL__ICC_MP4_MuxerPinSettings0007);
        
        END_INTERFACE
    } ICC_MP4_MuxerPinSettingsVtbl;

    interface ICC_MP4_MuxerPinSettings
    {
        CONST_VTBL struct ICC_MP4_MuxerPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_MuxerPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_MuxerPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_MuxerPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_MuxerPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MP4_MuxerPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MP4_MuxerPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MP4_MuxerPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MP4_MuxerPinSettings_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_MP4_MuxerPinSettings_put_StreamType(This,v)	\
    ( (This)->lpVtbl -> put_StreamType(This,v) ) 

#define ICC_MP4_MuxerPinSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MP4_MuxerPinSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_MP4_MuxerPinSettings_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#define ICC_MP4_MuxerPinSettings_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 


#define ICC_MP4_MuxerPinSettings_get_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0000)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0000) ) 

#define ICC_MP4_MuxerPinSettings_put_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0001)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0001) ) 

#define ICC_MP4_MuxerPinSettings_get_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0002)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0002) ) 

#define ICC_MP4_MuxerPinSettings_put_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0003)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0003) ) 

#define ICC_MP4_MuxerPinSettings_get_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0004)	\
    ( (This)->lpVtbl -> get_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0004) ) 

#define ICC_MP4_MuxerPinSettings_put_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0005)	\
    ( (This)->lpVtbl -> put_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0005) ) 

#define ICC_MP4_MuxerPinSettings_get_ReferenceURL(This,pURL)	\
    ( (This)->lpVtbl -> get_ReferenceURL(This,pURL) ) 

#define ICC_MP4_MuxerPinSettings_put_ReferenceURL(This,URL)	\
    ( (This)->lpVtbl -> put_ReferenceURL(This,URL) ) 

#define ICC_MP4_MuxerPinSettings_get_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0006)	\
    ( (This)->lpVtbl -> get_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0006) ) 

#define ICC_MP4_MuxerPinSettings_put_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0007)	\
    ( (This)->lpVtbl -> put_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0007) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_MuxerPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_MuxerVideoPinSettings_INTERFACE_DEFINED__
#define __ICC_MP4_MuxerVideoPinSettings_INTERFACE_DEFINED__

/* interface ICC_MP4_MuxerVideoPinSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_MuxerVideoPinSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c08d455e-b958-4cda-ab53-6682f4fb2492")
    ICC_MP4_MuxerVideoPinSettings : public ICC_MP4_MuxerPinSettings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ColorCoefs( 
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_MP4_MuxerVideoPinSettings0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ColorCoefs( 
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_MP4_MuxerVideoPinSettings0001) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AspectRatio( 
            /* [retval][out] */ CC_RATIONAL *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AspectRatio( 
            /* [in] */ CC_RATIONAL v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameSize( 
            /* [retval][out] */ CC_SIZE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FrameSize( 
            /* [in] */ CC_SIZE v) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_InterlaceType( 
            /* [retval][out] */ CC_INTERLACE_TYPE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_InterlaceType( 
            /* [in] */ CC_INTERLACE_TYPE v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_MuxerVideoPinSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_MuxerVideoPinSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_MuxerVideoPinSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_StreamType )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_ELEMENTARY_STREAM_TYPE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_StreamType )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_ELEMENTARY_STREAM_TYPE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BitRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_BITRATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BitRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_BITRATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_FRAME_RATE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_FRAME_RATE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BasePTS )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_TIME *__MIDL__ICC_MP4_MuxerPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BasePTS )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_TIME __MIDL__ICC_MP4_MuxerPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SampleRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_SAMPLE_RATE *__MIDL__ICC_MP4_MuxerPinSettings0002);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SampleRate )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_SAMPLE_RATE __MIDL__ICC_MP4_MuxerPinSettings0003);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SubTypeCode )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ DWORD *__MIDL__ICC_MP4_MuxerPinSettings0004);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SubTypeCode )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ DWORD __MIDL__ICC_MP4_MuxerPinSettings0005);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReferenceURL )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_STRING *pURL);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReferenceURL )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_STRING URL);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrackTimeScale )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_UINT *__MIDL__ICC_MP4_MuxerPinSettings0006);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrackTimeScale )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_UINT __MIDL__ICC_MP4_MuxerPinSettings0007);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorCoefs )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_COLOUR_DESCRIPTION *__MIDL__ICC_MP4_MuxerVideoPinSettings0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorCoefs )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_COLOUR_DESCRIPTION __MIDL__ICC_MP4_MuxerVideoPinSettings0001);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AspectRatio )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_RATIONAL *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AspectRatio )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_RATIONAL v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameSize )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_SIZE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FrameSize )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_SIZE v);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InterlaceType )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [retval][out] */ CC_INTERLACE_TYPE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InterlaceType )( 
            ICC_MP4_MuxerVideoPinSettings * This,
            /* [in] */ CC_INTERLACE_TYPE v);
        
        END_INTERFACE
    } ICC_MP4_MuxerVideoPinSettingsVtbl;

    interface ICC_MP4_MuxerVideoPinSettings
    {
        CONST_VTBL struct ICC_MP4_MuxerVideoPinSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_MuxerVideoPinSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_MuxerVideoPinSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_MuxerVideoPinSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_MuxerVideoPinSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MP4_MuxerVideoPinSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MP4_MuxerVideoPinSettings_get_StreamType(This,p)	\
    ( (This)->lpVtbl -> get_StreamType(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_StreamType(This,v)	\
    ( (This)->lpVtbl -> put_StreamType(This,v) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_BitRate(This,p)	\
    ( (This)->lpVtbl -> get_BitRate(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_BitRate(This,v)	\
    ( (This)->lpVtbl -> put_BitRate(This,v) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_FrameRate(This,p)	\
    ( (This)->lpVtbl -> get_FrameRate(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_FrameRate(This,v)	\
    ( (This)->lpVtbl -> put_FrameRate(This,v) ) 


#define ICC_MP4_MuxerVideoPinSettings_get_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0000)	\
    ( (This)->lpVtbl -> get_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0000) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0001)	\
    ( (This)->lpVtbl -> put_BasePTS(This,__MIDL__ICC_MP4_MuxerPinSettings0001) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0002)	\
    ( (This)->lpVtbl -> get_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0002) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0003)	\
    ( (This)->lpVtbl -> put_SampleRate(This,__MIDL__ICC_MP4_MuxerPinSettings0003) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0004)	\
    ( (This)->lpVtbl -> get_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0004) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0005)	\
    ( (This)->lpVtbl -> put_SubTypeCode(This,__MIDL__ICC_MP4_MuxerPinSettings0005) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_ReferenceURL(This,pURL)	\
    ( (This)->lpVtbl -> get_ReferenceURL(This,pURL) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_ReferenceURL(This,URL)	\
    ( (This)->lpVtbl -> put_ReferenceURL(This,URL) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0006)	\
    ( (This)->lpVtbl -> get_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0006) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0007)	\
    ( (This)->lpVtbl -> put_TrackTimeScale(This,__MIDL__ICC_MP4_MuxerPinSettings0007) ) 


#define ICC_MP4_MuxerVideoPinSettings_get_ColorCoefs(This,__MIDL__ICC_MP4_MuxerVideoPinSettings0000)	\
    ( (This)->lpVtbl -> get_ColorCoefs(This,__MIDL__ICC_MP4_MuxerVideoPinSettings0000) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_ColorCoefs(This,__MIDL__ICC_MP4_MuxerVideoPinSettings0001)	\
    ( (This)->lpVtbl -> put_ColorCoefs(This,__MIDL__ICC_MP4_MuxerVideoPinSettings0001) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_AspectRatio(This,p)	\
    ( (This)->lpVtbl -> get_AspectRatio(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_AspectRatio(This,v)	\
    ( (This)->lpVtbl -> put_AspectRatio(This,v) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_FrameSize(This,p)	\
    ( (This)->lpVtbl -> get_FrameSize(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_FrameSize(This,v)	\
    ( (This)->lpVtbl -> put_FrameSize(This,v) ) 

#define ICC_MP4_MuxerVideoPinSettings_get_InterlaceType(This,p)	\
    ( (This)->lpVtbl -> get_InterlaceType(This,p) ) 

#define ICC_MP4_MuxerVideoPinSettings_put_InterlaceType(This,v)	\
    ( (This)->lpVtbl -> put_InterlaceType(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_MuxerVideoPinSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_ReferenceDataConsumer_INTERFACE_DEFINED__
#define __ICC_ReferenceDataConsumer_INTERFACE_DEFINED__

/* interface ICC_ReferenceDataConsumer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_ReferenceDataConsumer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("64e71555-ddd3-4106-a865-6b0e6e9e63cf")
    ICC_ReferenceDataConsumer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProcessReferenceData( 
            /* [in] */ CC_OFFSET fileOffset,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_ReferenceDataConsumerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_ReferenceDataConsumer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_ReferenceDataConsumer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_ReferenceDataConsumer * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProcessReferenceData )( 
            ICC_ReferenceDataConsumer * This,
            /* [in] */ CC_OFFSET fileOffset,
            /* [size_is][in] */ CC_PCBYTE pbData,
            /* [in] */ CC_UINT cbSize,
            /* [in] */ CC_TIME pts,
            /* [defaultvalue][retval][out] */ CC_UINT *pcbProcessed);
        
        END_INTERFACE
    } ICC_ReferenceDataConsumerVtbl;

    interface ICC_ReferenceDataConsumer
    {
        CONST_VTBL struct ICC_ReferenceDataConsumerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_ReferenceDataConsumer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_ReferenceDataConsumer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_ReferenceDataConsumer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_ReferenceDataConsumer_ProcessReferenceData(This,fileOffset,pbData,cbSize,pts,pcbProcessed)	\
    ( (This)->lpVtbl -> ProcessReferenceData(This,fileOffset,pbData,cbSize,pts,pcbProcessed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_ReferenceDataConsumer_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_FragmentedPin_INTERFACE_DEFINED__
#define __ICC_MP4_FragmentedPin_INTERFACE_DEFINED__

/* interface ICC_MP4_FragmentedPin */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_FragmentedPin;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b26b77e5-a8a2-41d6-a93f-18ac4891b923")
    ICC_MP4_FragmentedPin : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FlushFragment( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCodecPrivateData( 
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_FragmentedPinVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_FragmentedPin * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_FragmentedPin * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_FragmentedPin * This);
        
        HRESULT ( STDMETHODCALLTYPE *FlushFragment )( 
            ICC_MP4_FragmentedPin * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCodecPrivateData )( 
            ICC_MP4_FragmentedPin * This,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_MP4_FragmentedPinVtbl;

    interface ICC_MP4_FragmentedPin
    {
        CONST_VTBL struct ICC_MP4_FragmentedPinVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_FragmentedPin_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_FragmentedPin_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_FragmentedPin_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_FragmentedPin_FlushFragment(This)	\
    ( (This)->lpVtbl -> FlushFragment(This) ) 

#define ICC_MP4_FragmentedPin_GetCodecPrivateData(This,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCodecPrivateData(This,pbData,cbSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_FragmentedPin_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_InitialTimeCodeProp_INTERFACE_DEFINED__
#define __ICC_MP4_InitialTimeCodeProp_INTERFACE_DEFINED__

/* interface ICC_MP4_InitialTimeCodeProp */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_InitialTimeCodeProp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A3BA7AF7-E739-43d5-8D90-8EF256CED5B7")
    ICC_MP4_InitialTimeCodeProp : public ICC_InitialTimeCodeProp
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SourceTapeName( 
            /* [retval][out] */ CC_STRING *__MIDL__ICC_MP4_InitialTimeCodeProp0000) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_SourceTapeName( 
            /* [in] */ CC_STRING __MIDL__ICC_MP4_InitialTimeCodeProp0001) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_InitialTimeCodePropVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_InitialTimeCodeProp * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_InitialTimeCodeProp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_InitialTimeCodeProp * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_InitialTimeCode )( 
            ICC_MP4_InitialTimeCodeProp * This,
            /* [retval][out] */ CC_TIMECODE *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_InitialTimeCode )( 
            ICC_MP4_InitialTimeCodeProp * This,
            /* [in] */ CC_TIMECODE t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceTapeName )( 
            ICC_MP4_InitialTimeCodeProp * This,
            /* [retval][out] */ CC_STRING *__MIDL__ICC_MP4_InitialTimeCodeProp0000);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceTapeName )( 
            ICC_MP4_InitialTimeCodeProp * This,
            /* [in] */ CC_STRING __MIDL__ICC_MP4_InitialTimeCodeProp0001);
        
        END_INTERFACE
    } ICC_MP4_InitialTimeCodePropVtbl;

    interface ICC_MP4_InitialTimeCodeProp
    {
        CONST_VTBL struct ICC_MP4_InitialTimeCodePropVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_InitialTimeCodeProp_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_InitialTimeCodeProp_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_InitialTimeCodeProp_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_InitialTimeCodeProp_get_InitialTimeCode(This,t)	\
    ( (This)->lpVtbl -> get_InitialTimeCode(This,t) ) 

#define ICC_MP4_InitialTimeCodeProp_put_InitialTimeCode(This,t)	\
    ( (This)->lpVtbl -> put_InitialTimeCode(This,t) ) 


#define ICC_MP4_InitialTimeCodeProp_get_SourceTapeName(This,__MIDL__ICC_MP4_InitialTimeCodeProp0000)	\
    ( (This)->lpVtbl -> get_SourceTapeName(This,__MIDL__ICC_MP4_InitialTimeCodeProp0000) ) 

#define ICC_MP4_InitialTimeCodeProp_put_SourceTapeName(This,__MIDL__ICC_MP4_InitialTimeCodeProp0001)	\
    ( (This)->lpVtbl -> put_SourceTapeName(This,__MIDL__ICC_MP4_InitialTimeCodeProp0001) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_InitialTimeCodeProp_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4_MpegDashSettings_INTERFACE_DEFINED__
#define __ICC_MP4_MpegDashSettings_INTERFACE_DEFINED__

/* interface ICC_MP4_MpegDashSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4_MpegDashSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53919957-D8DA-41BC-B767-40344EDDD557")
    ICC_MP4_MpegDashSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FragmentDuration( 
            /* [retval][out] */ CC_TIME *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FragmentDuration( 
            /* [in] */ CC_TIME v) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4_MpegDashSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4_MpegDashSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4_MpegDashSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4_MpegDashSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_MP4_MpegDashSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_MP4_MpegDashSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_MP4_MpegDashSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_MP4_MpegDashSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FragmentDuration )( 
            ICC_MP4_MpegDashSettings * This,
            /* [retval][out] */ CC_TIME *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FragmentDuration )( 
            ICC_MP4_MpegDashSettings * This,
            /* [in] */ CC_TIME v);
        
        END_INTERFACE
    } ICC_MP4_MpegDashSettingsVtbl;

    interface ICC_MP4_MpegDashSettings
    {
        CONST_VTBL struct ICC_MP4_MpegDashSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4_MpegDashSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4_MpegDashSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4_MpegDashSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4_MpegDashSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_MP4_MpegDashSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_MP4_MpegDashSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_MP4_MpegDashSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_MP4_MpegDashSettings_get_FragmentDuration(This,p)	\
    ( (This)->lpVtbl -> get_FragmentDuration(This,p) ) 

#define ICC_MP4_MpegDashSettings_put_FragmentDuration(This,v)	\
    ( (This)->lpVtbl -> put_FragmentDuration(This,v) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4_MpegDashSettings_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4ChunkInfo_INTERFACE_DEFINED__
#define __ICC_MP4ChunkInfo_INTERFACE_DEFINED__

/* interface ICC_MP4ChunkInfo */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4ChunkInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("875370A3-312E-4D45-BD6F-4EAF62C0944A")
    ICC_MP4ChunkInfo : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FragmentPosition( 
            /* [retval][out] */ CC_MP4_CHUNK_FRAGMENT_POSITION *p) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4ChunkInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4ChunkInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4ChunkInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4ChunkInfo * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FragmentPosition )( 
            ICC_MP4ChunkInfo * This,
            /* [retval][out] */ CC_MP4_CHUNK_FRAGMENT_POSITION *p);
        
        END_INTERFACE
    } ICC_MP4ChunkInfoVtbl;

    interface ICC_MP4ChunkInfo
    {
        CONST_VTBL struct ICC_MP4ChunkInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4ChunkInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4ChunkInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4ChunkInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4ChunkInfo_get_FragmentPosition(This,p)	\
    ( (This)->lpVtbl -> get_FragmentPosition(This,p) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4ChunkInfo_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4Fragment_INTERFACE_DEFINED__
#define __ICC_MP4Fragment_INTERFACE_DEFINED__

/* interface ICC_MP4Fragment */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4Fragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("39D64FEB-4AFC-43B7-A319-67740104CE44")
    ICC_MP4Fragment : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SequenceNumber( 
            /* [retval][out] */ CC_UINT *pSequenceNumber) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4FragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4Fragment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4Fragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4Fragment * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceNumber )( 
            ICC_MP4Fragment * This,
            /* [retval][out] */ CC_UINT *pSequenceNumber);
        
        END_INTERFACE
    } ICC_MP4FragmentVtbl;

    interface ICC_MP4Fragment
    {
        CONST_VTBL struct ICC_MP4FragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4Fragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4Fragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4Fragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4Fragment_get_SequenceNumber(This,pSequenceNumber)	\
    ( (This)->lpVtbl -> get_SequenceNumber(This,pSequenceNumber) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4Fragment_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4InitFragment_INTERFACE_DEFINED__
#define __ICC_MP4InitFragment_INTERFACE_DEFINED__

/* interface ICC_MP4InitFragment */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4InitFragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("80BDD2C9-678A-407A-BA3C-503C452EB433")
    ICC_MP4InitFragment : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsIndexTableFilled( 
            /* [retval][out] */ CC_BOOL *pIndexTableFilled) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4InitFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4InitFragment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4InitFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4InitFragment * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsIndexTableFilled )( 
            ICC_MP4InitFragment * This,
            /* [retval][out] */ CC_BOOL *pIndexTableFilled);
        
        END_INTERFACE
    } ICC_MP4InitFragmentVtbl;

    interface ICC_MP4InitFragment
    {
        CONST_VTBL struct ICC_MP4InitFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4InitFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4InitFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4InitFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4InitFragment_get_IsIndexTableFilled(This,pIndexTableFilled)	\
    ( (This)->lpVtbl -> get_IsIndexTableFilled(This,pIndexTableFilled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4InitFragment_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4RandomAccessFragment_INTERFACE_DEFINED__
#define __ICC_MP4RandomAccessFragment_INTERFACE_DEFINED__

/* interface ICC_MP4RandomAccessFragment */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4RandomAccessFragment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A8795B72-CA30-4FF5-9899-3F7DBFAD4AA9")
    ICC_MP4RandomAccessFragment : public IUnknown
    {
    public:
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4RandomAccessFragmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4RandomAccessFragment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4RandomAccessFragment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4RandomAccessFragment * This);
        
        END_INTERFACE
    } ICC_MP4RandomAccessFragmentVtbl;

    interface ICC_MP4RandomAccessFragment
    {
        CONST_VTBL struct ICC_MP4RandomAccessFragmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4RandomAccessFragment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4RandomAccessFragment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4RandomAccessFragment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4RandomAccessFragment_INTERFACE_DEFINED__ */


#ifndef __ICC_MP4Producer_INTERFACE_DEFINED__
#define __ICC_MP4Producer_INTERFACE_DEFINED__

/* interface ICC_MP4Producer */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MP4Producer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ACCD0235-EE69-4E40-B8AA-E4D1D44E6DD6")
    ICC_MP4Producer : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsChunkAvailable( 
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChunkOffset( 
            /* [retval][out] */ CC_OFFSET *pOffset) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChunkData( 
            /* [retval][out] */ CC_PCBYTE *ppData) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChunkDataSize( 
            /* [retval][out] */ CC_AMOUNT *pDataSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetChunkInfo( 
            /* [retval][out] */ ICC_MP4ChunkInfo **ppInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataContext( 
            /* [retval][out] */ IUnknown **ppDataContext) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MP4ProducerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MP4Producer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MP4Producer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MP4Producer * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsChunkAvailable )( 
            ICC_MP4Producer * This,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChunkOffset )( 
            ICC_MP4Producer * This,
            /* [retval][out] */ CC_OFFSET *pOffset);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChunkData )( 
            ICC_MP4Producer * This,
            /* [retval][out] */ CC_PCBYTE *ppData);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChunkDataSize )( 
            ICC_MP4Producer * This,
            /* [retval][out] */ CC_AMOUNT *pDataSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetChunkInfo )( 
            ICC_MP4Producer * This,
            /* [retval][out] */ ICC_MP4ChunkInfo **ppInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataContext )( 
            ICC_MP4Producer * This,
            /* [retval][out] */ IUnknown **ppDataContext);
        
        END_INTERFACE
    } ICC_MP4ProducerVtbl;

    interface ICC_MP4Producer
    {
        CONST_VTBL struct ICC_MP4ProducerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MP4Producer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MP4Producer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MP4Producer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MP4Producer_IsChunkAvailable(This,pResult)	\
    ( (This)->lpVtbl -> IsChunkAvailable(This,pResult) ) 

#define ICC_MP4Producer_get_ChunkOffset(This,pOffset)	\
    ( (This)->lpVtbl -> get_ChunkOffset(This,pOffset) ) 

#define ICC_MP4Producer_get_ChunkData(This,ppData)	\
    ( (This)->lpVtbl -> get_ChunkData(This,ppData) ) 

#define ICC_MP4Producer_get_ChunkDataSize(This,pDataSize)	\
    ( (This)->lpVtbl -> get_ChunkDataSize(This,pDataSize) ) 

#define ICC_MP4Producer_GetChunkInfo(This,ppInfo)	\
    ( (This)->lpVtbl -> GetChunkInfo(This,ppInfo) ) 

#define ICC_MP4Producer_GetDataContext(This,ppDataContext)	\
    ( (This)->lpVtbl -> GetDataContext(This,ppDataContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MP4Producer_INTERFACE_DEFINED__ */


#ifndef __ICC_HLS_MultiplexerSettings_INTERFACE_DEFINED__
#define __ICC_HLS_MultiplexerSettings_INTERFACE_DEFINED__

/* interface ICC_HLS_MultiplexerSettings */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_HLS_MultiplexerSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6397d60-f204-4acc-8339-d94dba6fa4dd")
    ICC_HLS_MultiplexerSettings : public ICC_Settings
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ChunkDurationSec( 
            /* [retval][out] */ CC_UINT *t) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ChunkDurationSec( 
            /* [in] */ CC_UINT t) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FirstChunkNumber( 
            /* [retval][out] */ CC_UINT *t) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FirstChunkNumber( 
            /* [in] */ CC_UINT t) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_HLS_MultiplexerSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_HLS_MultiplexerSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_HLS_MultiplexerSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName);
        
        HRESULT ( STDMETHODCALLTYPE *Assigned )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ LPCSTR strVarName,
            /* [defaultvalue][retval][out] */ CC_BOOL *__MIDL__ICC_Settings0000);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [retval][out] */ CC_STRING *pstrXml);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_XML )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ CC_STRING strXml);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChunkDurationSec )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [retval][out] */ CC_UINT *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChunkDurationSec )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ CC_UINT t);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChunkNumber )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [retval][out] */ CC_UINT *t);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FirstChunkNumber )( 
            ICC_HLS_MultiplexerSettings * This,
            /* [in] */ CC_UINT t);
        
        END_INTERFACE
    } ICC_HLS_MultiplexerSettingsVtbl;

    interface ICC_HLS_MultiplexerSettings
    {
        CONST_VTBL struct ICC_HLS_MultiplexerSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_HLS_MultiplexerSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_HLS_MultiplexerSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_HLS_MultiplexerSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_HLS_MultiplexerSettings_Clear(This,strVarName)	\
    ( (This)->lpVtbl -> Clear(This,strVarName) ) 

#define ICC_HLS_MultiplexerSettings_Assigned(This,strVarName,__MIDL__ICC_Settings0000)	\
    ( (This)->lpVtbl -> Assigned(This,strVarName,__MIDL__ICC_Settings0000) ) 

#define ICC_HLS_MultiplexerSettings_get_XML(This,pstrXml)	\
    ( (This)->lpVtbl -> get_XML(This,pstrXml) ) 

#define ICC_HLS_MultiplexerSettings_put_XML(This,strXml)	\
    ( (This)->lpVtbl -> put_XML(This,strXml) ) 


#define ICC_HLS_MultiplexerSettings_get_ChunkDurationSec(This,t)	\
    ( (This)->lpVtbl -> get_ChunkDurationSec(This,t) ) 

#define ICC_HLS_MultiplexerSettings_put_ChunkDurationSec(This,t)	\
    ( (This)->lpVtbl -> put_ChunkDurationSec(This,t) ) 

#define ICC_HLS_MultiplexerSettings_get_FirstChunkNumber(This,t)	\
    ( (This)->lpVtbl -> get_FirstChunkNumber(This,t) ) 

#define ICC_HLS_MultiplexerSettings_put_FirstChunkNumber(This,t)	\
    ( (This)->lpVtbl -> put_FirstChunkNumber(This,t) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_HLS_MultiplexerSettings_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_Cinecoder_0000_0213 */
/* [local] */ 

typedef /* [v1_enum] */ 
enum SCTE35_SPLICE_COMMAND_TYPE
    {
        SCTE35_CMD_SPLICE_NULL	= 0,
        SCTE35_CMD_SPLICE_SCHEDULE	= 4,
        SCTE35_CMD_SPLICE_INSERT	= 5,
        SCTE35_CMD_TIME_SIGNAL	= 6,
        SCTE35_CMD_BANDWIDTH_RESERVATION	= 7
    } 	SCTE35_SPLICE_COMMAND_TYPE;

typedef struct SCTE35_SPLICE_NULL_COMMAND_DESCR
    {
    BYTE command;
    CC_TIME command_time;
    } 	SCTE35_SPLICE_NULL_COMMAND_DESCR;

typedef struct SCTE35_SPLICE_INSERT_COMMAND_DESCR
    {
    BYTE command;
    CC_TIME command_time;
    DWORD splice_event_id;
    BYTE splice_event_cancel_indicator;
    BYTE out_of_network_flag;
    BYTE program_splice_flag;
    BYTE splice_immediate_flag;
    CC_TIME splice_time;
    CC_TIME splice_duration;
    BYTE auto_return;
    WORD unique_program_id;
    BYTE avail_num;
    BYTE avail_expected;
    BYTE DTMF_count;
    BYTE DTMF_chars[ 8 ];
    BYTE DTMF_preroll;
    } 	SCTE35_SPLICE_INSERT_COMMAND_DESCR;

typedef /* [v1_enum] */ 
enum CC_READER_OPEN_FLAGS
    {
        CC_OF_NONE	= 0
    } 	CC_READER_OPEN_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0213_v0_0_s_ifspec;

#ifndef __ICC_MediaReader_INTERFACE_DEFINED__
#define __ICC_MediaReader_INTERFACE_DEFINED__

/* interface ICC_MediaReader */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MediaReader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91aa62eb-eb08-48ee-9bd0-5e6c686e7773")
    ICC_MediaReader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ CC_STRING fileName,
            /* [defaultvalue][in] */ DWORD dwOpenFlags = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsOpened( 
            /* [retval][out] */ CC_BOOL *pOpened) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimeBase( 
            /* [retval][out] */ CC_TIMEBASE *p) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimeBase( 
            /* [in] */ CC_TIMEBASE p) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FileInfo( 
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pFileInfo) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfPrograms( 
            /* [retval][out] */ CC_INT *pCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentProgramNumber( 
            /* [retval][out] */ CC_INT *pNum) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentProgramNumber( 
            /* [in] */ CC_INT Num) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfVideoTracks( 
            /* [retval][out] */ CC_INT *pNum) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentVideoTrackNumber( 
            /* [retval][out] */ CC_INT *pNum) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentVideoTrackNumber( 
            /* [in] */ CC_INT Num) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentVideoTrackInfo( 
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAudioTracks( 
            /* [retval][out] */ CC_INT *pNum) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentAudioTrackNumber( 
            /* [retval][out] */ CC_INT *pNum) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentAudioTrackNumber( 
            /* [in] */ CC_INT Num) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentAudioTrackInfo( 
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfFrames( 
            /* [retval][out] */ CC_INT *pFrameCount) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ CC_TIME *pDuration) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_FrameRate( 
            /* [retval][out] */ CC_SAMPLE_RATE *pFrameRate) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentFrameNumber( 
            /* [retval][out] */ CC_INT *pFrameNo) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentFrameNumber( 
            /* [in] */ CC_INT FrameNo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentVideoFrame( 
            /* [in] */ CC_VIDEO_FRAME_DESCR *pDescr,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentAudioFrame( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize = 0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentVideoFrameInfo( 
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CurrentAudioFrameInfo( 
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsVideoFormatSupported( 
            /* [in] */ CC_VIDEO_FRAME_DESCR *descr,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAudioFormatSupported( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult = 0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAudioSamples( 
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [in] */ CC_INT64 startSample,
            /* [in] */ CC_INT numSamples,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MediaReaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MediaReader * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MediaReader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MediaReader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            ICC_MediaReader * This,
            /* [in] */ CC_STRING fileName,
            /* [defaultvalue][in] */ DWORD dwOpenFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            ICC_MediaReader * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpened )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_BOOL *pOpened);
        
        HRESULT ( STDMETHODCALLTYPE *Update )( 
            ICC_MediaReader * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MediaReader * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileInfo )( 
            ICC_MediaReader * This,
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pFileInfo);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfPrograms )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProgramNumber )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProgramNumber )( 
            ICC_MediaReader * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfVideoTracks )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoTrackNumber )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentVideoTrackNumber )( 
            ICC_MediaReader * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoTrackInfo )( 
            ICC_MediaReader * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAudioTracks )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioTrackNumber )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentAudioTrackNumber )( 
            ICC_MediaReader * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioTrackInfo )( 
            ICC_MediaReader * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFrames )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pFrameCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_TIME *pDuration);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_SAMPLE_RATE *pFrameRate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentFrameNumber )( 
            ICC_MediaReader * This,
            /* [retval][out] */ CC_INT *pFrameNo);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentFrameNumber )( 
            ICC_MediaReader * This,
            /* [in] */ CC_INT FrameNo);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentVideoFrame )( 
            ICC_MediaReader * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pDescr,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentAudioFrame )( 
            ICC_MediaReader * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoFrameInfo )( 
            ICC_MediaReader * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioFrameInfo )( 
            ICC_MediaReader * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *IsVideoFormatSupported )( 
            ICC_MediaReader * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *descr,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsAudioFormatSupported )( 
            ICC_MediaReader * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioSamples )( 
            ICC_MediaReader * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [in] */ CC_INT64 startSample,
            /* [in] */ CC_INT numSamples,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        END_INTERFACE
    } ICC_MediaReaderVtbl;

    interface ICC_MediaReader
    {
        CONST_VTBL struct ICC_MediaReaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MediaReader_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MediaReader_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MediaReader_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MediaReader_Open(This,fileName,dwOpenFlags)	\
    ( (This)->lpVtbl -> Open(This,fileName,dwOpenFlags) ) 

#define ICC_MediaReader_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ICC_MediaReader_get_IsOpened(This,pOpened)	\
    ( (This)->lpVtbl -> get_IsOpened(This,pOpened) ) 

#define ICC_MediaReader_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define ICC_MediaReader_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MediaReader_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MediaReader_get_FileInfo(This,pFileInfo)	\
    ( (This)->lpVtbl -> get_FileInfo(This,pFileInfo) ) 

#define ICC_MediaReader_get_NumberOfPrograms(This,pCount)	\
    ( (This)->lpVtbl -> get_NumberOfPrograms(This,pCount) ) 

#define ICC_MediaReader_get_CurrentProgramNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentProgramNumber(This,pNum) ) 

#define ICC_MediaReader_put_CurrentProgramNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentProgramNumber(This,Num) ) 

#define ICC_MediaReader_get_NumberOfVideoTracks(This,pNum)	\
    ( (This)->lpVtbl -> get_NumberOfVideoTracks(This,pNum) ) 

#define ICC_MediaReader_get_CurrentVideoTrackNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentVideoTrackNumber(This,pNum) ) 

#define ICC_MediaReader_put_CurrentVideoTrackNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentVideoTrackNumber(This,Num) ) 

#define ICC_MediaReader_get_CurrentVideoTrackInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentVideoTrackInfo(This,pDescr) ) 

#define ICC_MediaReader_get_NumberOfAudioTracks(This,pNum)	\
    ( (This)->lpVtbl -> get_NumberOfAudioTracks(This,pNum) ) 

#define ICC_MediaReader_get_CurrentAudioTrackNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentAudioTrackNumber(This,pNum) ) 

#define ICC_MediaReader_put_CurrentAudioTrackNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentAudioTrackNumber(This,Num) ) 

#define ICC_MediaReader_get_CurrentAudioTrackInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentAudioTrackInfo(This,pDescr) ) 

#define ICC_MediaReader_get_NumberOfFrames(This,pFrameCount)	\
    ( (This)->lpVtbl -> get_NumberOfFrames(This,pFrameCount) ) 

#define ICC_MediaReader_get_Duration(This,pDuration)	\
    ( (This)->lpVtbl -> get_Duration(This,pDuration) ) 

#define ICC_MediaReader_get_FrameRate(This,pFrameRate)	\
    ( (This)->lpVtbl -> get_FrameRate(This,pFrameRate) ) 

#define ICC_MediaReader_get_CurrentFrameNumber(This,pFrameNo)	\
    ( (This)->lpVtbl -> get_CurrentFrameNumber(This,pFrameNo) ) 

#define ICC_MediaReader_put_CurrentFrameNumber(This,FrameNo)	\
    ( (This)->lpVtbl -> put_CurrentFrameNumber(This,FrameNo) ) 

#define ICC_MediaReader_GetCurrentVideoFrame(This,pDescr,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCurrentVideoFrame(This,pDescr,pbData,cbSize,pcbRetSize) ) 

#define ICC_MediaReader_GetCurrentAudioFrame(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCurrentAudioFrame(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_MediaReader_get_CurrentVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentVideoFrameInfo(This,pDescr) ) 

#define ICC_MediaReader_get_CurrentAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentAudioFrameInfo(This,pDescr) ) 

#define ICC_MediaReader_IsVideoFormatSupported(This,descr,pResult)	\
    ( (This)->lpVtbl -> IsVideoFormatSupported(This,descr,pResult) ) 

#define ICC_MediaReader_IsAudioFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsAudioFormatSupported(This,fmt,pResult) ) 

#define ICC_MediaReader_GetAudioSamples(This,fmt,startSample,numSamples,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudioSamples(This,fmt,startSample,numSamples,pbData,cbSize,pcbRetSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MediaReader_INTERFACE_DEFINED__ */


#ifndef __ICC_MediaReader2_INTERFACE_DEFINED__
#define __ICC_MediaReader2_INTERFACE_DEFINED__

/* interface ICC_MediaReader2 */
/* [local][unique][uuid][object] */ 


EXTERN_C const IID IID_ICC_MediaReader2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dbd2ea98-407b-4a3a-a85a-3d7e42964270")
    ICC_MediaReader2 : public ICC_MediaReader
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ ICC_InputStream *pFile,
            /* [defaultvalue][in] */ DWORD dwOpenFlags = 0) = 0;
        
    };
    
    
#else 	/* C style interface */

    typedef struct ICC_MediaReader2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICC_MediaReader2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            _COM_Outptr_  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICC_MediaReader2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICC_MediaReader2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_STRING fileName,
            /* [defaultvalue][in] */ DWORD dwOpenFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            ICC_MediaReader2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpened )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_BOOL *pOpened);
        
        HRESULT ( STDMETHODCALLTYPE *Update )( 
            ICC_MediaReader2 * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimeBase )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_TIMEBASE *p);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimeBase )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_TIMEBASE p);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileInfo )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ ICC_MultiplexedStreamInfo **pFileInfo);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfPrograms )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProgramNumber )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProgramNumber )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfVideoTracks )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoTrackNumber )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentVideoTrackNumber )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoTrackInfo )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ ICC_VideoStreamInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAudioTracks )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioTrackNumber )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pNum);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentAudioTrackNumber )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_INT Num);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioTrackInfo )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ ICC_AudioStreamInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFrames )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pFrameCount);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_TIME *pDuration);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_FrameRate )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_SAMPLE_RATE *pFrameRate);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentFrameNumber )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ CC_INT *pFrameNo);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentFrameNumber )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_INT FrameNo);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentVideoFrame )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *pDescr,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentAudioFrame )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [defaultvalue][retval][out] */ DWORD *pcbRetSize);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentVideoFrameInfo )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ ICC_VideoFrameInfo **pDescr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentAudioFrameInfo )( 
            ICC_MediaReader2 * This,
            /* [retval][out] */ ICC_AudioFrameInfo **pDescr);
        
        HRESULT ( STDMETHODCALLTYPE *IsVideoFormatSupported )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_VIDEO_FRAME_DESCR *descr,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *IsAudioFormatSupported )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [defaultvalue][retval][out] */ CC_BOOL *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetAudioSamples )( 
            ICC_MediaReader2 * This,
            /* [in] */ CC_AUDIO_FMT fmt,
            /* [in] */ CC_INT64 startSample,
            /* [in] */ CC_INT numSamples,
            /* [size_is][out] */ BYTE *pbData,
            /* [in] */ DWORD cbSize,
            /* [retval][out] */ DWORD *pcbRetSize);
        
        HRESULT ( STDMETHODCALLTYPE *Open )( 
            ICC_MediaReader2 * This,
            /* [in] */ ICC_InputStream *pFile,
            /* [defaultvalue][in] */ DWORD dwOpenFlags);
        
        END_INTERFACE
    } ICC_MediaReader2Vtbl;

    interface ICC_MediaReader2
    {
        CONST_VTBL struct ICC_MediaReader2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICC_MediaReader2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICC_MediaReader2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICC_MediaReader2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICC_MediaReader2_Open(This,fileName,dwOpenFlags)	\
    ( (This)->lpVtbl -> Open(This,fileName,dwOpenFlags) ) 

#define ICC_MediaReader2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define ICC_MediaReader2_get_IsOpened(This,pOpened)	\
    ( (This)->lpVtbl -> get_IsOpened(This,pOpened) ) 

#define ICC_MediaReader2_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define ICC_MediaReader2_get_TimeBase(This,p)	\
    ( (This)->lpVtbl -> get_TimeBase(This,p) ) 

#define ICC_MediaReader2_put_TimeBase(This,p)	\
    ( (This)->lpVtbl -> put_TimeBase(This,p) ) 

#define ICC_MediaReader2_get_FileInfo(This,pFileInfo)	\
    ( (This)->lpVtbl -> get_FileInfo(This,pFileInfo) ) 

#define ICC_MediaReader2_get_NumberOfPrograms(This,pCount)	\
    ( (This)->lpVtbl -> get_NumberOfPrograms(This,pCount) ) 

#define ICC_MediaReader2_get_CurrentProgramNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentProgramNumber(This,pNum) ) 

#define ICC_MediaReader2_put_CurrentProgramNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentProgramNumber(This,Num) ) 

#define ICC_MediaReader2_get_NumberOfVideoTracks(This,pNum)	\
    ( (This)->lpVtbl -> get_NumberOfVideoTracks(This,pNum) ) 

#define ICC_MediaReader2_get_CurrentVideoTrackNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentVideoTrackNumber(This,pNum) ) 

#define ICC_MediaReader2_put_CurrentVideoTrackNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentVideoTrackNumber(This,Num) ) 

#define ICC_MediaReader2_get_CurrentVideoTrackInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentVideoTrackInfo(This,pDescr) ) 

#define ICC_MediaReader2_get_NumberOfAudioTracks(This,pNum)	\
    ( (This)->lpVtbl -> get_NumberOfAudioTracks(This,pNum) ) 

#define ICC_MediaReader2_get_CurrentAudioTrackNumber(This,pNum)	\
    ( (This)->lpVtbl -> get_CurrentAudioTrackNumber(This,pNum) ) 

#define ICC_MediaReader2_put_CurrentAudioTrackNumber(This,Num)	\
    ( (This)->lpVtbl -> put_CurrentAudioTrackNumber(This,Num) ) 

#define ICC_MediaReader2_get_CurrentAudioTrackInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentAudioTrackInfo(This,pDescr) ) 

#define ICC_MediaReader2_get_NumberOfFrames(This,pFrameCount)	\
    ( (This)->lpVtbl -> get_NumberOfFrames(This,pFrameCount) ) 

#define ICC_MediaReader2_get_Duration(This,pDuration)	\
    ( (This)->lpVtbl -> get_Duration(This,pDuration) ) 

#define ICC_MediaReader2_get_FrameRate(This,pFrameRate)	\
    ( (This)->lpVtbl -> get_FrameRate(This,pFrameRate) ) 

#define ICC_MediaReader2_get_CurrentFrameNumber(This,pFrameNo)	\
    ( (This)->lpVtbl -> get_CurrentFrameNumber(This,pFrameNo) ) 

#define ICC_MediaReader2_put_CurrentFrameNumber(This,FrameNo)	\
    ( (This)->lpVtbl -> put_CurrentFrameNumber(This,FrameNo) ) 

#define ICC_MediaReader2_GetCurrentVideoFrame(This,pDescr,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCurrentVideoFrame(This,pDescr,pbData,cbSize,pcbRetSize) ) 

#define ICC_MediaReader2_GetCurrentAudioFrame(This,fmt,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetCurrentAudioFrame(This,fmt,pbData,cbSize,pcbRetSize) ) 

#define ICC_MediaReader2_get_CurrentVideoFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentVideoFrameInfo(This,pDescr) ) 

#define ICC_MediaReader2_get_CurrentAudioFrameInfo(This,pDescr)	\
    ( (This)->lpVtbl -> get_CurrentAudioFrameInfo(This,pDescr) ) 

#define ICC_MediaReader2_IsVideoFormatSupported(This,descr,pResult)	\
    ( (This)->lpVtbl -> IsVideoFormatSupported(This,descr,pResult) ) 

#define ICC_MediaReader2_IsAudioFormatSupported(This,fmt,pResult)	\
    ( (This)->lpVtbl -> IsAudioFormatSupported(This,fmt,pResult) ) 

#define ICC_MediaReader2_GetAudioSamples(This,fmt,startSample,numSamples,pbData,cbSize,pcbRetSize)	\
    ( (This)->lpVtbl -> GetAudioSamples(This,fmt,startSample,numSamples,pbData,cbSize,pcbRetSize) ) 


#define ICC_MediaReader2_Open(This,pFile,dwOpenFlags)	\
    ( (This)->lpVtbl -> Open(This,pFile,dwOpenFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICC_MediaReader2_INTERFACE_DEFINED__ */



#ifndef __Cinecoder_LIBRARY_DEFINED__
#define __Cinecoder_LIBRARY_DEFINED__

/* library Cinecoder */
/* [version][helpstring][uuid] */ 



































































EXTERN_C const IID LIBID_Cinecoder;

EXTERN_C const CLSID CLSID_CinecoderLibrary;

#ifdef __cplusplus

class DECLSPEC_UUID("00000000-be08-11dc-aa88-005056c00008")
CinecoderLibrary;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011101-0315-11dc-a983-0018f3fe411b")
CC_MpegVideoEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011102-0315-11dc-a983-0018f3fe411b")
CC_MpegVideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoEncoder2;

#ifdef __cplusplus

class DECLSPEC_UUID("eb953846-1fbc-408a-91f9-f7a8acda02d1")
CC_MpegVideoEncoder2;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011203-0315-11dc-a983-0018f3fe411b")
CC_MpegVideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoDecoder0;

#ifdef __cplusplus

class DECLSPEC_UUID("a13ea19d-f813-4abd-ae8f-889e4f535c21")
CC_MpegVideoDecoder0;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoDecoder2;

#ifdef __cplusplus

class DECLSPEC_UUID("475e4d15-7f66-4176-bc85-8c9c3805b4cd")
CC_MpegVideoDecoder2;
#endif

EXTERN_C const CLSID CLSID_CC_D10VideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011108-0315-11dc-a983-0018f3fe411b")
CC_D10VideoEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_D10VideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011109-0315-11dc-a983-0018f3fe411b")
CC_D10VideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegVideoSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("b0effac6-56e3-42f1-8ff7-78f8f0fc4706")
CC_MpegVideoSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011103-0315-11dc-a983-0018f3fe411b")
CC_MpegAudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011104-0315-11dc-a983-0018f3fe411b")
CC_MpegAudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioEncoderOld;

#ifdef __cplusplus

class DECLSPEC_UUID("fde7ec62-213f-4dc7-af34-c9b471472fc5")
CC_MpegAudioEncoderOld;
#endif

EXTERN_C const CLSID CLSID_CC_Aes3AudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011105-0315-11dc-a983-0018f3fe411b")
CC_Aes3AudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_Aes3AudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011106-0315-11dc-a983-0018f3fe411b")
CC_Aes3AudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011204-0315-11dc-a983-0018f3fe411b")
CC_MpegAudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioDecoderOld;

#ifdef __cplusplus

class DECLSPEC_UUID("516b31da-edff-4c2f-be28-9d49bf21a75f")
CC_MpegAudioDecoderOld;
#endif

EXTERN_C const CLSID CLSID_CC_MpegAudioSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("fcc7a5e3-3627-4a13-8f3f-f36841e258c7")
CC_MpegAudioSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_Aes3AudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011205-0315-11dc-a983-0018f3fe411b")
CC_Aes3AudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_ProgramStreamMultiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011402-0315-11dc-a983-0018f3fe411b")
CC_ProgramStreamMultiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_TransportStreamMultiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011403-0315-11dc-a983-0018f3fe411b")
CC_TransportStreamMultiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_HDV1_Multiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011404-0315-11dc-a983-0018f3fe411b")
CC_HDV1_Multiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_HDV2_Multiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011405-0315-11dc-a983-0018f3fe411b")
CC_HDV2_Multiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_ProgramMultiplexerSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011302-0315-11dc-a983-0018f3fe411b")
CC_ProgramMultiplexerSettings;
#endif

EXTERN_C const CLSID CLSID_CC_TransportMultiplexerSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011303-0315-11dc-a983-0018f3fe411b")
CC_TransportMultiplexerSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MuxPinSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011304-0315-11dc-a983-0018f3fe411b")
CC_MuxPinSettings;
#endif

EXTERN_C const CLSID CLSID_CC_ProgramMuxerPinSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("78360ef9-f2ce-4065-97b2-b74c65ab2513")
CC_ProgramMuxerPinSettings;
#endif

EXTERN_C const CLSID CLSID_CC_TransportMuxerPinSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("f2af2b0e-5691-48f6-bc86-902df28edfb0")
CC_TransportMuxerPinSettings;
#endif

EXTERN_C const CLSID CLSID_CC_SystemsDescriptionManager;

#ifdef __cplusplus

class DECLSPEC_UUID("E828C337-9811-418d-B6E9-DDF40B91988D")
CC_SystemsDescriptionManager;
#endif

EXTERN_C const CLSID CLSID_CC_MpegDemultiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011500-0315-11dc-a983-0018f3fe411b")
CC_MpegDemultiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_ProgramStreamDemultiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011502-0315-11dc-a983-0018f3fe411b")
CC_ProgramStreamDemultiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_TransportStreamDemultiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("80011503-0315-11dc-a983-0018f3fe411b")
CC_TransportStreamDemultiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_H264VideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011601-0315-11dc-a983-0018f3fe411b")
CC_H264VideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_H264VideoDecoder0;

#ifdef __cplusplus

class DECLSPEC_UUID("24f7109a-d910-411c-9630-de39efb028b3")
CC_H264VideoDecoder0;
#endif

EXTERN_C const CLSID CLSID_CC_AVC1VideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011602-0315-11dc-a983-0018f3fe411b")
CC_AVC1VideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_AVC1VideoDecoder0;

#ifdef __cplusplus

class DECLSPEC_UUID("c618cb66-1a6d-468a-b7bf-a9c4da6ba0c5")
CC_AVC1VideoDecoder0;
#endif

EXTERN_C const CLSID CLSID_CC_H264VideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("80011603-0315-11dc-a983-0018f3fe411b")
CC_H264VideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_H264VideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("80011604-0315-11dc-a983-0018f3fe411b")
CC_H264VideoEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_H264VideoSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("839555ed-00c2-4081-9323-be34cd1bb495")
CC_H264VideoSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_MP4_Multiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("df24d3d2-9fe6-4a81-af22-e502b69e508a")
CC_MP4_Multiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_MP4_MultiplexerSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("c8344888-ca73-4819-b947-41e3842fcc46")
CC_MP4_MultiplexerSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MOV_Multiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("df24d3d3-9fe6-4a81-af22-e502b69e508a")
CC_MOV_Multiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_MP4_MuxerPinSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("ec5dc6db-99f2-44f2-9657-eb629cfb705b")
CC_MP4_MuxerPinSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MP4_MuxerVideoPinSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("403de721-dade-4365-a587-589eb24215cf")
CC_MP4_MuxerVideoPinSettings;
#endif

EXTERN_C const CLSID CLSID_CC_MP4_MpegDashSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("9954375D-1EFA-49A4-B2E4-C5A6C5352BA4")
CC_MP4_MpegDashSettings;
#endif

EXTERN_C const CLSID CLSID_CC_AAC_AudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("c19bf495-813d-4e19-9234-578e745cdd34")
CC_AAC_AudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_LATM_AAC_AudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("9bd13af0-ca9a-4909-8674-3d4dff42e425")
CC_LATM_AAC_AudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_AAC_AudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("c8064a72-1d96-47e0-8b20-72ae4ff0fe8d")
CC_AAC_AudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_AAC_AudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("f13e8488-4700-4e65-81d9-42de3ea85549")
CC_AAC_AudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_AAC_AudioSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("174b4d90-827b-48af-b57d-4fc12597b099")
CC_AAC_AudioSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_AC3_AudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("ab977b61-58be-4d78-88cf-2769fbea46f9")
CC_AC3_AudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_AC3_AudioSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("86ab00cd-9c3f-405c-b164-8bb991d78744")
CC_AC3_AudioSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_AC3_AudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("94a89306-b460-4670-9281-36b6431ef393")
CC_AC3_AudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_AC3_AudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("d066604f-7ccd-4e8d-8acd-01bcef8e99c3")
CC_AC3_AudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_AVCIntraDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("4907c8e2-ef67-480e-b90d-bdba3f4a570a")
CC_AVCIntraDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_AVCIntraDecoder2;

#ifdef __cplusplus

class DECLSPEC_UUID("0cfa6ce8-0cd0-47d6-8e8e-3dc6b1e02e6f")
CC_AVCIntraDecoder2;
#endif

EXTERN_C const CLSID CLSID_CC_AVCIntraEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("8ad378a7-88cb-4c1c-8150-d61e158a7326")
CC_AVCIntraEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_AVCIntraEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("2cd550f9-27ae-44c5-9b20-c46028c52632")
CC_AVCIntraEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_Mpeg4VideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("5b97f2d2-2ae8-4c76-840a-661a0815d5f6")
CC_Mpeg4VideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_MvxWriter;

#ifdef __cplusplus

class DECLSPEC_UUID("13397d8e-a4f7-4f67-b346-d61684553716")
CC_MvxWriter;
#endif

EXTERN_C const CLSID CLSID_CC_BluRay_PCM_AudioDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("152e6383-46fd-4c20-bee9-126dbc498fb5")
CC_BluRay_PCM_AudioDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_LPCM_AudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("c1d5d4aa-d523-45a2-b7fa-57bc99aec9ee")
CC_LPCM_AudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_LPCM_AudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("dd0b84e0-8c97-48a9-bf32-d58d277b8d53")
CC_LPCM_AudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_HLS_Multiplexer;

#ifdef __cplusplus

class DECLSPEC_UUID("6232dc00-73aa-46f6-bc40-4293737bb11f")
CC_HLS_Multiplexer;
#endif

EXTERN_C const CLSID CLSID_CC_HLS_MultiplexerSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("e33e35bc-e11f-4d77-96a0-480a768eee3d")
CC_HLS_MultiplexerSettings;
#endif

EXTERN_C const CLSID CLSID_CC_J2K_VideoSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("095e2bed-9610-4550-9505-b4d0a3198511")
CC_J2K_VideoSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_J2K_VideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("c8069cc9-67bf-40cd-a78c-69652ee17f34")
CC_J2K_VideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_SonyRaw_VideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("8c1e236a-2602-41b2-89b0-97810070a089")
CC_SonyRaw_VideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("76bef61e-f17d-4079-8f22-0c18fbf38e65")
CC_DanielVideoSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("0236cdb4-3541-4c66-a211-496e91922dba")
CC_DanielVideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoDecoder_CUDA;

#ifdef __cplusplus

class DECLSPEC_UUID("00a25ffa-f7bf-4876-a592-73f944936a6f")
CC_DanielVideoDecoder_CUDA;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoDecoder_CudaPlayer;

#ifdef __cplusplus

class DECLSPEC_UUID("942d0694-04ec-4995-b4af-85869f5c605e")
CC_DanielVideoDecoder_CudaPlayer;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("5fd43ca9-0f0f-40e0-a20a-74c9a5edbec8")
CC_DanielVideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoEncoder_CUDA;

#ifdef __cplusplus

class DECLSPEC_UUID("6e0bf254-f734-4d75-ab2f-de598be15616")
CC_DanielVideoEncoder_CUDA;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("fd5a7ff2-a1fe-41af-b27a-0d786a738473")
CC_DanielVideoEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_DanielVideoEncoderSettings_CUDA;

#ifdef __cplusplus

class DECLSPEC_UUID("2faf33b7-bb91-401b-82de-363e3cd5d309")
CC_DanielVideoEncoderSettings_CUDA;
#endif

EXTERN_C const CLSID CLSID_CC_MediaReader;

#ifdef __cplusplus

class DECLSPEC_UUID("331cbbb5-6dd6-4bcb-92ae-037df25fe92e")
CC_MediaReader;
#endif

EXTERN_C const CLSID CLSID_CC_InputFile;

#ifdef __cplusplus

class DECLSPEC_UUID("1d200482-6ddc-420a-8a6c-255702911ae7")
CC_InputFile;
#endif

EXTERN_C const CLSID CLSID_CC_OutputFile;

#ifdef __cplusplus

class DECLSPEC_UUID("3b0a99b4-809c-4a6e-be17-90814953e708")
CC_OutputFile;
#endif

EXTERN_C const CLSID CLSID_CC_WavAudioEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("bda1912f-7051-47fe-883f-6cd42af55085")
CC_WavAudioEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_WavAudioEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("ad9b9cfb-0644-4cce-859c-4aee1ec4f748")
CC_WavAudioEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_HEVCVideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("0d9505f9-f31a-4351-bb39-d369950439a9")
CC_HEVCVideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_HEVCVideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("c7e8a86e-e4f8-4865-a313-b1dcb64b86cd")
CC_HEVCVideoEncoderSettings;
#endif

EXTERN_C const CLSID CLSID_CC_HEVCVideoSplitter;

#ifdef __cplusplus

class DECLSPEC_UUID("e53dc514-51cc-4844-b17e-edfa0ee32c17")
CC_HEVCVideoSplitter;
#endif

EXTERN_C const CLSID CLSID_CC_HEVCVideoDecoder;

#ifdef __cplusplus

class DECLSPEC_UUID("4013d46c-ce5f-4e6c-949b-0a872f575b59")
CC_HEVCVideoDecoder;
#endif

EXTERN_C const CLSID CLSID_CC_HEVCVideoDecoder0;

#ifdef __cplusplus

class DECLSPEC_UUID("d4ce1c4f-60d6-442d-b2bb-45b5d5c6de9b")
CC_HEVCVideoDecoder0;
#endif

EXTERN_C const CLSID CLSID_CC_Y4M_VideoEncoder;

#ifdef __cplusplus

class DECLSPEC_UUID("6c6e79c1-d644-4d66-884d-7e9d9b0bbbda")
CC_Y4M_VideoEncoder;
#endif

EXTERN_C const CLSID CLSID_CC_Y4M_VideoEncoderSettings;

#ifdef __cplusplus

class DECLSPEC_UUID("bc7a18e4-14eb-485d-bc43-c8932d250970")
CC_Y4M_VideoEncoderSettings;
#endif
#endif /* __Cinecoder_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_Cinecoder_0000_0216 */
/* [local] */ 

#ifdef __cplusplus
using namespace cinecoder;
#endif


extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0216_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_Cinecoder_0000_0216_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


