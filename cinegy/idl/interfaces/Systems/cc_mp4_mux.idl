/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.27.34.10631
*/

typedef[v1_enum] enum CC_MP4_CHUNK_FRAGMENT_POSITION
{
	CC_MP4_INTERMEDIATE_POSITION = 0x000000,
	CC_MP4_START_POSITION        = 0x000001,
	CC_MP4_END_POSITION          = 0x000002,

} CC_MP4_CHUNK_FRAGMENT_POSITION;

[object, uuid(4a4fc69f-4a41-4785-97d6-8fa37507769c), pointer_default(unique), local]
/// The interface to operate with the MP4 multiplexer.
interface ICC_MP4_Multiplexer : ICC_Multiplexer
{
	[propget] HRESULT Duration              ([out,retval]CC_TIME  *p);
	[propput] HRESULT Duration              ([in]        CC_TIME   v);
};

[object, uuid(29d573e4-e709-41e8-a73c-70876f01a578), pointer_default(unique), local]
/// The interface to operate with MP4 multiplexer.
interface ICC_MP4_MultiplexerSettings : ICC_Settings
{
	[propget] HRESULT Fragmented            ([out,retval]CC_BOOL  *p);
	[propput] HRESULT Fragmented            ([in]        CC_BOOL   p);

	[propget] HRESULT WriteSingleFragment   ([out,retval]CC_BOOL  *p);
	[propput] HRESULT WriteSingleFragment   ([in]        CC_BOOL   p);

	// Index update interval (default is never - only at close).
	[propget] HRESULT UpdatePeriod          ([out,retval]CC_PERIOD*p);
	[propput] HRESULT UpdatePeriod          ([in]        CC_PERIOD p);

	// Output Block.
	[propget] HRESULT DataGranularity       ([out, retval]CC_UINT  *p);
	[propput] HRESULT DataGranularity       ([in]        CC_UINT   p);

	[propget] HRESULT Format                ([out, retval] ICC_Settings **pp);
	[propput] HRESULT Format                ([in]          ICC_Settings *p);
};

[object, uuid(bc0a4c83-d677-4a69-8514-5be234b14bda), pointer_default(unique), local]
/// The major stream properties for creating the pin in the multiplexer.
/// Only StreamType field is mandatory - all the others can be grabbed from the stream.
interface ICC_MP4_MuxerPinSettings : ICC_ElementaryStreamSettings
{
	/// The time stamp of the first stream sample. Default is 0.
	[propget] HRESULT BasePTS               ([out,retval]CC_TIME*);
	[propput] HRESULT BasePTS               ([in]        CC_TIME);

    /// The stream sample rate (frequency). In the case of audio, it is a native sample rate. In the case of video it is a FIELD rate.
    [propget] HRESULT SampleRate            ([out,retval]CC_SAMPLE_RATE*);
    [propput] HRESULT SampleRate            ([in]        CC_SAMPLE_RATE);

	/// Any additional type specification (AVC_Intra type, LPCM format, etc)
	[propget] HRESULT SubTypeCode           ([out,retval]DWORD*);
	[propput] HRESULT SubTypeCode           ([in]        DWORD);

    /// The URL of external (reference) file where the stream will be actually stored (see ICC_ReferenceDataConsumer interface)
    [propget] HRESULT ReferenceURL          ([out,retval]CC_STRING*pURL);
	[propput] HRESULT ReferenceURL          ([in]        CC_STRING  URL);

	/// The <link CC_TIMEBASE, time base> for all CC_TIME values, relating to any time stamps (PTS or DTS) of data, handled by stream processor.
	[propget] HRESULT TrackTimeScale        ([out,retval]CC_UINT*);
	[propput] HRESULT TrackTimeScale        ([in]        CC_UINT );
};

//-----------------------------------------------------------------------------
[object, uuid(64e71555-ddd3-4106-a865-6b0e6e9e63cf), pointer_default(unique), local]
/// Provides a service to allow multiplexing of data, located in the external (reference) files
interface ICC_ReferenceDataConsumer : IUnknown
//-----------------------------------------------------------------------------
{
  HRESULT   ProcessReferenceData(
	[in] CC_OFFSET fileOffset,                /// Actual offset of a data written within the referenced file
    [in, size_is(cbSize)] CC_PCBYTE pbData,   /// Pointer to the buffer containing the elementary data 
    [in] CC_UINT cbSize,                      /// The elementary data size in bytes.
    [in] CC_TIME pts,                         /// (Optional) presentation time of the first access unit commencing in the data.
  	[out,retval,defaultvalue(NULL)] CC_UINT *pcbProcessed
  );
};

//-----------------------------------------------------------------------------
[object, uuid(b26b77e5-a8a2-41d6-a93f-18ac4891b923), pointer_default(unique), local]
/// Provides a service to allow creating of fragmented MP4
interface ICC_MP4_FragmentedPin : IUnknown
//-----------------------------------------------------------------------------
{
  HRESULT   FlushFragment();
  HRESULT   GetCodecPrivateData(
    [out, size_is(cbSize)] BYTE *pbData,
    [in] DWORD cbSize,
    [out,retval] DWORD *pcbRetSize
  );
};

//-----------------------------------------------------------------------------
[object, uuid(A3BA7AF7-E739-43d5-8D90-8EF256CED5B7), pointer_default(unique), local]
/// Provides access to the MP4_InitialTimeCodeProp property.
interface ICC_MP4_InitialTimeCodeProp : ICC_InitialTimeCodeProp
//-----------------------------------------------------------------------------
{
  [propget] HRESULT	SourceTapeName([out,retval] CC_STRING*);
  [propput] HRESULT	SourceTapeName([in] CC_STRING);
};

[object, uuid(53919957-D8DA-41BC-B767-40344EDDD557), pointer_default(unique), local]
interface ICC_MP4_MpegDashSettings : ICC_Settings
{
	[propget] HRESULT FragmentDuration([out, retval]CC_TIME *p);
	[propput] HRESULT FragmentDuration([in]         CC_TIME v);
};

[object, uuid(875370A3-312E-4D45-BD6F-4EAF62C0944A), pointer_default(unique), local]
interface ICC_MP4ChunkInfo : IUnknown
{
	[propget] HRESULT FragmentPosition([out, retval]CC_MP4_CHUNK_FRAGMENT_POSITION* p);
};

[object, uuid(39D64FEB-4AFC-43B7-A319-67740104CE44), pointer_default(unique), local]
interface ICC_MP4Fragment : IUnknown
{
	[propget] HRESULT SequenceNumber([out, retval]CC_UINT* pSequenceNumber);
};

[object, uuid(80BDD2C9-678A-407A-BA3C-503C452EB433), pointer_default(unique), local]
interface ICC_MP4InitFragment : IUnknown
{
	[propget] HRESULT IsIndexTableFilled([out, retval]CC_BOOL* pIndexTableFilled);
};

[object, uuid(A8795B72-CA30-4FF5-9899-3F7DBFAD4AA9), pointer_default(unique), local]
interface ICC_MP4RandomAccessFragment : IUnknown
{
};

[object, uuid(ACCD0235-EE69-4E40-B8AA-E4D1D44E6DD6), pointer_default(unique), local]
interface ICC_MP4Producer : IUnknown
{
	HRESULT   IsChunkAvailable([out, retval, defaultvalue(NULL)]CC_BOOL *pResult);

	[propget] HRESULT ChunkOffset([out, retval] CC_OFFSET *pOffset);
	[propget] HRESULT ChunkData([out, retval] CC_PCBYTE *ppData);
	[propget] HRESULT ChunkDataSize([out, retval] CC_AMOUNT *pDataSize);

	HRESULT   GetChunkInfo([out, retval] ICC_MP4ChunkInfo **ppInfo);

	HRESULT   GetDataContext([out, retval] IUnknown **ppDataContext);
};

