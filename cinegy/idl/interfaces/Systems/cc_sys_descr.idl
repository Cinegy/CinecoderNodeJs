/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.28.23.12518
*/

// The system descriptor codes listing (not full - just known).
typedef enum MPEG_SYSTEM_DESCRIPTOR_TAG
{
  CC_DESCR_UNKNOWN                       = 0x00,

  CC_DESCR_VIDEO_STREAM                  = 0x02,
  CC_DESCR_AUDIO_STREAM                  = 0x03,
  CC_DESCR_HIERARCHY                     = 0x04,
  CC_DESCR_REGISTRATION                  = 0x05,
  CC_DESCR_DATA_STREAM_ALIGNMENT         = 0x06,
  CC_DESCR_TARGET_BACKGROUND_GRID        = 0x07,
  CC_DESCR_VIDEO_WINDOW                  = 0x08,
  CC_DESCR_CA                            = 0x09,
  CC_DESCR_ISO_639_LANGUAGE              = 0x0A,
  CC_DESCR_SYSTEM_CLOCK                  = 0x0B,
  CC_DESCR_MULTIPLEX_BUFFER_UTILIZATION  = 0x0C,
  CC_DESCR_COPYRIGHT                     = 0x0D,
  CC_DESCR_MAXIMUM_BITRATE               = 0x0E,
  CC_DESCR_PRIVATE_DATA_INDICATOR        = 0x0F,
  CC_DESCR_SMOOTHING_BUFFER              = 0x10,
  CC_DESCR_STD                           = 0x11,
  CC_DESCR_IBP                           = 0x12,

  CC_DESCR_MPEG4_VIDEO                   = 0x1B,
  CC_DESCR_MPEG4_AUDIO                   = 0x1C,
  CC_DESCR_IOD                           = 0x1D,
  CC_DESCR_SL                            = 0x1E,
  CC_DESCR_FMC                           = 0x1F,
  CC_DESCR_EXTERNAL_ES_ID                = 0x20,
  CC_DESCR_MUX_CODE                      = 0x21,
  CC_DESCR_FMX_BUFFER_SIZE               = 0x22,
  CC_DESCR_MULTIPLEX_BUFFER              = 0x23,
  CC_DESCR_CONTENT_LABELING              = 0x24,
  CC_DESCR_METADATA_POINTER              = 0x25,
  CC_DESCR_METADATA                      = 0x26,
  CC_DESCR_METADATA_STD                  = 0x27,
  CC_DESCR_AVC_VIDEO                     = 0x28,
  CC_DESCR_IPMP                          = 0x29,
  CC_DESCR_AVC_TIMING_AND_HDR            = 0x30,

  CC_DESCR_NETWORK_NAME                  = 0x40,
  CC_DESCR_SERVICE_LIST                  = 0x41,
  CC_DESCR_STUFFING                      = 0x42,
  CC_DESCR_SATELLITE_DELIVERY_SYSTEM     = 0x43,
  CC_DESCR_CABLE_DELIVERY_SYSTEM         = 0x44,
  CC_DESCR_VBI_DATA                      = 0x45,
  CC_DESCR_VBI_TELETEXT                  = 0x46,
  CC_DESCR_BOUQUET_NAME                  = 0x47,
  CC_DESCR_SERVICE                       = 0x48,
  CC_DESCR_COUNTRY_AVAILABILITY          = 0x49,
  CC_DESCR_LINKAGE                       = 0x4A,
  CC_DESCR_NVOD_REFERENCE                = 0x4B,
  CC_DESCR_TIME_SHIFTED_SERVICE          = 0x4C,
  CC_DESCR_SHORT_EVENT                   = 0x4D,
  CC_DESCR_EXTENDED_EVENT                = 0x4E,
  CC_DESCR_TIME_SHIFTED_EVENT            = 0x4F,

  CC_DESCR_COMPONENT                     = 0x50,
  CC_DESCR_MOSAIC                        = 0x51,
  CC_DESCR_STREAM_IDENTIFIER             = 0x52,
  CC_DESCR_CA_IDENTIFIER                 = 0x53,
  CC_DESCR_CONTENT                       = 0x54,
  CC_DESCR_PARENTAL_RATING               = 0x55,
  CC_DESCR_TELETEXT                      = 0x56,
  CC_DESCR_TELEPHONE                     = 0x57,
  CC_DESCR_LOCAL_TIME_OFFSET             = 0x58,
  CC_DESCR_SUBTITLING                    = 0x59,
  CC_DESCR_TERRESTRIAL_DELIVERY_SYSTEM   = 0x5A,
  CC_DESCR_MULTILINGUAL_NETWORK_NAME     = 0x5B,
  CC_DESCR_MULTILINGUAL_BOUQUET_NAME     = 0x5C,
  CC_DESCR_MULTILINGUAL_SERVICE_NAME     = 0x5D,
  CC_DESCR_MULTILINGUAL_COMPONENT        = 0x5E,
  CC_DESCR_PRIVATE_DATA_SPECIFIER        = 0x5F,
  CC_DESCR_SERVICE_MOVE                  = 0x60,
  CC_DESCR_SHORT_SMOOTHING_BUFFER        = 0x61,
  CC_DESCR_FREQUENCY_LIST                = 0x62,
  CC_DESCR_PARTIAL_TRANSPORT_STREAM      = 0x63,
  CC_DESCR_DATA_BROADCAST                = 0x64,
  CC_DESCR_SCRAMBLING                    = 0x65,
  CC_DESCR_DATA_BROADCAST_ID             = 0x66,
  CC_DESCR_TRANSPORT_STREAM              = 0x67,
  CC_DESCR_DSNG                          = 0x68,
  CC_DESCR_PDC                           = 0x69,
  CC_DESCR_AC3_SYSTEM_B_DVB				 = 0x6A,
  CC_DESCR_ANCILLARY_DATA                = 0x6B,
  CC_DESCR_CELL_LIST                     = 0x6C,
  CC_DESCR_CELL_FREQUENCY_LINK           = 0x6D,
  CC_DESCR_ANNOUNCEMENT_SUPPORT          = 0x6E,
  CC_DESCR_APPLICATION_SIGNALLING        = 0x6F,
  CC_DESCR_ADAPTATION_FIELD_DATA         = 0x70,
  CC_DESCR_SERVICE_IDENTIFIER            = 0x71,
  CC_DESCR_SERVICE_AVAILABILITY          = 0x72,
  CC_DESCR_DEFAULT_AUTHORITY             = 0x73,
  CC_DESCR_RELATED_CONTENT               = 0x74,
  CC_DESCR_TVA_ID                        = 0x75,
  CC_DESCR_CONTENT_IDENTIFIER            = 0x76,
  CC_DESCR_TIME_SLICE_FEC_IDENTIFIER     = 0x77,
  CC_DESCR_ECM_REPETITION_RATE           = 0x78,
  CC_DESCR_S2_SATELLITE_DELIVERY_SYSTEM  = 0x79,
  CC_DESCR_ENHANCED_AC3                  = 0x7A,
  CC_DESCR_DTS                           = 0x7B,
  CC_DESCR_AAC                           = 0x7C,
  CC_DESCR_XAIT_LOCATION                 = 0x7D,
  CC_DESCR_FTA_CONTENT_MANAGEMENT        = 0x7E,
  CC_DESCR_EXTENSION                     = 0x7F,

  CC_DESCR_AC3_SYSTEM_A_ATSC			 = 0x81,

  CC_DESCR_BROADCAST_ID                  = 0x85,
  CC_DESCR_DTCP                          = 0x88,
  CC_DESCR_CUE_IDENTIFIER                = 0x8A,

  CC_DESCR_HIERARCHICAL_TRANSMISSION     = 0xC0,
  CC_DESCR_DIGITAL_COPY_CONTROL          = 0xC1,
  CC_DESCR_NETWORK_IDENTIFICATION        = 0xC2,
  CC_DESCR_PARTIAL_TS_TIME               = 0xC3,
  CC_DESCR_AUDIO_COMPONENT               = 0xC4,
  CC_DESCR_HYPERLINK                     = 0xC5,
  CC_DESCR_TARGET_REGION                 = 0xC6,
  CC_DESCR_DATA_CONTENT                  = 0xC7,
  CC_DESCR_VIDEO_DECODE_CONTROL          = 0xC8,
  CC_DESCR_TS_INFORMATION                = 0xCD,
  CC_DESCR_EXTENDED_BROADCASTER          = 0xCE,
  CC_DESCR_SERIES                        = 0xD5,
  CC_DESCR_EVENT_GROUP                   = 0xD6,
  CC_DESCR_BROADCASTER_NAME              = 0xD8,
  CC_DESCR_COMPONENT_GROUP               = 0xD9,
  CC_DESCR_CONTENT_AVAILABILITY          = 0xDE,
  CC_DESCR_EMERGENCY_INFORMATION         = 0xFC,
  CC_DESCR_DATA_COMPONENT                = 0xFD
}
MPEG_SYSTEM_DESCRIPTOR_TAG;

typedef struct
{
	MPEG_SYSTEM_DESCRIPTOR_TAG	code;		// The code of descriptor. See MPEG_SYSTEM_DESCRIPTOR_TAG.
	DWORD							length;     // The length of descriptor's data (no more than 255).
    /*[length_is(length)]*/	BYTE 	data[256];  // The descriptor's data.
} CC_SYSDESCR;

[object, uuid(00001ffe-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The interface to read the descriptors associated with Program, Transport or any elementary stream.
interface ICC_SystemDescriptorsReader : IUnknown
{
  // Retrieves the number of descriptors in the list.
  // Returns: S_OK.
  [propget] HRESULT NumDescr(
    [out,retval] INT *pNumDescr                 // Place to store the quantity of descriptors.
  );

  // Retrieves the size of bytes of all of descriptors.
  // Returns: S_OK.
  [propget] HRESULT Size(
    [out,retval] DWORD *pcbSize                 // Place to store the size of descriptors' list.
  );

  // Retrieves the specified descriptor by its ordinal number.
  // Returns: S_OK if successful, E_INVALIDARG if index out of bounds.
  HRESULT  Get(
    [in] INT dwDescrIndex,                      // The index of descriptor.
    [out,retval] CC_SYSDESCR *pDescr            // Place to store the descriptor.
  );  

  // Retrieves the descriptor index with the specified code.
  // Returns: S_OK if found and S_FALSE if not found.
  HRESULT  IndexOf(
    [in] MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,// The descriptor code to be found.
    [in,defaultvalue(0)] INT idxSearchFrom,     // The index from where the search begins.
    [out,retval] INT *pDescrIndex               // Place to store the index. 
                                                // If no descriptors with specified code wiil be found, -1 will be returned.
  );  

  // Get all stored descriptors as raw data.
  // Returns: S_OK if successful, E_OUTOFMEMORY if no space in the list.
  HRESULT	StoreToBuffer(
    [out,size_is(cbBufSize)] BYTE *pbData,      // The raw descriptors buffer.
    [in] DWORD cbBufSize,                       // The buffer size.
    [out,retval] DWORD *pcbRetSize              // The descriptors' reaw size.
  );
};

[object, uuid(00001fff-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The extension to ICC_SystemDescriptorsReader, which allows you to add and remove the descriptors.
interface ICC_SystemDescriptorsManager : ICC_SystemDescriptorsReader
{
  // Add the new descriptor to the object.
  // Returns: S_OK if successful, E_INVALIDARG if DescrCode invalid, E_OUTOFMEMORY if there is no space in the list.
  HRESULT   Add(
    [in] MPEG_SYSTEM_DESCRIPTOR_TAG DescrCode,  // The code of the descriptor to be added.
    [in,size_is(cbDescrSize)] BYTE *pbData,     // The descriptor's body. (Can be NULL, see above).
    [in] DWORD cbDescrSize                      // The size of the descriptor to be added.
  );

  // The method removes the specified descriptor from a list.
  // Returns: S_OK if successful, E_INVALIDARG if index is out of bounds.
  HRESULT	Remove(
    [in] INT dwDescrNumber                      // The descriptor index to be removed.
  );

  // Empties the list of descriptors.
  // Returns: S_OK if successful.
  HRESULT	Clear(
  );

  // Add all of descriptors from another object.
  // Returns: S_OK if successful, E_OUTOFMEMORY if no space in the list.
  HRESULT	CopyFrom(
    [in] ICC_SystemDescriptorsReader *pSrc      // The source.
  );

  // Add descriptors from raw buffer. Descriptors must be collocated, in form [code:byte][length:byte][data:byte[]]...
  // Returns: S_OK if successful, E_OUTOFMEMORY if no space in the list.
  HRESULT	AddFromBuffer(
    [in,size_is(cbSize)] BYTE *pbData,          // The raw descriptors buffer.
    [in] DWORD cbSize                           // The buffer size.
  );
};

