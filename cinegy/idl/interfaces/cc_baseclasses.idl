/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.28.23.12518
*/

//-----------------------------------------------------------------------------
[object, uuid(42d33946-c343-43c5-9ca0-85a3362102c4), pointer_default(unique), local]
interface ICC_Object : IUnknown
//-----------------------------------------------------------------------------
{
  [propget] HRESULT	  CLSID([out,retval] CLSID *pclsid);
  [propget] HRESULT   CLSName([out,retval] CC_STRING *pName);
};

//-----------------------------------------------------------------------------
[object, uuid(AA8AE4DE-938F-4eb3-AD44-363464D10A5D), pointer_default(unique), local]
/// This interface is a base for any info or settings objects.
/// Provides the methods to clone/serialize or manually check or clear the particular value by its name.
interface ICC_Settings : IUnknown
//-----------------------------------------------------------------------------
{
  /// Marks the specified value (or all values if specified "*") as not assigned.
  HRESULT	Clear    ([in] LPCSTR strVarName);
  /// Tests the specified value (or any of values if specified "*") assigned.
  HRESULT	Assigned ([in] LPCSTR strVarName, [out,retval,defaultvalue(NULL)]CC_BOOL*);

  /// Exports the contents of the settings into the string XML format (only values which were actually assigned).
  /// Imports the string XML and assigns the variables listed there. No assigned variables cleared so
  /// the result will be the intersection between old state and the variables assigned by XML.
  [propget]
  HRESULT	XML      ([out,retval] CC_STRING *pstrXml);
  [propput]
  HRESULT	XML      ([in] CC_STRING strXml);

  //üüHRESULT   GetXmlString ([out,retval] CC_STRING *pstrXml);
  //üüHRESULT   AssignFromXmlString([in] CC_STRING strXml, [out, retval] CC_POINT where);

  //üüMakes a deep copy of the settings object. Removes the read-only state.
  //üüHRESULT	Clone    ([out,retval] ICC_Settings** ppClone);
};

//-----------------------------------------------------------------------------
[object, uuid(f43bfdf8-1ae4-4626-8535-15c49213d208), pointer_default(unique), local]
/// Provides the common methods of any cinecoder data processing objects.
/// Used as base interface for all other cinecoder objects.
interface ICC_StreamProcessor : IUnknown
//-----------------------------------------------------------------------------
{
  /// Initializes the stream processor with the specified parameters.
  /// After Init, object state becomes active.
  /// If the object was active before, Init() will cancel the current process and initialize the object for a new one.
  /// Remarks
  /// Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT	Init(
    [in,defaultvalue(NULL)] ICC_Settings *pSettings     /// The settings.
  );

  // Initialization of the object by XML profile.
  HRESULT	InitByXml(
    [in] CC_STRING strXML            /// The settings in XML format.
  );

  /// Stops the current processing.
  /// Returns
  /// S_OK = done working.
  /// <p>S_FALSE = still active due to the unprocessed data inside.
  /// <p>And error code in case of error.
  HRESULT   Done(
    [in] CC_BOOL bFlush,        /// CC_FALSE - stop immediately, dismiss the unprocessed data.
                                     /// CC_TRUE  - flush the unprocessed data and then stop.
    [out,retval,defaultvalue(NULL)]CC_BOOL *pbDone
  );

  /// The object's state.
  [propget] HRESULT   IsActive([out,retval,defaultvalue(NULL)]CC_BOOL*);
//[propget] HRESULT   IsInitialized([out,retval,defaultvalue(NULL)]CC_BOOL*);

  /// The <link CC_TIMEBASE, time base> for all CC_TIME values, relating to any time stamps (PTS or DTS) of data, handled by stream processor.
  [propget] HRESULT   TimeBase([out,retval]CC_TIMEBASE*p);
  [propput] HRESULT   TimeBase([in]        CC_TIMEBASE p);

  /// The bitrate of the generated or processed bytestream
  [propget] HRESULT   BitRate([out,retval]CC_BITRATE *p);

  /// The description of the stream which is currently being processed. If NULL - object is not active.
  [propget] HRESULT   StreamInfo([out,retval] ICC_Settings **p);

  /// Indicates that object has prepared data.
  [propget] HRESULT   IsDataReady([out,retval,defaultvalue(NULL)]CC_BOOL*p);

  /// The description of the currently generated data. If NULL - data is not ready.
  [propget] HRESULT   DataInfo([out,retval] ICC_Settings **s);

  /// The consumer for the data generated by the object.
  [propget] HRESULT   OutputCallback([out,retval] IUnknown**p);
  [propput] HRESULT   OutputCallback([in] IUnknown*p);
};

//-----------------------------------------------------------------------------
[object, uuid(BA54F9EB-498D-471c-8C01-A88830C6EC01), pointer_default(unique), local] 
/// General interface for transferring chunks of binary data.
interface ICC_ByteStreamProducer : IUnknown
//-----------------------------------------------------------------------------
{
  /// Retrieves the current data.
  /// Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT	GetData(
    [out,size_is(cbBufSize)] CC_PBYTE pbData,  /// The buffer to store the data, if NULL the only size of the data will be returned.
    [in] CC_UINT cbBufSize,                    /// The buffer's size, in bytes.
    [out,retval,defaultvalue(NULL)] CC_UINT *pcbRetSize); /// The real number of bytes will be placed here
};

//-----------------------------------------------------------------------------
[object, uuid(2D8791E2-227D-4898-A64B-525ABAE583DA), pointer_default(unique), local]
/// Provides a service to handle the generalized bytestream data.
/// Used as interface of callback-objects which handles the data coming from
/// <link ICC_ElementaryStreamProducer, elementary stream producers> such as video or audio encoders.
/// It is also used as interface to the <link ICC_Multiplexer::CreatePin, input pin> of the ICC_Multiplexer objects.
interface ICC_ByteStreamConsumer : IUnknown
//-----------------------------------------------------------------------------
{
  [helpstring("Process a chunk of packed media data")]
  /// Process the chunk of data.
  /// The method handles bytestream chunks from various bytestream producers like encoders, multiplexers etc.
  /// <p>In case of assigned <link ICC_BufferAllocator, buffer allocator> check that <i>pbData</i> points to the internal buffer.
  /// If so, you may not copy the data by yourself.
  /// Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   ProcessData(
    [in, size_is(cbSize)] CC_PCBYTE pbData,   /// Pointer to the buffer containing the elementary data 
    [in] CC_UINT cbSize,                      /// The elementary data size in bytes.
    [in,defaultvalue(0)] CC_UINT cbOffset,    /// Offset of the buffer's origin from where data will be processed.                          
    [in,defaultvalue(CC_NO_TIME)] CC_TIME pts,   /// (Optional) presentation time of the first access unit commencing in the data.              
  	[out,retval,defaultvalue(NULL)] CC_UINT *pcbProcessed
  );
};

//-----------------------------------------------------------------------------
[object, uuid(96218572-1941-41de-854B-0FD5F938BA0E), pointer_default(unique), local]
/// The interface shows that the object can break the normal flow of the data processing
/// and then continue with the new data at the same settings. 
/// Usually used when the stream reposition is needed.
interface ICC_Breakable : IUnknown
//-----------------------------------------------------------------------------
{
  /// Breaks the continuity of current processing, flushes the buffers if necessary and continues as after Init().
  /// Returns
  /// S_OK = done working.
  /// <p>S_FALSE = still active due to the unprocessed data inside (when no callback is assigned).
  /// <p>And error code in case of error.
  HRESULT   Break(
    [in] CC_BOOL bFlush,                 /// CC_FALSE - dismiss the unprocessed data.
                                         /// CC_TRUE  - flush the unprocessed data.
    [out,retval,defaultvalue(NULL)]CC_BOOL *pbDone
  );
};

//-----------------------------------------------------------------------------
[object, uuid(5E8AF531-FB3F-4345-A6E9-50DF4A4030EB), pointer_default(unique), local] 
/// General interface for any cinecoder decoders.
/// It is extension of ICC_StreamProcessor, including ICC_ByteStreamConsumer and ICC_Breakable interfaces.
interface ICC_Decoder : ICC_StreamProcessor
//-----------------------------------------------------------------------------
{
  ///<copy ICC_ByteStreamConsumer::ProcessData>
  HRESULT   ProcessData(
    [in, size_is(cbSize)] CC_PCBYTE pbData,
    [in] CC_UINT cbSize,                   
    [in,defaultvalue(0)] CC_UINT cbOffset,                 
    [in,defaultvalue(CC_NO_TIME)] CC_TIME pts,                      
  	[out,retval,defaultvalue(NULL)] CC_UINT *pcbProcessed
  );

  ///<copy ICC_Breakable::Break>
  HRESULT   Break(
    [in] CC_BOOL bFlush,
    [out,retval,defaultvalue(NULL)]CC_BOOL *pbDone
  );
};

//-----------------------------------------------------------------------------
[object, uuid(c5352932-d890-4631-a41b-054ef932d58f), pointer_default(unique), local] 
/// General interface for any cinecoder encoders.
/// It is extension of ICC_StreamProcessor, including ICC_ByteStreamProducer.
interface ICC_Encoder : ICC_StreamProcessor
//-----------------------------------------------------------------------------
{
  ///<copy ICC_ByteStreamProducer::DataSize>
  [propget]
  HRESULT	DataSize([out,retval] CC_UINT*);

  ///<copy ICC_ByteStreamProducer::GetData>
  HRESULT	GetData(
    [out,size_is(cbBufSize)] CC_PBYTE pbData,
    [in] CC_UINT cbBufSize,                  
    [out,retval,defaultvalue(NULL)] CC_UINT *pcbRetSize);
};

//-----------------------------------------------------------------------------
[object, uuid(eb28dcba-d1a5-4a53-a69d-9e000efd9804), pointer_default(unique), local] 
/// The base interface for any of Cinecoder's transcoders.
/// Transcoder is an object which handles the bytestream, but does not change its type during processing (doesn't decode it),
/// It is base stream for splitters, cutters, correctors etc.
interface ICC_Transcoder : ICC_Decoder
//-----------------------------------------------------------------------------
{
  ///<copy ICC_ByteStreamProducer::DataSize>
  [propget]
  HRESULT	DataSize([out,retval] CC_UINT*);

  ///<copy ICC_ByteStreamProducer::GetData>
  HRESULT	GetData(
    [out,size_is(cbBufSize)] CC_PBYTE pbData,
    [in] CC_UINT cbBufSize,                  
    [out,retval,defaultvalue(NULL)] CC_UINT *pcbRetSize);
};

//-----------------------------------------------------------------------------
[object, uuid(0920768f-e355-40df-a9c9-2e5b0871db7f), pointer_default(unique), local]
// The Splitter is an object which splits the incoming raw data bytes into corresponding stream access units.
interface ICC_Splitter : ICC_Transcoder
//-----------------------------------------------------------------------------
{
};

[object, uuid(562e7dae-48ab-4805-a583-108ddb87aa33), pointer_default(unique), local]
/// The ICC_Cutter is intended for making the cuts from a media stream
/// The ICC_Cutter is works very similar to ICC_Splitter, but with the following considerations:
/// - every call to ProcessData should contain the entire access unit of a media stream (coded video or audio frame)
/// - time should be assigned
/// 
/// The cut is specified by the pair of the time intervals - the SafeZone and the FullZone.
/// The SafeZone interval determines the area where the cutted material should be decoded with no difference to the source material.
/// The FullZone interval usually slightly wider than SafeZone to establish some pre- and post-roll to let the cutter make some
/// adjustments within the stream to make the SafeZone be decoded without any artifacts.
///
/// The ICC_Cutter will skip all access units with time lesser than FullZone.start and then, if FullZone is started
/// an non-stream entry access unit, will emit the dummy frames until the proper stream entry access unit is arrived,
/// So the resulted stream can be properly decoded from exact FullZone.start_time point.
/// 
/// If no stream entry access unit is arrived between FullZone.start_time and SafeZone.start_time - the MPG_E_SYNC_FAILED error will be generated.
///
interface ICC_Cutter : ICC_Transcoder
{
  /// Specifies the cutting area, should be called before any subsequent ProcessData
  HRESULT	SetCuttingArea(
    [in] CC_TIME_INTERVAL SafeZone, /// the area where the cutted material, when decoded, should have no difference to the source material.
    //[in] CC_TIME_INTERVAL FullZone  /// the wider area with leads and trails where 
    [in] CC_INT leadIn,             /// the duration, at the beginning of the cutting area, where the differencies are allowed
    [in] CC_INT leadOut             /// 
  );
};

interface ICC_DataWriterEx;
//-----------------------------------------------------------------------------
[object, uuid(52911b83-e54e-401a-b952-a1413eec82aa), pointer_default(unique), local]
interface ICC_IndexWriter : ICC_StreamProcessor
//-----------------------------------------------------------------------------
{
  [propget] HRESULT   IndexCallback([out,retval] ICC_DataWriterEx**p);
  [propput] HRESULT   IndexCallback([in]         ICC_DataWriterEx* p);

  // number of actually written index entries
  [propget] HRESULT   NumActualEntries([out,retval] CC_UINT *n);
};

//-----------------------------------------------------------------------------
[object, uuid(3190F038-CC19-405b-B65B-FED981E38F0D), pointer_default(unique), local]
/// Provides a service to handle the generalized bytestream data.
/// Used as interface of callback-objects which handles the data coming from
/// <link ICC_ElementaryStreamProducer, elementary stream producers> such as video or audio encoders.
/// It is also used as interface to the <link ICC_Multiplexer::CreatePin, input pin> of the ICC_Multiplexer objects.
interface ICC_ByteStreamCallback : IUnknown
//-----------------------------------------------------------------------------
{
  /// Process the chunk of data.
  /// The method handles bytestream chunks from various bytestream producers like encoders, multiplexers etc.
  /// <p>In case of assigned <link ICC_BufferAllocator, buffer allocator> check that <i>pbData</i> points to the internal buffer.
  /// If so, you may not copy the data by yourself.
  /// Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   ProcessData(
    [in, size_is(cbSize)] CC_PCBYTE pbData,   /// Pointer to the buffer containing the elementary data. 
    [in] CC_AMOUNT cbSize,                    /// The elementary data size in bytes.
    [in,defaultvalue(CC_NO_TIME)] CC_TIME pts,   /// (Optional) presentation time of first access unit commencing in the data.
  	[in,defaultvalue(NULL)] IUnknown *pSender /// The object which generated the data
  );
};

//-----------------------------------------------------------------------------
[object, uuid(55813708-a883-4bca-be08-061a546e0d3f), pointer_default(unique), local]
interface ICC_DataReadyCallback : IUnknown
//-----------------------------------------------------------------------------
{
  HRESULT	DataReady([in] IUnknown *pDataProducer);
};

//-----------------------------------------------------------------------------
[object, uuid(BF96E276-449C-47ec-BFA0-0BACB3447F1D), pointer_default(unique), local]
/// Provides access to the TimeBase property.
interface ICC_TimeBaseProp : IUnknown
//-----------------------------------------------------------------------------
{
  [propget] HRESULT TimeBase([out,retval]CC_TIMEBASE*);
  [propput] HRESULT TimeBase([in]        CC_TIMEBASE);
};

//-----------------------------------------------------------------------------
[object, uuid(020CC64E-0BCD-4d5b-B68A-E210716F2D9E), pointer_default(unique), local]
/// Provides access to the InitialTimeCode property.
interface ICC_InitialTimeCodeProp : IUnknown
//-----------------------------------------------------------------------------
{
  [propget] HRESULT InitialTimeCode  ([out,retval]CC_TIMECODE*t);
  [propput] HRESULT InitialTimeCode  ([in]        CC_TIMECODE t);
};

//-----------------------------------------------------------------------------
[object, uuid(146273cc-9a1e-4faa-b45a-a34a6dc80a7a), pointer_default(unique), local]
/// Provides access to the BitRate property. 
/// May be used f.e. for changing the bitrate of an encoder/multiplexer on the fly.
interface ICC_BitRateProp : IUnknown
//-----------------------------------------------------------------------------
{
  [propget] HRESULT BitRate  ([out,retval]CC_BITRATE*b);
  [propput] HRESULT BitRate  ([in]        CC_BITRATE b);
};

//-----------------------------------------------------------------------------
[object, uuid(003f7114-3a9c-41f3-b034-60801da85d6f), pointer_default(unique), local]
/// Provides access to the FrameRate property. 
/// May be used f.e. for changing the bitrate of an encoder/multiplexer on the fly.
interface ICC_FrameRateProp : IUnknown
//-----------------------------------------------------------------------------
{
  [propget] HRESULT FrameRate([out,retval]CC_FRAME_RATE*b);
  [propput] HRESULT FrameRate([in]        CC_FRAME_RATE b);
};

//-----------------------------------------------------------------------------
[object, uuid(CFB56A68-B3F4-422d-B976-1C265A1D3064), pointer_default(unique), local]
// Provides the special service for memory allocation.
// Remarks
// The interface is used to prevent double memory copy when moving data from source to destination
// (in the case the destination has an internal buffer for the incoming data).
// The receiver object can use the interface to allow the source object distributing the memory directly in its buffers to prevent extra memory copying.
// If the receiver does not have the buffer, the data should be allocated in the source object. In this case, the additional copying is necessary to transfer the data.
interface ICC_BufferAllocator : IUnknown
//-----------------------------------------------------------------------------
{
  // Method to allocate the specified number of bytes in the internal buffer.
  // Remarks
  // If no memory is allocated, NULL will be stored and E_OUTOFMEMORY will be returned.
  // In this case, all generated data will remain in the source (none will be copied).
  // and the destination side will need to copy the data manually, or return the error.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT	Alloc (
    [in] DWORD cbSize,                        // Number of bytes to allocate.
    [out,retval] BYTE **pBuffer               // Pointer to store the pointer to allocated data.
  );
};

//-----------------------------------------------------------------------------
[object, uuid(DE7A69AB-560E-4777-BAAA-573F9DEFE7EC), pointer_default(unique), local]
// Provides the methods for recovering damaged streams (f.e. DVB translation).
interface ICC_StreamRecovery : IUnknown
//-----------------------------------------------------------------------------
{
  // The stream recovery <link CC_RECOVER_FLAGS, mode>. See CC_RECOVER_FLAGS.
  [propget] HRESULT	  StreamRecoveryMode([out,retval]DWORD*m);
  [propput] HRESULT	  StreamRecoveryMode([in]        DWORD m);

  // The max duration of breaks which recoverer can handle. Measured in <link CC_TIMEBASE, TimeBase units>.
  // Remarks: Remember that long durations lead to long delays during patch generation.
  [propget] HRESULT	  MaxPatchDuration  ([out,retval]CC_TIME*d);
  [propput] HRESULT	  MaxPatchDuration  ([in]        CC_TIME d);
};

//-----------------------------------------------------------------------------
[object, uuid(8f73a09e-3419-42f9-b6e5-28425443fc5d), pointer_default(unique), local]
// Controls the number of threads of particular cinecoder object.
interface ICC_ThreadsCountProp : IUnknown
//-----------------------------------------------------------------------------
{
  // A maximal number of threads which an object can use. 0 = automatic.
  [propget] HRESULT   ThreadsCount   ([out,retval] CC_AMOUNT*);
  [propput] HRESULT   ThreadsCount   ([in]         CC_AMOUNT);
}

//-----------------------------------------------------------------------------
[object, uuid(452854e9-2033-46a3-a3cd-a95aa1f466c1), pointer_default(unique), local]
// Controls the threads affinity of particular cinecoder object.
interface ICC_ThreadsAffinityProp : IUnknown
//-----------------------------------------------------------------------------
{
  // The affinity mask for object's threads. 0 = default (current process) affinity mask.
  [propget] HRESULT   ThreadsAffinity([out,retval] CC_AFFINITY*);
  [propput] HRESULT   ThreadsAffinity([in]         CC_AFFINITY);
}

//-----------------------------------------------------------------------------
[object, uuid(635a623f-f077-4083-963d-6aa66268b0c8), pointer_default(unique), local]
// Controls the threads priority of particular cinecoder object.
interface ICC_ThreadsPriorityProp : IUnknown
//-----------------------------------------------------------------------------
{
  // The priority for object's threads. 
  [propget] HRESULT   ThreadsPriority([out,retval] CC_PRIORITY*);
  [propput] HRESULT   ThreadsPriority([in]         CC_PRIORITY);
}

//-----------------------------------------------------------------------------
[object, uuid(d96ad003-b4ed-4154-afed-c0f778051415), pointer_default(unique), local]
// Provides the methods to control the input queue.
interface ICC_InputBufferControl : IUnknown
//-----------------------------------------------------------------------------
{
  // The size of the input queue.
  [propget] HRESULT   InputBufferSize([out,retval] CC_AMOUNT*);
  [propput] HRESULT   InputBufferSize([in]         CC_AMOUNT);

  // Retrieves the current input queue fullness.
  [propget] HRESULT   InputBufferUsage([out,retval] CC_AMOUNT*);

  // Retrieves the current input queue free space.
  [propget] HRESULT   InputBufferSpace([out,retval] CC_AMOUNT*);
};

//-----------------------------------------------------------------------------
[object, uuid(8CDA674D-A513-4b24-8B6C-0D34B2E8FCD1), pointer_default(unique), local]
interface ICC_ReferenceAlisProp : IUnknown
//-----------------------------------------------------------------------------
{
  // pbData is a pointer to Alias Record Structure (see details at http://xhelmboyx.tripod.com/formats/alias-layout.txt)
  [propput] HRESULT ReferenceAlis([in, size_is(cbSize)] CC_PCBYTE pbData, [in] CC_UINT cbSize);
};

// 
typedef [v1_enum] enum CC_PROCESS_DATA_POLICY
{
	CC_PDP_RAW_STREAM  = 0,  // Incoming data is simple raw bytestream, which is need to be parsed inside the consumer
	CC_PDP_PARSED_DATA = 1,  // Incoming data consist of parsed chunks (frames) of bytes
}
CC_PROCESS_DATA_POLICY;

//-----------------------------------------------------------------------------
[object, uuid(9bfc95b3-67ff-4dce-9258-6545a51fd008), pointer_default(unique), local]
interface ICC_ProcessDataPolicyProp : IUnknown
//-----------------------------------------------------------------------------
{
  // The ProcessData policy property
  [propget] HRESULT   ProcessDataPolicy([out,retval] CC_PROCESS_DATA_POLICY*p);
  [propput] HRESULT   ProcessDataPolicy([in]         CC_PROCESS_DATA_POLICY v);
};

//-----------------------------------------------------------------------------
[object, uuid(8616e94c-3950-4df7-8c90-d776e8645061), pointer_default(unique), local]
interface ICC_AddUserDataCtrl: IUnknown
//-----------------------------------------------------------------------------
{
  // Adds user data for the subsequent video frame.
  // Note: You may call AddUserData several times to add more than one user data.
  // Returns: Returns S_OK if successful or an error code otherwise.
  HRESULT   AddUserData(
    [in, size_is(cbSize)] const BYTE *pbUserData,    // The user data.
    [in] DWORD cbSize,                               // The size of the user data, in bytes.
    [in,defaultvalue(CC_FALSE)] CC_BOOL bSecondField // Tells that incoming user data must appear at the second field (in case of interlaced coding).
  );  
};

//-----------------------------------------------------------------------------
[object, uuid(610330b7-3359-471e-bdc0-2a5ac72be372), pointer_default(unique), local]
// This intended for objects with a pool of "single" concurrent objects inside.
// Usually it is intra_frame-based codecs like J2K or AVC Intra.
// Controls the number of "single" objects running in parallel
interface ICC_ConcurrencyLevelProp : IUnknown
//-----------------------------------------------------------------------------
{
  // The number of "single" objects running in parallel
  [propget] HRESULT   ConcurrencyLevel([out,retval] CC_AMOUNT *p);
  [propput] HRESULT   ConcurrencyLevel([in]         CC_AMOUNT  v);
};

