/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.27.39.11441
*/

// The MPEG Audio channels mode (see iso/iec 11172-3 2.4.2.3 for details).
typedef [v1_enum] enum CC_MPG_AUDIO_CHANNEL_MODE
{
  CC_MPG_ACH_UNKNOWN      = -1,        /// Unknown audio mode.

  CC_MPG_ACH_STEREO       =  0,        /// 2 corellated audio channels (standard music).
  CC_MPG_ACH_JOINT_STEREO =  1,        /// 2 highly corellated audio channels, 1 master channel and 1 "difference" channel.
  CC_MPG_ACH_DUAL_CHANNEL =  2,        /// 2 independent audio channels.
  CC_MPG_ACH_MONO         =  3,        /// 1 audio channel.
}
CC_MPG_AUDIO_CHANNEL_MODE;

// The MPEG Audio emphasis info. Indicates the type of de-emphasis that shall be used (see iso/iec 11172-3 2.4.2.3 for details).
typedef [v1_enum] enum CC_MPG_AUDIO_EMPHASIS
{
  CC_MPG_EMPHASIS_UNKNOWN   = 0,       /// Unknown emphasis.
  CC_MPG_EMPHASIS_0_15      = 1,       /// 50/15 microseconds.
  CC_MPG_EMPHASIS_CCITT_J17 = 3        /// CCITT J.17.
}
CC_MPG_AUDIO_EMPHASIS;

[object, uuid(16bd8d1b-5245-4f88-a43f-2363ef8f4b2b), pointer_default(unique), local]
// Represents the MPEG-specified video stream description.
interface ICC_MpegAudioStreamInfo : ICC_AudioStreamInfo
{
  // The layer of MPEG audio (1-3).
  [propget] HRESULT  Layer           ([out,retval] CC_UINT			 *p);     
  // The audio channel mode.
  [propget] HRESULT  ChannelMode     ([out,retval] CC_MPG_AUDIO_CHANNEL_MODE*);
  // The emphasis, specified in ISO/IEC 11172-3 standard.
  [propget] HRESULT  Emphasis        ([out,retval] CC_MPG_AUDIO_EMPHASIS*);
  // The Copyright flag.
  [propget] HRESULT  CopyrightedFlag ([out,retval] CC_BOOL           *p);
  // The Original flag.
  [propget] HRESULT  OriginalFlag    ([out,retval] CC_BOOL           *p);
  // The coded audio stream is error-protected.
  [propget] HRESULT  ErrorProtection ([out,retval] CC_BOOL           *p);
};

[object, uuid(beff73fd-2452-41e3-aefb-c7f390349f4b), pointer_default(unique), local]
// The description of a particular audio frame.
interface ICC_MpegAudioFrameInfo : ICC_AudioFrameInfo
{                        
  // The bitrate of current frame.
  [propget] HRESULT  BitRate         ([out,retval] CC_BITRATE        *p);
  // The channel mode of current frame.
  [propget] HRESULT  ChannelMode     ([out,retval] CC_MPG_AUDIO_CHANNEL_MODE*p);
};

[object, uuid(40858c51-86e4-496c-a6e8-81cbfe2dcc1c), pointer_default(unique), local]
// The settings for CinecoderMpegAudioEncoder initialization.
interface ICC_MpegAudioEncoderSettings : ICC_AudioEncoderSettings
{                        
  // The layer of mpeg audio, default is 2.
  [propget] HRESULT  Layer           ([out,retval] CC_UINT           *p); 
  [propput] HRESULT  Layer           ([in]         CC_UINT            v); 
  // Destination bitrate.
  [propget] HRESULT  BitRate         ([out,retval] CC_BITRATE        *p);
  [propput] HRESULT  BitRate         ([in]         CC_BITRATE         v);
  // The audio sample rate.
  [propget] HRESULT  SampleRate      ([out,retval] CC_UINT           *p);
  [propput] HRESULT  SampleRate      ([in]         CC_UINT            v);
  // Mpeg audio channel mode (see CC_MPG_AUDIO_CHANNEL_MODE).
  [propget] HRESULT  ChannelMode     ([out,retval] CC_MPG_AUDIO_CHANNEL_MODE*p);
  [propput] HRESULT  ChannelMode     ([in]         CC_MPG_AUDIO_CHANNEL_MODE v);
  // Emphasis (see CC_MPG_AUDIO_EMPHASIS).
  [propget] HRESULT  Emphasis        ([out,retval] CC_MPG_AUDIO_EMPHASIS*p);
  [propput] HRESULT  Emphasis        ([in]         CC_MPG_AUDIO_EMPHASIS v);
  // The Copyright flag.
  [propget] HRESULT  CopyrightedFlag ([out,retval] CC_BOOL           *p);
  [propput] HRESULT  CopyrightedFlag ([in]         CC_BOOL            v);
  // The Original flag.
  [propget] HRESULT  OriginalFlag    ([out,retval] CC_BOOL           *p);
  [propput] HRESULT  OriginalFlag    ([in]         CC_BOOL            v);
  // The coded audio stream is error-protected.
  [propget] HRESULT  ErrorProtection ([out,retval] CC_BOOL           *p);
  [propput] HRESULT  ErrorProtection ([in]         CC_BOOL            v);
};

[object, uuid(7b9c9deb-d2c4-4239-bd19-37214ae27b58), pointer_default(unique), local]
// The main interface to access the CC_MpegAudioDecoder class.
interface ICC_MpegAudioDecoder : ICC_AudioDecoder
{
//## HRESULT   SetElementaryDataCallback(
//##    [in] IUnknown *pCallback                  /// An expected object with ICC_ByteStreamConsumer interface.
//##  );

  HRESULT GetMpegAudioStreamInfo([out,retval] ICC_MpegAudioStreamInfo **pDescr);
  HRESULT GetMpegAudioFrameInfo ([out,retval] ICC_MpegAudioFrameInfo  **pDescr);
};

[object, uuid(a8810f12-baf4-449f-a5d7-052e24adb356), pointer_default(unique), local]
// The main interface to access the CC_MpegAudioEncoder class.
interface ICC_MpegAudioEncoder : ICC_AudioEncoder
{
  HRESULT GetMpegAudioStreamInfo([out,retval] ICC_MpegAudioStreamInfo **pDescr);
  HRESULT GetMpegAudioFrameInfo ([out,retval] ICC_MpegAudioFrameInfo  **pDescr);
};

[object, uuid(3ea678d6-fbfa-4aeb-84b5-ffca91b7aa84), pointer_default(unique), local]
// The main interface to access the CC_MpegAudioSplitter class.
interface ICC_MpegAudioSplitter : ICC_AudioSplitter
{
  HRESULT GetMpegAudioStreamInfo([out,retval] ICC_MpegAudioStreamInfo **pDescr);
  HRESULT GetMpegAudioFrameInfo ([out,retval] ICC_MpegAudioFrameInfo  **pDescr);
};
