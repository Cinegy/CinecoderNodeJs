interface ICC_Schema;
interface ICC_ClassCreator;
//-----------------------------------------------------------------------------
[object, uuid(e7d4b675-63d4-43f4-91fa-0af230111d10), helpstring("The Cinecoder(R) ClassFactory interface"), pointer_default(unique), local]
/// Provides the methods to create any of cinecoder's objects.
interface ICC_ClassFactory : IUnknown
//-----------------------------------------------------------------------------
{
  /// Method to assign your own license key for the factory.
  /// Returns: 
  /// S_OK - Success.
  /// <p>MPG_E_INVALID_LICENSE - Incorrect license key and/or company name.
  /// <p>MPG_E_LICENSE_EXPIRED - The period of license is expired.
  [helpstring("Assigns the license to unlock some Cinecoder's classes")]
  HRESULT   AssignLicense([in] LPCSTR pCompanyName, [in] LPCSTR pLicense);

  /// The main method to create the instance of the specified Cinecoder class.
  /// Returns: Returns S_OK if successful or an error value otherwise.
  /// Remarks: The newly created object comes with RefCount=1 due to executed QueryInterface during creation.
  /// So you will need to manually call the Release() method after using the object to avoid the memory leaking
  /// or just use the smart COM pointers like CComPtr.
  HRESULT	CreateInstance(
    [in] REFCLSID rclsid,      		        /// CLSID of the class to be created.
    [in] REFIID riid,          	 	        /// Needed interface of the class.
    [out,retval,iid_is(riid)]IUnknown**ppu  /// Pointer by which the newly created object will be returned.
  );

  /// The method to create the instance of the specified Cinecoder class, specified by its name.
  /// IUnknown interface will be returned.
  /// Returns: S_OK if successful or an error value otherwise.
  /// Remarks: The newly created object comes with RefCount=1.
  /// So you will need to manually call the Release() method after using the object to avoid the memory leaking
  /// or just use the smart COM pointers like CComPtr.
  HRESULT	CreateInstanceByName(
    [in] CC_STRING pObjName,               /// The enquoted name of a class without 'CC_' prefix (f.e. "MpegVideoEncoder" for CC_MpegVideoEncoder).
    [out,retval]IUnknown**ppu              /// Place when the pointer to IUnknown interface of specified class will be stored.
  );

  HRESULT CreateSchema(
    [in] CC_STRING strXML, 
    [out,retval] ICC_Schema **p
  );

  /// Add the external (user-defined) class creator to the Cinecoder's list of classes.
  /// this method allows users to extend the functionality of the Cinecoder in the run time.
  /// This methos suitable for creating the schema containing user-defined classes.
  HRESULT AddClassCreator(
    [in] CLSID clsid, 	     		        /// CLSID of the class 
    [in] CC_STRING pClassName,              /// Name of the class
    [in] ICC_ClassCreator *pMaker           /// The maker object
  );

  /// The default <link CC_TIMEBASE, time base> for all subsequent <link ICC_StreamProcessor, stream processors> created by the factory.
  [propget] HRESULT   DefaultTimeBase       ([out,retval] CC_TIMEBASE*);
  [propput] HRESULT   DefaultTimeBase       ([in]         CC_TIMEBASE);

  /// The default <link ICC_ThreadsAffinityProp, affinity mask> for all subsequent <link ICC_StreamProcessorMT, stream processors with MT capability> created by the factory.
  [propget] HRESULT   DefaultThreadsAffinity([out,retval] CC_AFFINITY*);
  [propput] HRESULT   DefaultThreadsAffinity([in]         CC_AFFINITY);

  /// The default <link ICC_ThreadsPriorityProp, priority> for all subsequent <link ICC_StreamProcessorMT, stream processors with MT capability> created by the factory.
  [propget] HRESULT   DefaultThreadsPriority([out,retval] CC_PRIORITY*);
  [propput] HRESULT   DefaultThreadsPriority([in]         CC_PRIORITY);

  /// The method for loading the external plugins (see ICC_pluginDescr)
  HRESULT LoadPlugin(
    [in] CC_STRING pFileName
  );
};

//-----------------------------------------------------------------------------
[object, uuid(48b6acc6-3d65-41f4-8005-cf19058afc7e), pointer_default(unique), local] 
/// Interface to handle the aggregate objects. See The Schema chapter for details.
interface ICC_Schema : IUnknown
//-----------------------------------------------------------------------------
{
  /// Done all of internal objects in the safe order.
  HRESULT   Done(
    [in] CC_BOOL bFlush,        /// CC_FALSE - stop immediately, dismiss the unprocessed data.
                                /// CC_TRUE  - flush the unprocessed data, then stop.
    [out,retval,defaultvalue(NULL)]CC_BOOL *pbDone
  );

  /// Returns the nth subobject of scheme
  /// Note: The objects ordered as declared in the XML.
  /// Returns: S_OK or E_INVALIDARG
  HRESULT   GetObject(
    [in] CC_UINT OrderNumber,
    [out, retval] IUnknown **ppObj
  );

  /// Returns the number of objects in the scheme
  /// Returns: S_OK
  [propget]
  HRESULT   ObjectCount(
    [out,retval] CC_UINT *pNumber
  );

  /// Finds the subobject by its name in the XML. 
  /// Returns: S_OK or S_FALSE if nothing associated with the name is found.
  HRESULT   FindObjectByName(
    [in] CC_STRING pObjName,
    [out, retval] IUnknown **ppObj
  );

  /// The method searches for nth object with specified interface.
  /// Note: The objects ordered as declared in the XML.
  /// Returns: S_OK or S_FALSE if n'th object with specified interface is not found
  HRESULT   FindObjectByInterface(
    [in] IID ObjIID,
    [in] CC_UINT OrderNumber,
    [out, retval] IUnknown **ppObj
  );

  /// Returns the number of scheme subobjects with specified interface
  /// Returns: S_OK
  HRESULT   GetObjectCountByInterface(
    [in] IID ObjIID,
    [out,retval] CC_UINT *ObjNumber
  );

  // Returns the name specified by "name" tag.
  // If no name tag specified - returns NULL and S_FALSE
  [propget]
  HRESULT   Name(
    [out, retval] CC_STRING *ppName
  );

};

//-----------------------------------------------------------------------------
[object, uuid(4735fb44-54bc-478a-8ffa-3ac6cb320a1a), pointer_default(unique), local] 
interface ICC_ClassCreator : IUnknown
//-----------------------------------------------------------------------------
{
  /// The method to create the instance of the specified class.
  /// Returns: Returns S_OK if successful or an error value otherwise.
  /// Remarks: The newly created object comes with RefCount=1 due to executed QueryInterface during creation.
  /// So you will need to manually call the Release() method after using the object to avoid the memory leaking
  /// or just use the smart COM pointers like CComPtr.
  HRESULT	CreateInstance(
    [in] REFCLSID rclsid,  		/// CLSID of the class
    [out,retval] IUnknown**ppu  /// Pointer to pointer for created object
  );
};

//-----------------------------------------------------------------------------
[object, uuid(1fb875da-bdf4-4de9-b591-a3dc77d370c9), pointer_default(unique), local]
interface ICC_ErrorHandler : IUnknown
//-----------------------------------------------------------------------------
{
  HRESULT   ErrorHandlerFunc(HRESULT ErrCode, LPCSTR ErrDescription, LPCSTR pFileName, INT LineNo);
};

//-----------------------------------------------------------------------------
[object, uuid(a84dee36-545b-4c77-b688-08b213b1c154), pointer_default(unique), local]
interface ICC_ErrorHandlerGetter : IUnknown
//-----------------------------------------------------------------------------
{
  /// The ErrorHandler object
  [propget] HRESULT	  ErrorHandler       ([out,retval] ICC_ErrorHandler**);
  //##[propput] HRESULT   ErrorHandler       ([in]         ICC_ErrorHandler*);
};

//-----------------------------------------------------------------------------
[object, uuid(2cff007c-31c3-45bf-8ac1-3b169c4ccd7b), pointer_default(unique), local]
interface ICC_ErrorHandlerProp : IUnknown
//-----------------------------------------------------------------------------
{
  /// The ErrorHandler object
  [propget] HRESULT	  ErrorHandler       ([out,retval] ICC_ErrorHandler**);
  [propput] HRESULT   ErrorHandler       ([in]         ICC_ErrorHandler*);
};

//-----------------------------------------------------------------------------
[object, uuid(dea107a0-559e-4908-94fc-8e17b9f0e1ad), pointer_default(unique), local]
/// Implement this interface, if you need to create some cinecoder classes in runtime
interface ICC_ClassFactoryProvider : IUnknown
//-----------------------------------------------------------------------------
{
  /// The Cinecoder factory object
  [propget] HRESULT   Factory            ([out,retval] ICC_ClassFactory **);
  [propput] HRESULT	  Factory            ([in]         ICC_ClassFactory *);
};

//-----------------------------------------------------------------------------
[object, uuid(aa304da6-c855-4fda-822c-32da58bcbaf3), pointer_default(unique), local]
// The plugin descriptor
interface ICC_PluginDescr : IUnknown
//-----------------------------------------------------------------------------
{
  // The LIBID of plugin
  [propget] HRESULT  LibId     ([out,retval] GUID            *p);
  // The name of plugin
  [propget] HRESULT  Name      ([out,retval] CC_STRING       *p);
  // The version of Cinecoder, with which the plugin was built
  [propget] HRESULT	 Version   ([out,retval] CC_VERSION_INFO *p);
  // The number of classes implemented by the plugin
  [propget] HRESULT  NumClasses([out,retval] CC_UINT         *p);
  // Returns a creator for corresponding class (see NumClasses property)
  HRESULT GetClassCreator([in] CC_UINT idx, [out] CLSID *clsid, [out] CC_STRING *name, [out] ICC_ClassCreator **pmaker);
  //
  HRESULT SetErrorHandlerGetter([in] ICC_ErrorHandlerGetter *pHandler);
};

cpp_quote("typedef HRESULT (STDAPICALLTYPE *GetPluginDescrProc)(ICC_PluginDescr**);")
