[object, uuid(c7689044-8834-41b0-8dfe-a5c407f8a25b), pointer_default(unique), local]
/// 
interface ICC_DataWriter : IUnknown
{
  HRESULT	Write(
    [in, size_is(cbSize)] CC_PCBYTE pbData,   /// Pointer to the block of data.
    [in] CC_AMOUNT cbSize                     /// Size of the block of data (in bytes).
  );
};

[object, uuid(07d72818-5aa6-4f0d-bdf2-c0f815901537), pointer_default(unique), local]
/// 
interface ICC_DataWriterEx : ICC_DataWriter
{
  // Method for periodical asyncronous update some entries of the file (headers, indices, etc.)
  // Note: This method <b>does not change</b> the current file position of sequential writer.
  HRESULT	WriteDirect(
    [in] CC_OFFSET offs,                      /// Offset at which the data should be written.
    [in, size_is(cbSize)] CC_PCBYTE pbData,   /// Pointer to the block of data.
    [in] CC_AMOUNT cbSize                     /// Size of the block of data (in bytes).
  );
};

[object, uuid(05ebcab5-b9d7-4024-aa3e-b63b1d5e046d), pointer_default(unique), local]
/// 
interface ICC_DataReader : IUnknown
{
  HRESULT	Read(
    [in, out, size_is(cbSize), length_is(*pcbRead)] CC_PBYTE pbData,/// Pointer to the block of data.
    [in] CC_AMOUNT cbSize,                     /// Size of the block of data (in bytes).
    [out,retval] CC_AMOUNT *pcbRead            /// Number of bytes actually read
  );
};

[object, uuid(b7f45fbd-8e48-4c72-9bf6-51f4753fb723), pointer_default(unique), local]
/// 
interface ICC_DataReaderEx : ICC_DataReader
{
  // Method for periodical asyncronous update some entries from the file (headers, indices, etc.)
  // Note: This method <b>does not change</b> the current file position of sequential reader.
  HRESULT	ReadDirect(
    [in] CC_OFFSET offs,                      /// Offset at which the data should be read
    [in, out, size_is(cbSize), length_is(*pcbRead)] CC_PBYTE pbData,/// Pointer to the block of data.
    [in] CC_AMOUNT cbSize,                     /// Size of the block of data (in bytes).
    [out,retval] CC_AMOUNT *pcbRead            /// Number of bytes actually read
  );
};

[object, uuid(7082a2e8-e87b-4f0b-b1eb-c071aca2b676), pointer_default(unique), local]
/// Interface for controlling the current position  random-accessing media such files.
interface ICC_StreamPositionProp : IUnknown
{
  /// Get or set the position within the stream.
  [propget] HRESULT  Position ([out,retval] CC_OFFSET*o); 
  [propput] HRESULT  Position ([in]         CC_OFFSET o); 
};

[object, uuid(56e7b348-2a5c-4d67-b624-550dc87e87db), pointer_default(unique), local]
/// 
interface ICC_StreamLengthProp : IUnknown
{
  /// Get the end-of-stream position
  [propget] HRESULT  Length ([out,retval] CC_OFFSET*o); 
};

[object, uuid(1fe2f5d7-ed48-4362-9ebd-2aa00429b0dd), pointer_default(unique), local]
/// 
interface ICC_InputStream : IUnknown
{
  /// Reads the block of binary data with specified size into the buffer
  HRESULT	Read(
    [in, out, size_is(cbSize), length_is(*pcbRead)] CC_PBYTE pbData,/// Pointer to the block of data.
    [in] CC_AMOUNT cbSize,                     /// Size of the block of data (in bytes).
    [out,retval] CC_AMOUNT *pcbRead            /// Number of bytes actually read
  );

  /// End-of-file sign
  [propget] HRESULT  EOF      ([out,retval] CC_BOOL *b);

  /// Get or set the position within the stream.
  [propget] HRESULT  Position ([out,retval] CC_OFFSET*o); 
  [propput] HRESULT  Position ([in]         CC_OFFSET o); 

  /// Get the end-of-stream position
  [propget] HRESULT  Length   ([out,retval] CC_OFFSET*o); 
};

typedef [v1_enum] enum CC_OPEN_FLAGS
{
	CC_FILE_OPEN_DEFAULT = 0,
}
CC_OPEN_FLAGS;

[object, uuid(4a4806fb-d622-4c14-a19c-935accc9b450), pointer_default(unique), local]
interface ICC_File : IUnknown
{
  HRESULT	Close();

  [propget] HRESULT  FileName([out,retval] CC_STRING *pName);

  [propget] HRESULT	 IsOpened([out,retval] CC_BOOL *pFlag);

  /// Get or set the position within the stream.
  [propget] HRESULT  Position ([out,retval] CC_OFFSET*o); 
  [propput] HRESULT  Position ([in]         CC_OFFSET o); 

  /// Get the end-of-stream position
  [propget] HRESULT  Length   ([out,retval] CC_OFFSET*o); 
};

[object, uuid(fac59d98-7bd4-4100-b807-eccd2fbe1cbf), pointer_default(unique), local]
interface ICC_InputFile : ICC_File
{
  HRESULT	Open([in] CC_STRING FileName, [in,defaultvalue(0)] DWORD OpenFlags);//, [out,retval,defaultvalue(NULL)] HRESULT *pResult);

  HRESULT	Read(
    [in, out, size_is(cbSize), length_is(*pcbRead)] CC_PBYTE pbData,/// Pointer to the block of data.
    [in] CC_AMOUNT cbSize,                     /// Size of the block of data (in bytes).
    [out,retval] CC_AMOUNT *pcbRead            /// Number of bytes actually read
  );

  /// End-of-file sign
  [propget] HRESULT  EOF      ([out,retval] CC_BOOL *b);
};

[object, uuid(4682af7b-926a-4d47-be2b-8bb5d555331d), pointer_default(unique), local]
interface ICC_OutputFile : ICC_File
{
  HRESULT	Create([in] CC_STRING FileName, [in,defaultvalue(0)] DWORD OpenFlags);//, [out,retval,defaultvalue(NULL)] HRESULT *pResult);

  HRESULT	Write(
    [in, size_is(cbSize)] CC_PCBYTE pbData,    /// Pointer to the block of data.
    [in] CC_AMOUNT cbSize,                     /// Size of the block of data (in bytes).
    [out,retval] CC_AMOUNT *pcbWrite           /// Number of bytes actually read
  );

  HRESULT	Flush();
};