// List of the elementary streams types
// (see ISO/IEC 13818-1 2.5.4.2 "Semantic definition of fields in Program Stream map").
typedef [v1_enum] enum CC_ELEMENTARY_STREAM_TYPE
{
  CC_ES_TYPE_UNKNOWN                      = 0x00,  /// ITU-T | ISO/IEC Reserved.
  CC_ES_TYPE_VIDEO_MPEG1                  = 0x01,  /// ISO/IEC 11172 Video.
  CC_ES_TYPE_VIDEO_MPEG2                  = 0x02,  /// ITU-T Rec. H.262 | ISO/IEC 13818-2 Video or ISO/IEC 11172-2 constrained parameter video stream.
  CC_ES_TYPE_AUDIO_MPEG1                  = 0x03,  /// ISO/IEC 11172 Audio.
  CC_ES_TYPE_AUDIO_MPEG2                  = 0x04,  /// ISO/IEC 13818-3 Audio.
  CC_ES_TYPE_PRIVATE_SECTION              = 0x05,  /// ITU-T Rec. H.222.0 | ISO/IEC 13818-1 private_sections.
  CC_ES_TYPE_PRIVATE_DATA                 = 0x06,  /// ITU-T Rec. H.222.0 | ISO/IEC 13818-1 PES packets containing private data.
  CC_ES_TYPE_MHEG                         = 0x07,  /// ISO/IEC 13522 MHEG.
  CC_ES_TYPE_DSM_CC                       = 0x08,  /// ITU-T Rec. H.222.0 | ISO/IEC 13818-1 Annex A DSM CC.
  CC_ES_TYPE_H_222_1                      = 0x09,  /// ITU-T Rec. H.222.1.
  CC_ES_TYPE_13818_6_A                    = 0x0A,  /// ISO/IEC 13818-6 type A.
  CC_ES_TYPE_13818_6_B                    = 0x0B,  /// ISO/IEC 13818-6 type B.
  CC_ES_TYPE_13818_6_C                    = 0x0C,  /// ISO/IEC 13818-6 type C.
  CC_ES_TYPE_13818_6_D                    = 0x0D,  /// ISO/IEC 13818-6 type D.
  CC_ES_TYPE_13818_1_AUX                  = 0x0E,  /// ISO/IEC 13818-1 auxiliary.
  CC_ES_TYPE_AUDIO_AAC                    = 0x0f,  /// ISO/IEC 13818-7 Audio with ADTS transport syntax
  CC_ES_TYPE_VIDEO_MPEG4                  = 0x10,  /// ISO/IEC 14496-2 Visual (H.263 Video)
  CC_ES_TYPE_AUDIO_LATM					  = 0x11,  /// ISO/IEC 14496-3 Audio with the LATM transport syntax as defined in ISO/IEC 14496-3 / AMD 1
  CC_ES_TYPE_FLEXMUX_1					  = 0x12,  /// ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in PES packets
  CC_ES_TYPE_FLEXMUX_2					  = 0x13,  /// ISO/IEC 14496-1 SL-packetized stream or FlexMux stream carried in ISO/IEC14496_sections
  CC_ES_TYPE_SYNC_DOWNLOAD_PROTOCOL		  = 0x14,  /// ISO/IEC 13818-6 Synchronized Download Protocol

  CC_ES_TYPE_VIDEO_H264                   = 0x1b,  /// H.264 Video
  CC_ES_TYPE_VIDEO_AVC                    = 0x1b,  /// H.264 Video

  CC_ES_TYPE_VIDEO_J2K					  = 0x21,  /// Jpeg-2000 elementary stream

  CC_ES_TYPE_VIDEO_H265                   = 0x27,  /// H.265/HEVC Video
  CC_ES_TYPE_VIDEO_HEVC                   = 0x27,  /// H.265/HEVC Video
  
  //CC_ES_TYPE_USER_PRIVATE                 = 0x80,  /// User Private
  CC_ES_TYPE_AUDIO_LPCM                   = 0x80,  /// LPCM Audio
  CC_ES_TYPE_AUDIO_AC3                    = 0x81,  /// AC3 Audio
  CC_ES_TYPE_AUDIO_AC3_ATSC               = 0x81,  /// AC3 Audio (system A)
  CC_ES_TYPE_AUDIO_AC3_DVB                = 0x8106,/// AC3 Audio (system B) carried by stream type 06
  CC_ES_TYPE_SCTE_35                      = 0x86,  /// SCTE-35 splice messages
  CC_ES_TYPE_AUDIO_DTS                    = 0x8a,  /// DTS Audio

  CC_ES_PRESENTATION_GRAPHICS             = 0x90,  /// BluRay PGS (subtitles)
  CC_ES_INTERACTIVE_GRAPHICS              = 0x91,  /// BluRay IGS

  CC_ES_TYPE_AUDIO_AES3                   = 0x98,  /// SMPTE-302M Audio.
  CC_ES_TYPE_DATA_AES3                    = 0x99,  /// SMPTE-302M Data.

  CC_ES_TYPE_AUDIO_DOLBY_E                = 0x9906,/// SMPTE-302M Data carried by stream type 06.
                                          
  CC_ES_TYPE_HDV2_AUX_A                   = 0xA0,  /// HDV-2 Auxillary Audio Stream.
  CC_ES_TYPE_HDV2_AUX_V                   = 0xA1,  /// HDV-2 Auxillary Video Stream.

  CC_ES_TYPE_VIDEO_DV                     = 0x1d0, /// DV Video.
  CC_ES_TYPE_VIDEO_DVCPRO                 = 0x1d1, /// DVCPRO Video.
  CC_ES_TYPE_VIDEO_DNxHD                  = 0x1d2, /// VC-3 Video (DNxHD Codec).

  CC_ES_TYPE_VIDEO_AVC_INTRA              = 0x11b, /// AVC-Intra Video
}
CC_ELEMENTARY_STREAM_TYPE;

[object, uuid(03AF145E-6633-4cbd-B6CF-286473E55860), pointer_default(unique), local]
interface ICC_ElementaryStreamInfo : ICC_Settings
{
  // The elementary stream type. See the CC_ELEMENTARY_STREAM_TYPE for details.
  [propget] HRESULT  StreamType      ([out,retval] CC_ELEMENTARY_STREAM_TYPE *p);
  // The bitrate (max) of the elementary stream.
  [propget] HRESULT  BitRate         ([out,retval] CC_BITRATE *p);
  // The frame rate of the stream. In the case of video, it is native video frame rate. In the case of audio, it is rate of the coded audio frames.
  [propget] HRESULT  FrameRate       ([out,retval] CC_FRAME_RATE *p);
};

[object, uuid(89157059-e318-4a9b-8821-1cfc979ac119), pointer_default(unique), local]
interface ICC_ElementaryStreamSettings : ICC_Settings
{
  // The elementary stream type. See the CC_ELEMENTARY_STREAM_TYPE for details.
  [propget] HRESULT  StreamType      ([out,retval] CC_ELEMENTARY_STREAM_TYPE *p);
  [propput] HRESULT  StreamType      ([in]         CC_ELEMENTARY_STREAM_TYPE  v);
  // The bitrate (max) of the elementary stream.
  [propget] HRESULT  BitRate         ([out,retval] CC_BITRATE *p);
  [propput] HRESULT  BitRate         ([in]         CC_BITRATE  v);
  // The frame rate of the stream. In case of video it is native video frame rate. In case of audio it is rate of the coded audio frames.
  [propget] HRESULT  FrameRate       ([out,retval] CC_FRAME_RATE *p);
  [propput] HRESULT  FrameRate       ([in]         CC_FRAME_RATE  v);
};

[object, uuid(ad2b6c6e-c53d-4421-9b7b-3b0224205257), pointer_default(unique), local]
// The description of bytestream data
interface ICC_ByteStreamDataInfo : ICC_Settings
{
  // Size in bytes.
  [propget] HRESULT DataSize		 ([out,retval] CC_UINT*);
  // The byte offset of frame in the elementary stream.
  [propget] HRESULT ByteOffset		 ([out,retval] CC_OFFSET*);
};

[object, uuid(D2C8A578-2495-4271-8F99-1DFC469E7B32), pointer_default(unique), local]
// The description of elementary stream data unit
interface ICC_ElementaryDataInfo : ICC_ByteStreamDataInfo
{
  // Number of samples of the elementary data.
  // In case of coded video frames, there is usually 1 or 2 sample(s) (1 frame or 2 fields).
  // In case of coded audio, there are the number of audio samples, encoded into audio frame.
  [propget] HRESULT NumSamples		 ([out,retval] CC_UINT*);
  // The frame's first sample order number.
  [propget] HRESULT SampleOffset	 ([out,retval] CC_OFFSET*);
  // Duration of the elementary data.
  // The duration of multimedia samples, encoded into elementary data, measured in CC_TIME units.
  [propget] HRESULT Duration		 ([out,retval] CC_TIME*);
  // The presentation delta, in samples, of the elementary data.
  // It is actual for data which was reordered during encoding process (f.e. coded video with <link CC_FRAME_TYPE::MPG_B_FRAME, B-frames>).
  [propget] HRESULT PresentationDelta([out,retval] CC_INT*);
  // The Presentation Data Stamp (PTS) of the elementary data.
  // The PTS based on CC_TIMEBASE, specified for object which generates the elementary data.
  [propget] HRESULT PTS				 ([out,retval] CC_TIME*);
  // The Decoding Data Stamp (DTS) of the elementary data.
  // Usually equals to PTS, except the coded video with <link CC_FRAME_TYPE::MPG_B_FRAME, B-frames>.
  [propget] HRESULT DTS				 ([out,retval] CC_TIME*);
  // The sequence entry point flag.
  // In the case of mpeg video, it means that SEQUENCE_HEADER presents in the elementary data.
  // This flag is used to signal the multiplexers to generate the entry point (like System Header) at this elementary data.
  [propget] HRESULT SequenceEntryFlag([out,retval] CC_BOOL*);
};

[object, uuid(923d7d85-60e1-479b-a546-0f8c1664c43a), pointer_default(unique), local]
// The interface for retrieving the coded stream header from paticular object (decoder,encoder,splitter, etc)
interface ICC_CodedStreamHeaderProp : IUnknown
{
  // Retrieve the coded stream header byte block.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetCodedStreamHeader(
    [out,size_is(cbSize)] BYTE *pbStreamHeaderBuf,   // Buffer for storing the stream header. If NULL is specified, only pcbRetSize will be filled.
    [in] DWORD cbSize,                               // The size of the buffer in bytes. The value doesn't care if pbStreamHeaderBuf is NULL.
    [out,retval] DWORD *pcbRetSize                   // The resulting size in bytes.
  );
};
