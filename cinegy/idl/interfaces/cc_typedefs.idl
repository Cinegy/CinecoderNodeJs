/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.30.18.13164
*/

#pragma pack(push,1)

typedef signed char			CC_INT8;
typedef signed short		CC_INT16;
typedef signed int			CC_INT32;
typedef signed long long	CC_INT64;

typedef unsigned char		CC_UINT8;
typedef unsigned short		CC_UINT16;
typedef unsigned int		CC_UINT32;
typedef unsigned long long	CC_UINT64;

typedef CC_UINT8	CC_BYTE;               /// Unsigned int8.
typedef	CC_UINT16	CC_WORD;               /// Unsigned int16.

typedef int			CC_INT;                /// int32.
typedef DWORD		CC_UINT;               /// Unsigned int32.

typedef float		CC_FLOAT;              /// float32.
typedef double		CC_DOUBLE;			   /// double64

// Boolean type. Values are CC_FALSE(0) and CC_TRUE(-1).
typedef VARIANT_BOOL CC_BOOL;
const CC_BOOL CC_FALSE = ((CC_BOOL)0);
const CC_BOOL CC_TRUE  = ((CC_BOOL)-1);
const CC_BOOL CC_SOFT_FLUSH = ((CC_BOOL)-2);
//cpp_quote("#ifdef __cplusplus")

// Rational numbers type.
typedef struct CC_RATIONAL
{
	CC_INT	num;                       /// Numerator.
	CC_UINT	denom;                     /// Denominator. Must be > 0 to avoid division by zero.
}
CC_RATIONAL;
//cpp_quote("#else")
//cpp_quote("struct CC_RATIONAL {")
//cpp_quote("CC_INT num;")
//cpp_quote("CC_UINT denom;")
//cpp_quote("CC_RATIONAL()                     : num(0), denom(1) {}")
//cpp_quote("CC_RATIONAL(CC_INT n)             : num(n), denom(1) {}")
//cpp_quote("CC_RATIONAL(CC_INT n, CC_UINT(d)) : num(n), denom(d) {}")
//cpp_quote("CC_RATIONAL(const CC_RATIONAL &r) : num(r.num), denom(r.denom) {}")
//cpp_quote("};")
cpp_quote("inline const CC_RATIONAL MK_RATIONAL(CC_INT32  n, CC_UINT32 d) { CC_RATIONAL r={n,d}; return r; }")
//cpp_quote("extern ""cplusplus"" inline CC_RATIONAL MK_RATIONAL(CC_INT32  n, CC_UINT32 d) { return CC_RATIONAL(n,d); }")
//cpp_quote("#endif")
cpp_quote("#define CC_RATIONAL_DEFINED")

typedef BYTE*        CC_PBYTE;
typedef const BYTE*  CC_PCBYTE;
typedef CC_UINT      CC_AMOUNT;
typedef BSTR		 CC_STRING;
typedef CC_STRING    CC_TEXT;       /// The same as CC_STRING, but will be parsed from XML differently, as a text block
typedef POINT        CC_POINT;
typedef SIZE         CC_SIZE;
typedef RECT		 CC_RECT;
typedef CC_RATIONAL  CC_FRAME_RATE; /// The type to represent any sample or frame rates as rational fraction.
typedef CC_RATIONAL  CC_SAMPLE_RATE;
typedef LONGLONG     CC_BITRATE;    /// The type to represent the bitrate of any Cinecoder object.
typedef LONGLONG     CC_TIME;       /// The timing info of any multimedia data, 
                                    /// measured in CC_TIMEBASE units.
typedef CC_UINT      CC_TIMEBASE;   /// The time base for all timing info such as PTS, DTS for the particular <link ICC_StreamProcessor, stream processor>.
                                    /// Specifies the number of units in 1 second.
typedef CC_UINT      CC_PERIOD;     /// The period of something's occurrence. See CC_PERIOD_FLAGS.
typedef CC_INT64     CC_OFFSET;		/// Represents the position in a stream.

typedef INT_PTR		 CC_AFFINITY;	/// Represents the thread's affinity mask

typedef struct CC_TIME_INTERVAL
{
	CC_TIME		start_time;			/// The begin point of the time interval
	CC_TIME		stop_time;          /// The end point of the time interval, not included into it.
}
CC_TIME_INTERVAL;

///const CC_TIME CC_NO_TIME = ((CC_TIME)-1)<<63;
const CC_TIME CC_NO_TIME = ((CC_TIME)-1);
cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
///cpp_quote("inline bool CC_TIME_IS_SET(CC_TIME t) { return t != CC_NO_TIME; }")
cpp_quote("inline bool CC_TIME_IS_SET(CC_TIME t) { return t >= 0; }")
cpp_quote("#define CC_TIME_DEFINED")
cpp_quote("};")
cpp_quote("#endif")

typedef [v1_enum] enum CC_PRIORITY_VALUES
{
    CC_THREAD_PRIORITY_IDLE          = -15,
    CC_THREAD_PRIORITY_LOWEST        = -2,
    CC_THREAD_PRIORITY_BELOW_NORMAL  = -1,
    CC_THREAD_PRIORITY_NORMAL        =  0,
    CC_THREAD_PRIORITY_ABOVE_NORMAL  =  1,
    CC_THREAD_PRIORITY_HIGHEST       =  2,
    CC_THREAD_PRIORITY_TIME_CRITICAL =  15
} CC_PRIORITY_VALUES;

//typedef	CC_INT		 CC_PRIORITY;
typedef	CC_PRIORITY_VALUES	CC_PRIORITY;


typedef	CC_DOUBLE	 CC_QUALITY_MEASURE;

cpp_quote("#define CC_SIZE_DEFINED")

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
//cpp_quote("inline const CC_RATIONAL MK_RATIONAL(CC_INT32  n, CC_UINT32 d) { CC_RATIONAL r={n,d}; return r; }")
cpp_quote("inline const CC_SIZE     MK_SIZE    (CC_INT16 cx, CC_INT16 cy) { CC_SIZE s={cx,cy}; return s; }")
cpp_quote("};")
cpp_quote("#endif")

// The Cinecoder library version information.
typedef struct CC_VERSION_INFO
{
    CC_BYTE		VersionHi;             /// Major version number.
    CC_BYTE		VersionLo;             /// Minor version number.
    CC_WORD		EditionNo;             /// Edition number.
    CC_INT32	RevisionNo;            /// Revision number.
}
CC_VERSION_INFO;

// <copy CC_PERIOD>
typedef [v1_enum] enum CC_PERIOD_FLAGS
//typedef struct CC_PERIOD_FLAGS
{
	FRQ_ONCE              = 0x00000000,
	FRQ_FOREVER           = 0x00000001,

	FRQ_TIMEVAL_MS        = 0x80000000,
	FRQ_VALUE_MASK        = 0x00FFFFFF,

	FRQ_EVERY_RAP         = 0x01000000,  // Every Random Access Point.
	FRQ_EVERY_I_FRAME     = 0x02000000,
	FRQ_EVERY_P_FRAME     = 0x03000000,
	FRQ_EVERY_B_FRAME     = 0x04000000,

	FRQ_SYNC_TO_MASTER    = 0x40000000,

	FRQ_FRAME_TYPE_MASK   = 0x0F000000,
	FRQ_FRAME_TYPE_SHFT   = 24
} CC_PERIOD_FLAGS;

cpp_quote("#define CC_GET_PERIOD_VALUE(p) ((p)&FRQ_VALUE_MASK)")

// Bitrate modes.
typedef [v1_enum] enum CC_BITRATE_MODE
{
  CC_BITRATE_MODE_UNKNOWN = 0,     /// Unknown rate mode.
  CC_CBR,                          /// Constant bitrate.
  CC_VBR,                          /// Variable bitrate.
  CC_CQ                   = 77     /// Constant quantizer (for debugging purposes)
}
CC_BITRATE_MODE;

// The flags to control the ICC_StreamRecover object.
typedef [v1_enum] enum CC_RECOVER_FLAGS
{
  CC_RECOVER_NONE   = 0,           /// None to be recovered.
  CC_RECOVER_BREAKS = 1,           /// Recover breaks in input stream, PTS is used to found the breaks.
  CC_RECOVER_PTS    = 2,           /// Recover the PTS, using the elementary video continuity.

  CC_RECOVER_GOP_TC = 0x10,        /// Recover the MPEG Video GOP timecodes, using the PTS.
}
CC_RECOVER_FLAGS;

// Represents the timecode of the video frame.
typedef struct CC_TIMECODE
{
    CC_BYTE  h;                    /// Hours   (0..23).
    CC_BYTE  m;                    /// Minutes (0..59).
    CC_BYTE  s;                    /// Seconds (0..59).
    CC_BYTE  f;                    /// Frames  (0..ceil(frame_rate)-1).
    CC_BOOL  drop_frame;           /// NTSC drop_frame_flag.
} CC_TIMECODE;

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("inline const CC_TIMECODE MK_TIMECODE(CC_BYTE h, CC_BYTE m, CC_BYTE s, CC_BYTE f, bool drop = false) { CC_TIMECODE tc={h,m,s,f,drop?CC_TRUE:CC_FALSE}; return tc; }")
cpp_quote("};")
cpp_quote("#endif")

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("inline HRESULT HRESULT_FROM_ERRNO(int e) { return HRESULT(e ? (0xE0000000U | e) : S_OK); }")
cpp_quote("};")
cpp_quote("#endif")

#pragma pack(pop)
