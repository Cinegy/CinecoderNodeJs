/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.28.23.12518
*/

typedef [v1_enum] enum CC_DANIEL2_CODING_METHOD
{
    CC_D2_METHOD_DEFAULT  =-1,
	CC_D2_METHOD_CUDA     = 0,
	CC_D2_METHOD_VLC      = 1,
	CC_D2_METHOD_CUDA_RLE = 2,
//DOM-IGNORE-BEGIN
	CC_D2_METHOD_TOTAL
//DOM-IGNORE-END
} 
CC_DANIEL2_CODING_METHOD;

[object, uuid(fd99aee9-6b26-43ec-bbd1-ff658ef6d864), pointer_default(unique), local]
interface ICC_DanielVideoStreamInfo : ICC_VideoStreamInfo
{
  // The chroma resolution format
  [propget] HRESULT  ChromaFormat             ([out,retval] CC_CHROMA_FORMAT*v); 
  // The video format.
  [propget] HRESULT  VideoFormat              ([out,retval] CC_VIDEO_FORMAT*v);
  // The color transformarion description.
  [propget] HRESULT  ColorCoefs               ([out,retval] CC_COLOUR_DESCRIPTION *v);
  // The sample bit depth (8-12)
  [propget] HRESULT  BitDepth                 ([out,retval] DWORD*v); 
  // 
  [propget] HRESULT  QuantScale               ([out,retval] CC_FLOAT *v); 
  // 
  [propget] HRESULT  ChromaQuantScaleAdd      ([out,retval] CC_INT *v); 
  // 
  [propget] HRESULT  AlphaQuantScaleAdd       ([out,retval] CC_INT *v); 
  // The coding method
  [propget] HRESULT  CodingMethod             ([out,retval] CC_DANIEL2_CODING_METHOD *v);
  // The orientation of frame
  [propget] HRESULT  PictureOrientation		  ([out,retval] CC_PICTURE_ORIENTATION *v); 
};

[object, uuid(5e60a260-ffc6-4325-b6b1-f743aa1046b5), pointer_default(unique), local]
interface ICC_DanielVideoFrameInfo : ICC_VideoFrameInfo
{
  // 
  [propget] HRESULT  QuantScale               ([out,retval] CC_FLOAT *v); 
  // The coding method
  [propget] HRESULT  CodingMethod             ([out,retval] CC_DANIEL2_CODING_METHOD*v);
  // The orientation of frame
  [propget] HRESULT  PictureOrientation		  ([out,retval] CC_PICTURE_ORIENTATION*v); 
  // The number of MPEG_USER_DATA, associated with the video frame.
  [propget] HRESULT  UserDataCount      ([out,retval] DWORD             *x);
  // Retrieves the specified user data which belongs to the video frame.
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  

};

[object, uuid(25f3f204-1537-4c7b-97bd-a5eb76788509), pointer_default(unique), local]
interface ICC_DanielVideoSplitter : ICC_VideoSplitter
{
};

[object, uuid(2070fe32-e7b4-4063-ac68-86b134f1e8bd), pointer_default(unique), local]
interface ICC_DanielVideoDecoder : ICC_VideoDecoder
{
};

[object, uuid(5f03f830-497f-471a-bcc1-d5cfb417f544), pointer_default(unique), local]
interface ICC_DanielVideoEncoderSettings : ICC_Settings
{                        
  // The physical frame size, in pixels.                               
  [propget] HRESULT  FrameSize                ([out,retval] CC_SIZE*v); 
  [propput] HRESULT  FrameSize                ([in]         CC_SIZE v); 
  // The frame rate of video stream.                                          
  [propget] HRESULT  FrameRate                ([out,retval] CC_FRAME_RATE*v); 
  [propput] HRESULT  FrameRate                ([in]         CC_FRAME_RATE v); 
  // The aspect ratio of a frame W:H.
  [propget] HRESULT  AspectRatio              ([out,retval] CC_RATIONAL*v);
  [propput] HRESULT  AspectRatio              ([in]         CC_RATIONAL v);
  // The chroma resolution format
  [propget] HRESULT  ChromaFormat             ([out,retval] CC_CHROMA_FORMAT*v); 
  [propput] HRESULT  ChromaFormat             ([in]         CC_CHROMA_FORMAT v);
  // The field order video.
  [propget] HRESULT  InterlaceType            ([out,retval] CC_INTERLACE_TYPE*v); 
  [propput] HRESULT  InterlaceType            ([in]         CC_INTERLACE_TYPE v); 
  // The orientation of frames in the stream.
  [propget] HRESULT  PictureOrientation		  ([out,retval] CC_PICTURE_ORIENTATION*v); 
  [propput] HRESULT  PictureOrientation		  ([in]         CC_PICTURE_ORIENTATION v); 
  // The video format.
  [propget] HRESULT  VideoFormat              ([out,retval] CC_VIDEO_FORMAT*v);
  [propput] HRESULT  VideoFormat              ([in]         CC_VIDEO_FORMAT v);
  // The color transformarion description.
  [propget] HRESULT  ColorCoefs               ([out,retval] CC_COLOUR_DESCRIPTION *v);
  [propput] HRESULT  ColorCoefs               ([in]         CC_COLOUR_DESCRIPTION  v);
  // The sample bit depth (8-12)
  [propget] HRESULT  BitDepth                 ([out,retval] CC_UINT*v); 
  [propput] HRESULT  BitDepth                 ([in]         CC_UINT v);
  // 
  [propget] HRESULT  QuantScale               ([out,retval] CC_FLOAT*v); 
  [propput] HRESULT  QuantScale               ([in]         CC_FLOAT v);
  // +%% (0-255)
  [propget] HRESULT  ChromaQuantScaleAdd      ([out,retval] CC_INT*v); 
  [propput] HRESULT  ChromaQuantScaleAdd      ([in]         CC_INT v);
  // +%% (0-255)
  [propget] HRESULT  AlphaQuantScaleAdd       ([out,retval] CC_INT*v); 
  [propput] HRESULT  AlphaQuantScaleAdd       ([in]         CC_INT v);
  // The Max bitrate in CBR mode or max bitrate in VBR mode.
  [propget] HRESULT  BitRate                  ([out,retval] CC_BITRATE*v); 
  [propput] HRESULT  BitRate                  ([in]         CC_BITRATE v); 
  // The mode of bitrate control - see CC_BITRATE_MODE
  [propget] HRESULT  RateMode                 ([out,retval] CC_BITRATE_MODE*v); 
  [propput] HRESULT  RateMode                 ([in]         CC_BITRATE_MODE v); 
  // The coding method
  [propget] HRESULT  CodingMethod             ([out,retval] CC_DANIEL2_CODING_METHOD*v);
  [propput] HRESULT  CodingMethod             ([in]         CC_DANIEL2_CODING_METHOD v);
  // The GOP settings. See CC_GOP_DESCR for details.
  [propget] HRESULT  GOP                      ([out,retval] CC_GOP_DESCR*v);
  [propput] HRESULT  GOP                      ([in]         CC_GOP_DESCR v);
  // Specifies the initial timecode for the first frame of the first GOP.
  [propget] HRESULT  InitialTimeCode          ([out,retval] CC_TIMECODE*x);
  [propput] HRESULT  InitialTimeCode          ([in]         CC_TIMECODE x);
  // Number of single encoders to be used.
  [propget] HRESULT  NumSingleEncoders        ([out,retval] CC_UINT      *x);
  [propput] HRESULT  NumSingleEncoders        ([in]         CC_UINT       x);
  // 
  [propget] HRESULT  InputColorFormat		  ([out,retval] CC_COLOR_FMT*x);
  [propput] HRESULT  InputColorFormat         ([in]         CC_COLOR_FMT x);

  // The number of MPEG_USER_DATA, associated with the stream.
  [propget] HRESULT  UserDataCount            ([out,retval] CC_UINT*x);
  // Adds another user data to the Sequence Layer of the MPEG video stream.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddUserData(
    [in,size_is(cbSize)] const BYTE *pbUserData,// The user data.
    [in] DWORD cbSize                           // The user data size.
  );  
  // Retrieves the specified user data which associated with the stream (seq_hdr level).
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  
};

[object, uuid(64310105-efcc-4027-9c46-acba0014c703), pointer_default(unique), local]
interface ICC_DanielVideoEncoderSettings_CUDA : ICC_DanielVideoEncoderSettings
{                        
  // The nVidia device ID (actually, sequemtial number of a board)
  [propget] HRESULT  DeviceID                 ([out,retval] CC_INT*); 
  [propput] HRESULT  DeviceID                 ([in]         CC_INT ); 
};

[object, uuid(ecab2803-01f0-4233-a346-3ab90e197129), pointer_default(unique), local]
interface ICC_DanielVideoEncoder : ICC_VideoEncoder
{
  // Adds user data for the subsequent video frame.
  // Note: You may call AddUserData several times to add more than one user data.
  // Returns: Returns S_OK if successful or an error code otherwise.
  HRESULT   AddUserData(
    [in, size_is(cbSize)] const BYTE *pbUserData,    // The user data.
    [in] DWORD cbSize,                               // The size of the user data, in bytes.
    [in,defaultvalue(CC_FALSE)] CC_BOOL bSecondField // Tells that incoming user data must appear at the second picture_start_code (in case of interlaced coding).
  );  

  // Specifies the initial timecode for the first frame of the first GOP.
  // Should be used before first call to AddFrame.
  [propput] HRESULT  InitialTimeCode          ([in]         CC_TIMECODE x);
};

[object, uuid(f14dab53-5dc0-4edd-88e6-63d058f278b8), pointer_default(unique), local]
interface ICC_D2D_GetUpdateVideoBufferPtrProp : IUnknown
{
  HRESULT   GetUpdateVideoBufferPtr([in,out] void **p);
};


[object, uuid(60966b59-a6fb-4742-a562-223f7e4c45e3), pointer_default(unique), local]
interface ICC_DanielVideoDecoder_CUDA: ICC_DanielVideoDecoder
{
};

[object, uuid(9a156bd1-f05f-4d3c-9b55-c49f65200342), pointer_default(unique), local]
interface ICC_DanielVideoEncoder_CUDA : ICC_DanielVideoEncoder
{
};

