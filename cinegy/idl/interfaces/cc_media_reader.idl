/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.28.23.12518
*/

typedef [v1_enum] enum CC_READER_OPEN_FLAGS
{
    CC_OF_NONE                 = 0, /// Nothing
}
CC_READER_OPEN_FLAGS;

//-----------------------------------------------------------------------------
[object, uuid(91aa62eb-eb08-48ee-9bd0-5e6c686e7773), pointer_default(unique), local]
/// 
interface ICC_MediaReader : IUnknown
//-----------------------------------------------------------------------------
{
  // Opens the file
  HRESULT				Open([in] CC_STRING fileName, [in,defaultvalue(0)] DWORD dwOpenFlags);
  // Closes the file
  HRESULT				Close ();
  // Test the file open state
  [propget]	HRESULT		IsOpened ([out, retval] CC_BOOL *pOpened);
  // Updates the duration and the file information
  HRESULT				Update();

  // The time base for all CC_TIME data (pts/dts/duration) associated with this object
  [propget] HRESULT		TimeBase([out,retval]CC_TIMEBASE*p);
  [propput] HRESULT		TimeBase([in]        CC_TIMEBASE p);

  // Retrieve the file information - number of programs, tracks in each program, their PIDs, etc..
  [propget] HRESULT		FileInfo([out,retval]ICC_MultiplexedStreamInfo **pFileInfo);

  // The number of programs in the file
  [propget] HRESULT		NumberOfPrograms ([out, retval] CC_INT *pCount);
  // Program number to operate (zero-based)
  [propget]	HRESULT		CurrentProgramNumber([out, retval] CC_INT *pNum);
  [propput]	HRESULT		CurrentProgramNumber([in]          CC_INT   Num);

  // The number of video tracks in the current program
  [propget] HRESULT     NumberOfVideoTracks([out,retval] CC_INT *pNum);
  // Video track number to operate (zero-based)
  [propget]	HRESULT		CurrentVideoTrackNumber([out, retval] CC_INT *pNum);
  [propput]	HRESULT		CurrentVideoTrackNumber([in]          CC_INT   Num);
  // Get the description of video track which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  [propget]	HRESULT		CurrentVideoTrackInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  // The number of supported audio tracks in the current program
  [propget] HRESULT     NumberOfAudioTracks([out,retval] CC_INT *pNum);
  // Audio track number to operate (zero-based)
  [propget]	HRESULT		CurrentAudioTrackNumber([out, retval] CC_INT *pNum);
  [propput]	HRESULT		CurrentAudioTrackNumber([in]          CC_INT   Num);
  // Get the description of video track which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  [propget]	HRESULT		CurrentAudioTrackInfo([out,retval] ICC_AudioStreamInfo **pDescr);

  // The number of video frames in the selected program/video track
  [propget] HRESULT		NumberOfFrames ([out, retval] CC_INT *pFrameCount);

  // The duration of current program, based on selected video track
  [propget] HRESULT		Duration ([out, retval] CC_TIME *pDuration);

  // The frame rate of current video track.
  [propget] HRESULT		FrameRate ([out, retval] CC_SAMPLE_RATE *pFrameRate);

  // The current frame number
  [propget] HRESULT		CurrentFrameNumber ([out, retval] CC_INT *pFrameNo);
  [propput] HRESULT		CurrentFrameNumber ([in]          CC_INT   FrameNo);

  // Retrieve the current video frame.
  // Remark: To obtain the size of the buffer to hold the frame, put NULL instead of pbData.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetCurrentVideoFrame(
    [in] CC_VIDEO_FRAME_DESCR *pDescr,                // The frame description structure
    [out,size_is(cbSize)] BYTE *pbData,               // Buffer for storing the video data
    [in] DWORD cbSize,                                // The size of the buffer in bytes.
    [out,retval,defaultvalue(NULL)] DWORD *pcbRetSize // The resulting frame size in bytes.
  );

  // Retrieves the audio samples associated with current video frame
  // Remark: To obtain the size of the buffer to hold the resulted samples, put NULL instead of pbData.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetCurrentAudioFrame(
    [in] CC_AUDIO_FMT fmt,                            // The format of incoming waveform.
    [out, size_is(cbSize)] BYTE *pbData,              // Buffer for incoming audio.
    [in] DWORD cbSize,                                // Buffer size, in bytes.
    [out,retval,defaultvalue(NULL)] DWORD *pcbRetSize // The resulting frame size in bytes.
  );

  // Get the description of current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  [propget]	HRESULT		CurrentVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);

  // Get the description of current audio frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  [propget]	HRESULT		CurrentAudioFrameInfo([out,retval] ICC_AudioFrameInfo **pDescr);

  // Checks whether the color format/scale/crop (if specified) are supported
  HRESULT  IsVideoFormatSupported(
    [in] CC_VIDEO_FRAME_DESCR *descr,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Checks whether the specified audio format is supported
  HRESULT  IsAudioFormatSupported(
    [in] CC_AUDIO_FMT fmt,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Retrieves the audio samples
  // Remark: To obtain the size of the buffer to hold the resulted samples, put NULL instead of pbData.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetAudioSamples(
    [in] CC_AUDIO_FMT fmt,                  // The format of incoming waveform.
    [in] CC_INT64 startSample,              // The start sample
    [in] CC_INT numSamples,                 // The number of samples to be read
    [out, size_is(cbSize)] BYTE *pbData,    // Buffer for incoming audio.
    [in] DWORD cbSize,                      // Buffer size, in bytes.
    [out,retval] DWORD *pcbRetSize          // The resulting frame size in bytes.
  );
};

//-----------------------------------------------------------------------------
[object, uuid(dbd2ea98-407b-4a3a-a85a-3d7e42964270), pointer_default(unique), local]
/// 
interface ICC_MediaReader2 : ICC_MediaReader
//-----------------------------------------------------------------------------
{
  // Uses the externally opened stream for initializing
  HRESULT				Open([in] ICC_InputStream *pFile, [in,defaultvalue(0)] DWORD dwOpenFlags);
};
