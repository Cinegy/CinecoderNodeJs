/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.27.34.10631
*/

// MPEG-2 Profiles and Levels.
// Description
// Provide a means of defining subsets of the syntax and semantics of MPEG-2 video streams and
// decoder capabilities required to decode a particular bitstream.
// <p>A profile is a defined subset of the entire bitstream syntax.
// <p>A level is a defined set of constraints imposed on parameters in the bitstream.
typedef [v1_enum] enum CC_MPG_PROFILE_LEVEL
{
    CC_MPG_PROFILE_LEVEL_UNKNOWN = 0, // Unknown profile&level.

    CC_MPEG1_CONSTRAINED = 0x01,
    CC_MPEG1_ESCAPE      = 0X81,

    CC_MPEG2_SP_ML       = 0x58,        // Simple Profile @ Main Level
    
    CC_MPEG2_MP_LL       = 0x4A,        // Main Profile @ Low level
    CC_MPEG2_MP_ML       = 0x48,        // Main Profile @ Main level
    CC_MPEG2_MP_H14      = 0x46,        // Main Profile @ High1440 level
    CC_MPEG2_MP_HL       = 0x44,        // Main Profile @ High level
                                   
    CC_MPEG2_422_ML      = 0x85,        // 4:2:2 Profile @ Main level
    CC_MPEG2_422_HL      = 0x82,        // 4:2:2 Profile @ High level

    CC_MPEG2_SNR_LL      = 0x3A,        // SNR Scalable Profile @ Low level
    CC_MPEG2_SNR_ML      = 0x38,        // SNR Scalable Profile @ Main level

    CC_MPEG2_SPAT_H14    = 0x26,        // Spatial Scalable Profile @ High1440 level

    CC_MPEG2_HP_ML       = 0x18,        // High Profile @ Main level
    CC_MPEG2_HP_H14      = 0x16,        // High Profile @ High1440 level
    CC_MPEG2_HP_HL       = 0x14,        // High Profile @ High level

    CC_MPEG2_MVP_LL      = 0x8E,        // Multi View Profile @ Low level
    CC_MPEG2_MVP_ML      = 0x8D,        // Multi View Profile @ Main level
    CC_MPEG2_MVP_H14     = 0x8B,        // Multi View Profile @ High1440 level
    CC_MPEG2_MVP_HL      = 0x8A,        // Multi View Profile @ High level
                                   
    CC_MPEG2_ESCAPE      = 0x80,        // Avoid any limitations (free coding).

    CC_MPG_SP_ML         = CC_MPEG2_SP_ML, 
    CC_MPG_MP_LL         = CC_MPEG2_MP_LL, 
    CC_MPG_MP_ML         = CC_MPEG2_MP_ML, 
    CC_MPG_MP_H14        = CC_MPEG2_MP_H14,
    CC_MPG_MP_HL         = CC_MPEG2_MP_HL, 
                                          
    CC_MPG_HP_ML         = CC_MPEG2_HP_ML, 
    CC_MPG_HP_H14        = CC_MPEG2_HP_H14,
    CC_MPG_HP_HL         = CC_MPEG2_HP_HL, 
                                          
    CC_MPG_ESCAPE        = CC_MPEG2_ESCAPE,
                                          
    CC_MPG_422_ML        = CC_MPEG2_422_ML,
    CC_MPG_422_HL        = CC_MPEG2_422_HL,

} CC_MPG_PROFILE_LEVEL;

// Frame aspect ratios.
typedef [v1_enum] enum CC_MPG_ASPECT_RATIO_CODE
{
    CC_ASPECT_RATIO_UNKNOWN                   = 0,       // Forbidden value.

    CC_ASPECT_RATIO_VGA                       = 1,       //  1:1    - square sample.

    CC_ASPECT_RATIO_1_1                       = 1,       //  1:1    - square sample.
    CC_ASPECT_RATIO_4_3                       = 2,       //  4:3    - commonly used for both mpeg1&2.
    CC_ASPECT_RATIO_16_9                      = 3,       // 16:9    - commonly used for both mpeg1&2.
}
CC_MPG_ASPECT_RATIO_CODE;

/// The block's scan patterns.
typedef [v1_enum] enum CC_MPG_MB_SCAN_PATTERN 
{
	CC_MPG_MB_SCAN_AUTO =0,           /// Automatic selection of the block scan pattern.
	CC_MPG_MB_SCAN_ZIGZAG,            /// ZigZag scan pattern.
	CC_MPG_MB_SCAN_ALTERNATE          /// Alternate scan pattern.
} CC_MPG_MB_SCAN_PATTERN;

typedef [v1_enum] enum CC_MPG_QUANT_SCALE_TYPE
{
	CC_MPG_QSCALE_AUTO =0,            /// Automatic selection of the quantization scale.
	CC_MPG_QSCALE_LINEAR,             /// Linear quant scales (1..31).
	CC_MPG_QSCALE_NON_LINEAR          /// Non-linear quant scales (0.5..56).
} CC_MPG_QUANT_SCALE_TYPE;

/// The intra_vlc_format value. Refer ISO/IEC 13818-2 7.2.2.1 for details.
typedef [v1_enum] enum CC_MPG_INTRA_VLC_TABLE
{
	CC_MPG_INTRA_VLC_TABLE_AUTO =0,   /// Automatic selection of the intra_vlc_table.
	CC_MPG_INTRA_VLC_TABLE_B14,       /// Use VLC table B.14 for intra coeffs.
	CC_MPG_INTRA_VLC_TABLE_B15        /// Use VLC table B.15 for intra coeffs.
} CC_MPG_INTRA_VLC_TABLE;

typedef [v1_enum] enum CC_MPG_FRAME_FLAGS
{
    CC_MPG_FRAME_FLG_PROGRESSIVE_FRAME  = 0x00000001,
    CC_MPG_FRAME_FLG_TOP_FIELD_FIRST    = 0x00000002,
    CC_MPG_FRAME_FLG_REPEAT_FIRST_FIELD = 0x00000004,
    CC_MPG_FRAME_FLG_ALTERNATE_SCAN     = 0x00000008,
    CC_MPG_FRAME_FLG_Q_SCALE_TYPE       = 0x00000010,
    CC_MPG_FRAME_FLG_FRAME_PRED_DCT     = 0x00000020,
    CC_MPG_FRAME_FLG_INTRA_VLC_FORMAT   = 0x00000040,
    CC_MPG_FRAME_FLG_CONCEALMENT_VEC    = 0x00000080,
    CC_MPG_FRAME_FLG_FULL_PEL_FORW_VEC  = 0x00000100,
    CC_MPG_FRAME_FLG_FULL_PEL_BACK_VEC  = 0x00000200,
    CC_MPG_FRAME_FLG_CHROMA_420_TYPE    = 0x00000400,
    CC_MPG_FRAME_FLG_COMPOSITE_DISPLAY  = 0x00000800,
    
    CC_GOP_CLOSED                   = 0x00010000,
    CC_GOP_BROKEN_LINK              = 0x00020000,
    CC_GOP_DROP_FRAME               = 0x00040000,
    
    CC_MPG_HDR_SEQUENCE                 = 0x01000000,
    CC_MPG_HDR_GOP                      = 0x02000000,
    CC_MPG_HDR_SEQUENCE_EXT             = 0x04000000,
    CC_MPG_HDR_SEQUENCE_DISP_EXT        = 0x08000000,
    CC_MPG_HDR_QUANT_MATRIX             = 0x10000000,
    CC_MPG_HDR_PICTURE_DISP_EXT         = 0x20000000,
    CC_MPG_HDR_PICTURE_CODING_EXT       = 0x40000000
} CC_MPG_FRAME_FLAGS;

typedef [v1_enum] enum CC_MPG_MOTION_PARAMS
{
	CC_MPG_ME_SWX_16      = 0x00000001,     /// -8..7 pels
	CC_MPG_ME_SWX_32      = 0x00000000,     /// -16..15
	CC_MPG_ME_SWX_48      = 0x00000002,     /// -24..23
	CC_MPG_ME_SWX_64      = 0x00000003,     /// -32..31
	CC_MPG_ME_SWX_96      = 0x00000004,     /// -48..47
	CC_MPG_ME_SWX_128     = 0x00000005,     /// -64..63
	CC_MPG_ME_SWX_192     = 0x00000006,     /// -96..95
	CC_MPG_ME_SWX_256     = 0x00000007,     /// -128..127
	CC_MPG_ME_SWX_MASK    = 0x0000000F,
	                     
	CC_MPG_ME_SWY_16      = 0x00000010,     /// -8..7 pels 
	CC_MPG_ME_SWY_32      = 0x00000000,     /// -16..15     
	CC_MPG_ME_SWY_48      = 0x00000020,     /// -24..23     
	CC_MPG_ME_SWY_64      = 0x00000030,     /// -32..31     
	CC_MPG_ME_SWY_96      = 0x00000040,     /// -48..47     
	CC_MPG_ME_SWY_128     = 0x00000050,     /// -64..63     
	CC_MPG_ME_SWY_192     = 0x00000060,     /// -96..95     
	CC_MPG_ME_SWY_256     = 0x00000070,     /// -128..127   
	CC_MPG_ME_SWY_MASK    = 0x000000F0,

	CC_MPG_ME_WND_16      = CC_MPG_ME_SWX_16  | CC_MPG_ME_SWY_16,
	CC_MPG_ME_WND_32      = CC_MPG_ME_SWX_32  | CC_MPG_ME_SWY_32,
	CC_MPG_ME_WND_64      = CC_MPG_ME_SWX_64  | CC_MPG_ME_SWY_64,
	CC_MPG_ME_WND_96      = CC_MPG_ME_SWX_96  | CC_MPG_ME_SWY_96,
	CC_MPG_ME_WND_128     = CC_MPG_ME_SWX_128 | CC_MPG_ME_SWY_128,

	CC_MPG_ME_CELL1       = 0x00000100,     /// 1:1 search cell
	CC_MPG_ME_CELL2       = 0x00000000,     /// 2:2 search cell
	CC_MPG_ME_CELL4       = 0x00000200,     /// 4:4 search cell
	CC_MPG_ME_CELL8       = 0x00000300,     /// 8:8 search cell
	CC_MPG_ME_FUNC_MASK   = 0x00000F00,

	CC_MPG_ME_SPC_1       = 0x00001000,     /// Start from original frame.
	CC_MPG_ME_SPC_2       = 0x00000000,     /// Start from 2xdownsampled frame.
	CC_MPG_ME_SPC_4       = 0x00002000,     /// Start from 4xdownsampled frame.
	CC_MPG_ME_SPC_MASK    = 0x00003000,
	                                   
	CC_MPG_ME_INCR_0      = 0x00004000,     /// only central pixel
	CC_MPG_ME_INCR_1      = 0x00000000,     /// + nearest neighbours
	CC_MPG_ME_INCR_2      = 0x00008000,     /// + 2x neighbours
	CC_MPG_ME_INCR_MASK   = 0x0000C000,

	CC_MPG_ME_HALFPEL     = 0x00000000,		/// Using half-pel search (by default).
	CC_MPG_ME_NO_HALFPEL  = 0x00010000,		/// No half-pel search.
	                             
	CC_MPG_ME_QUICK_SAD   = 0x00000000,		/// Quick sad (default) uses 1/4 of block pixels, -20% of quality, +80% of speed.
	CC_MPG_ME_NORMAL_SAD  = 0x00020000,     /// Use normal sad.
	                             
	CC_MPG_ME_OPPOSITE_FLD= 0x00040000,     /// Search opposite fields.
	CC_MPG_ME_ALIGN_VEC   = 0x00080000,     /// Aligned vectors is usually better then exact, but with small deviance.

    CC_MPG_ME_NO_INTERLACED_SEARCH           = 0x00100000, /// This flag disables interlaced search, even if coding mode is interlaced
    CC_MPG_ME_NO_ADAPTIVE_SEARCH_WINDOW      = 0x00200000, /// This flag disables adaptive search window
	CC_MPG_ME_NO_PREDICTIVE_SEARCH           = 0x00400000, /// This flag disables predictive search (usu no prediction from neighboring blocks)
	CC_MPG_ME_NO_RECALC_MISPREDICTED_VECTORS = 0x00800000, /// This flag disables recalculation of mispredicted vectors

	CC_MPG_ME_FASTEST     = CC_MPG_ME_WND_16  | CC_MPG_ME_CELL4 | CC_MPG_ME_SPC_4 | CC_MPG_ME_INCR_0 | CC_MPG_ME_NO_HALFPEL,
	CC_MPG_ME_NORMAL      = CC_MPG_ME_WND_64  | CC_MPG_ME_CELL2 | CC_MPG_ME_SPC_2 | CC_MPG_ME_INCR_1 | CC_MPG_ME_HALFPEL | CC_MPG_ME_ALIGN_VEC,
	CC_MPG_ME_BEST        = CC_MPG_ME_WND_128 | CC_MPG_ME_CELL1 | CC_MPG_ME_SPC_1 | CC_MPG_ME_INCR_2 | CC_MPG_ME_HALFPEL | CC_MPG_ME_ALIGN_VEC | CC_MPG_ME_NORMAL_SAD | CC_MPG_ME_OPPOSITE_FLD,
} CC_MPG_MOTION_PARAMS;

typedef [v1_enum] enum CC_MPG_QUANT_FUNC
{
	CC_MPG_QUANTF_AUTO,
	CC_MPG_QUANTF_REF_SSE2,
	CC_MPG_QUANTF_IDEAL,
	CC_MPG_QUANTF_COMBINED,
	CC_MPG_QUANTF_IPP
} CC_MPG_QUANT_FUNC;

typedef [v1_enum] enum CC_MPG_QUANT_MATRIX
{
	CC_MPG_QMATR_INTRA        = 0,
	CC_MPG_QMATR_INTER        = 1,
	CC_MPG_QMATR_CHROMA_INTRA = 2,
	CC_MPG_QMATR_CHROMA_INTER = 3,
	CC_MPG_QMATR_COUNT
} CC_MPG_QUANT_MATRIX;

[object, uuid(00002202-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Represents the MPEG-specified video stream description.
interface ICC_MpegVideoStreamInfo : ICC_VideoStreamInfo//ICC_Settings
{
  // The layer of MPEG video (1 or 2).
  [propget] HRESULT Layer               ([out,retval] DWORD			    *x);
//##  // The physical frame size, in pixels
//##  [propget] HRESULT FrameSize           ([out,retval] CC_SIZE           *x);
//##  // The frame rate
//##  [propget] HRESULT FrameRate           ([out,retval] CC_FRAME_RATE     *x);
  // The duration of one frame, in CC_TIMEBASE units.
  [propget] HRESULT FrameDuration       ([out,retval] CC_TIME           *x);
  // The bitrate of video bitstream.
  [propget] HRESULT BitRate             ([out,retval] CC_BITRATE        *x);
  // The VBV buffer size.
  [propget] HRESULT VBV_BufferSize      ([out,retval] DWORD			    *x);
//##  // The Aspect Ratio in natural format x:y
//##  [propget] HRESULT AspectRatio         ([out,retval] CC_RATIONAL       *x);
  // The Aspect Ratio code. 
  [propget] HRESULT AspectRatioCode     ([out,retval] CC_MPG_ASPECT_RATIO_CODE   *x);
  // MPEG-1 constrained stream flag.
  [propget] HRESULT Mpeg1ConstrainedFlag([out,retval] CC_BOOL			*x);
//##  // If TRUE - all frames in the stream coded without fields (progressive).
//##  [propget] HRESULT ProgressiveSequence ([out,retval] CC_BOOL			*x);
  // Profile and level.
  [propget] HRESULT ProfileAndLevel     ([out,retval] CC_MPG_PROFILE_LEVEL*x);
  // Chroma format.
  [propget] HRESULT ChromaFormat        ([out,retval] CC_CHROMA_FORMAT  *x);
  // The video format.
  [propget] HRESULT VideoFormat         ([out,retval] CC_VIDEO_FORMAT   *x);
  // The Display Size (resulting frame size).
  [propget] HRESULT DisplaySize         ([out,retval] CC_SIZE			*x);
  // The color transformarion description.
  [propget] HRESULT ColorCoefs          ([out,retval] CC_COLOUR_DESCRIPTION*x);

  // The number of MPEG_USER_DATA, associated with the video frame.
  [propget] HRESULT  UserDataCount      ([out,retval] DWORD             *x);
  // Retrieves the specified user data which associated with the stream (seq_hdr level).
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  
};

[object, uuid(00002204-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Provides the particular MPEG video frame description.
interface ICC_MpegVideoFrameInfo : ICC_VideoFrameInfo//ICC_Settings.
{
//##  // the number of video frame in native (display) order. zero-based.
//##  [propget] HRESULT  Number             ([out,retval] DWORD             *x);
//##  // The Presentation Time Stamp.
//##  [propget] HRESULT  PTS                ([out,retval] CC_TIME           *x);
//##  // the number of video frame in the coding order. zero-based.
//##  [propget] HRESULT  CodingNumber       ([out,retval] DWORD             *x);
//##  // the timecode of video frame.
//##  [propget] HRESULT  TimeCode           ([out,retval] CC_TIMECODE       *x);
//##  // the field order of video frame.
//##  [propget] HRESULT  InterlaceType      ([out,retval] CC_INTERLACE_TYPE *x);
//##  // The frame <link CC_FRAME_TYPE, coding type>.
//##  [propget] HRESULT  FrameType          ([out,retval] CC_FRAME_TYPE     *x);
  // The frame's temporal reference.
  [propget] HRESULT  TempRef            ([out,retval] DWORD             *x);
  // The VBV delay of the frame or field.
  [propget] HRESULT  VBV_Delay          ([out,retval] DWORD             *x);
  // The intra_dc_precision (8-11 bits)
  [propget] HRESULT  IntraDcPrec        ([out,retval] DWORD             *x);
//##  // The picture structure of the MPEG video frame.
//##  [propget] HRESULT  PictStruct         ([out,retval] CC_PICTURE_STRUCTURE*x);
//##  // Flags of the MPEG video frame. See the CC_MPG_FRAME_FLAGS description.
//##  [propget] HRESULT	 Flags              ([out,retval] DWORD             *x);
  // The number of MPEG_USER_DATA, associated with the video frame.
  [propget] HRESULT  UserDataCount      ([out,retval] DWORD             *x);
  // Retrieves the specified user data which belongs to the video frame.
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  

  // Retrieves the second field's information of a frame, if it exist (i.e. frame encoded in a field mode)
  // Returns: S_OK if ok, S_FALSE if no second_field exist
  [propget] HRESULT  SecondFieldInfo    ([out,retval] ICC_MpegVideoFrameInfo **f); 
};

[object, uuid(00002700-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The default and main interface to control the instance of CinecoderMpegVideoDecoder class.
interface ICC_MpegVideoDecoder : ICC_VideoDecoder
{
  HRESULT   SetElementaryDataCallback(
    [in] IUnknown *pCallback                  /// Expected object with ICC_ByteStreamConsumer interface.
  );

  // Get the MPEG-specific description of video stream which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetMpegVideoStreamInfo([out,retval] ICC_MpegVideoStreamInfo **pDescr);

  // Get the MPEG-specific description of current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  // Remarks
  // The mpeg frame can be coded either as one frame or as two fields.
  // In the last case the second field stored in the elementary stream independently, directly
  // after the first field and has different
  // <link ICC_MpegVideoFrameInfo::get_VBV_Delay, vbv delay>,
  // <link ICC_MpegVideoFrameInfo::get_PictureStructure, picture structure> and also it
  // can has different <link ICC_MpegVideoFrameInfo::get_FrameType, coding type>.
  // Reference
  // See the ISO/IEC 13818-2 Intro. 4.1.2 Coding interlaced video.
  HRESULT   GetMpegVideoFrameInfo(DWORD field_no, [out,retval] ICC_MpegVideoFrameInfo **pDescr);

  // Controls the decoding of specific frame types.
  // <p> CC_I_FRAME allows decoding of I-frames only (P- and B-frames skips).
  // <p> CC_P_FRAME allows decoding of I- or P-frames (B-frames skips).
  // <p> CC_B_FRAME allows decoding of all three frame types (I, P, B).
  [propget] HRESULT   PictureDecodingLevel([out,retval] CC_FRAME_TYPE*l);
  [propput] HRESULT   PictureDecodingLevel([in]         CC_FRAME_TYPE l);

  // Maximal number of threads which object can use. 0 = automatic.
  [propget] HRESULT   ThreadsCount   ([out,retval] CC_AMOUNT*x);
  [propput] HRESULT   ThreadsCount   ([in]         CC_AMOUNT x);
  // The affinity mask for object's threads. 0 = default (current process) affinity mask.
  [propget] HRESULT   ThreadsAffinity([out,retval] CC_AFFINITY*x);
  [propput] HRESULT   ThreadsAffinity([in]         CC_AFFINITY x);
  // The pripority for object's threads. 
  [propget] HRESULT   ThreadsPriority([out,retval] CC_PRIORITY*x);
  [propput] HRESULT   ThreadsPriority([in]         CC_PRIORITY x);
};

[object, uuid(00002400-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The default and main interface to control the instance of CinecoderMpegVideoEncoder class.
interface ICC_MpegVideoEncoder : ICC_VideoEncoder
{
  // Adds user data for the subsequent video frame.
  // Note: You may call AddUserData several times to add more than one user data.
  // Returns: Returns S_OK if successful or an error code otherwise.
  HRESULT   AddUserData(
    [in, size_is(cbSize)] const BYTE *pbUserData,    // The user data.
    [in] DWORD cbSize,                               // The size of the user data, in bytes.
    [in,defaultvalue(CC_FALSE)] CC_BOOL bSecondField // Tells that incoming user data must appear at the second picture_start_code (in case of interlaced coding).
  );  

  // Specifies the initial timecode for the first frame of the first GOP.
  // Should be used before first call to AddFrame.
  [propput] HRESULT  InitialTimeCode          ([in]         CC_TIMECODE x);

  /// Get the description of video stream which is being encoded.
  /// Returns: Returns S_OK, or S_FALSE if encoder is not initialized.
  ///HRESULT   GetStreamInfo([out,retval] ICC_MpegVideoStreamInfo **pDescr);

  //<copy ICC_MpegVideoDecoder::GetMpegVideoFrameInfo>
  HRESULT   GetMpegVideoFrameInfo(DWORD field_no, [out,retval] ICC_MpegVideoFrameInfo **pDescr);

  // Maximal number of threads which object can use. 0 = automatic.
  [propget] HRESULT   ThreadsCount   ([out,retval] CC_AMOUNT*x);
  [propput] HRESULT   ThreadsCount   ([in]         CC_AMOUNT x);
  // The affinity mask for object's threads. 0 = default (current process) affinity mask.
  [propget] HRESULT   ThreadsAffinity([out,retval] CC_AFFINITY*x);
  [propput] HRESULT   ThreadsAffinity([in]         CC_AFFINITY x);
  // The priority for object's threads. 
  [propget] HRESULT   ThreadsPriority([out,retval] CC_PRIORITY*x);
  [propput] HRESULT   ThreadsPriority([in]         CC_PRIORITY x);
};


[object, uuid(00002401-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The settings for CinecoderMpegVideoEncoder initialization.
interface ICC_MpegVideoEncoderSettings : ICC_Settings
{                        
  // The layer of the target MPEG coded video stream. Default is 2 (MPEG-2).
  [propget] HRESULT  Layer                    ([out,retval] CC_UINT*x); 
  [propput] HRESULT  Layer                    ([in]         CC_UINT x); 
  // The physical frame size, in pixels.                               
  [propget] HRESULT  FrameSize                ([out,retval] CC_SIZE*x); 
  [propput] HRESULT  FrameSize                ([in]         CC_SIZE x); 
  // The frame's rate of video stream.                                          
  [propget] HRESULT  FrameRate                ([out,retval] CC_FRAME_RATE*x); 
  [propput] HRESULT  FrameRate                ([in]         CC_FRAME_RATE x); 
  // The target bitrate in CBR mode or max bitrate in VBR mode.
  [propget] HRESULT  BitRate                  ([out,retval] CC_BITRATE*x); 
  [propput] HRESULT  BitRate                  ([in]         CC_BITRATE x); 
  // See CC_MPG_ASPECT_RATIO_CODE.
  [propget] HRESULT  AspectRatioCode          ([out,retval] CC_MPG_ASPECT_RATIO_CODE*x);
  [propput] HRESULT  AspectRatioCode          ([in]         CC_MPG_ASPECT_RATIO_CODE x);
  // The mode of bitrate controller - see CC_BITRATE_MODE.                    
  [propget] HRESULT  RateMode                 ([out,retval] CC_BITRATE_MODE*x); 
  [propput] HRESULT  RateMode                 ([in]         CC_BITRATE_MODE x); 
  // The minimal bitrate in VBR mode (default is 0).
  [propget] HRESULT  MinBitRate               ([out,retval] CC_BITRATE*x); 
  [propput] HRESULT  MinBitRate               ([in]         CC_BITRATE x); 
  // The average bitrate in VBR mode.
  [propget] HRESULT  AvgBitRate               ([out,retval] CC_BITRATE*x); 
  [propput] HRESULT  AvgBitRate               ([in]         CC_BITRATE x); 
  // The average quantization scale in VBR mode.
  [propget] HRESULT  QuantScale               ([out,retval] CC_FLOAT*x);
  [propput] HRESULT  QuantScale               ([in]         CC_FLOAT x);
  // The VBV buffer size. Please refer to the ISO/IEC 13818-2 Annex C. "Video Buffer Verifier".
  [propget] HRESULT  VBV_BufferSize           ([out,retval] CC_UINT*x); 
  [propput] HRESULT  VBV_BufferSize           ([in]         CC_UINT x); 
  // The GOP settings. See CC_GOP_DESCR for details.
  [propget] HRESULT  GOP                      ([out,retval] CC_GOP_DESCR*x);
  [propput] HRESULT  GOP                      ([in]         CC_GOP_DESCR x);
  // Make all of GOPs "closed" - without backward referencing at the beginning of GOP.
  [propget] HRESULT  ClosedGOPs               ([out,retval] CC_BOOL*x);
  [propput] HRESULT  ClosedGOPs               ([in]         CC_BOOL x);
  // Fix the structure of a GOP, even for the first GOP in stream.
  [propget] HRESULT  FixedGopStructure        ([out,retval] CC_BOOL*x);
  [propput] HRESULT  FixedGopStructure        ([in]         CC_BOOL x);
  // Enable/disable the built-in scene change detector (which is ON by default).
  [propget] HRESULT  DisableSceneDetector     ([out,retval] CC_BOOL*x); 
  [propput] HRESULT  DisableSceneDetector     ([in]         CC_BOOL x); 
  // Controls the latency of encoder (in frames) (0 = auto, 1 = min).
  [propget] HRESULT  EncodingLatency          ([out,retval] CC_UINT*x);
  [propput] HRESULT  EncodingLatency          ([in]         CC_UINT x);
  // Specifies the initial timecode for the first frame of the first GOP.
  [propget] HRESULT  InitialTimeCode          ([out,retval] CC_TIMECODE*x);
  [propput] HRESULT  InitialTimeCode          ([in]         CC_TIMECODE x);
  // The Frequency of Sequence Header generation, in frames. See CC_PERIOD_FLAGS for details.
  // CC_ONCE(0) = only at the beginnig, FRQ_FOREVER(1) = at each GOP.
  // You can also specify the period in milliseconds by adding the FRQ_TIMEVAL_MS flag to the value.
  [propget] HRESULT  SequenceHeaderPeriod     ([out,retval] CC_PERIOD*x);
  [propput] HRESULT  SequenceHeaderPeriod     ([in]         CC_PERIOD x);
  // The max number of macroblocks per slice.
  [propget] HRESULT  BlocksPerSlice           ([out,retval] CC_UINT*x);
  [propput] HRESULT  BlocksPerSlice           ([in]         CC_UINT x);
  // The motion estimation quality. Value in range 0..100.
  [propget] HRESULT  MEQuality                ([out,retval] CC_UINT*x);
  [propput] HRESULT  MEQuality                ([in]         CC_UINT x);
  // See CC_MPG_MOTION_PARAMS for details.
  [propget] HRESULT  MotionParams             ([out,retval] CC_UINT*x);
  [propput] HRESULT  MotionParams             ([in]         CC_UINT x);
  // The DisplaySize field of seq_disp_extension.
  [propget] HRESULT  DisplaySize              ([out,retval] CC_SIZE*x);
  [propput] HRESULT  DisplaySize              ([in]         CC_SIZE x);
  // The precision of intra DC coefficient (8-11 bits).
  [propget] HRESULT  IntraDCPrecision         ([out,retval] CC_UINT*x);
  [propput] HRESULT  IntraDCPrecision         ([in]         CC_UINT x);
  // The profile@level of the destination stream. Restricted by the license.
  [propget] HRESULT  ProfileAndLevel          ([out,retval] CC_MPG_PROFILE_LEVEL*x);
  [propput] HRESULT  ProfileAndLevel          ([in]         CC_MPG_PROFILE_LEVEL x);
  // The chroma resolution format (4:2:0, 4:2:2 or 4:4:4).
  [propget] HRESULT  ChromaFormat             ([out,retval] CC_CHROMA_FORMAT*x); 
  [propput] HRESULT  ChromaFormat             ([in]         CC_CHROMA_FORMAT x); 
  // The video format.
  [propget] HRESULT  VideoFormat              ([out,retval] CC_VIDEO_FORMAT*x); 
  [propput] HRESULT  VideoFormat              ([in]         CC_VIDEO_FORMAT x); 
  // The video field order.
  [propget] HRESULT  InterlaceType            ([out,retval] CC_INTERLACE_TYPE*x); 
  [propput] HRESULT  InterlaceType            ([in]         CC_INTERLACE_TYPE x); 
  // The picture structure.
  [propget] HRESULT  PictureStructure         ([out,retval] CC_PICTURE_STRUCTURE*x); 
  [propput] HRESULT  PictureStructure         ([in]         CC_PICTURE_STRUCTURE x); 
  // Field/frame macrobloc structure.
  [propget] HRESULT  MB_Struct                ([out,retval] CC_MB_STRUCTURE*x); 
  [propput] HRESULT  MB_Struct                ([in]         CC_MB_STRUCTURE x); 
  // The scan pattern (zig-zag or alternate).
  [propget] HRESULT  MB_ScanPattern           ([out,retval] CC_MPG_MB_SCAN_PATTERN*x); 
  [propput] HRESULT  MB_ScanPattern           ([in]         CC_MPG_MB_SCAN_PATTERN x); 
  // A VLC table for encoding intra DC coefficients.
  [propget] HRESULT  IntraVLCTable            ([out,retval] CC_MPG_INTRA_VLC_TABLE*x); 
  [propput] HRESULT  IntraVLCTable            ([in]         CC_MPG_INTRA_VLC_TABLE x); 
  // Linear or non-linear VLC coefficients scale type.
  [propget] HRESULT  QuantScaleType           ([out,retval] CC_MPG_QUANT_SCALE_TYPE*x); 
  [propput] HRESULT  QuantScaleType           ([in]         CC_MPG_QUANT_SCALE_TYPE x); 
  // Put sequence_end_code after the last coded picture.
  [propget] HRESULT  SuppressSeqEndCode       ([out,retval] CC_BOOL*x); 
  [propput] HRESULT  SuppressSeqEndCode       ([in]         CC_BOOL x); 
  // Low delay mode (under development).
  [propget] HRESULT  LowDelay                 ([out,retval] CC_BOOL*x); 
  [propput] HRESULT  LowDelay                 ([in]         CC_BOOL x); 
  // 
  [propget] HRESULT  ColorCoefs               ([out,retval] CC_COLOUR_DESCRIPTION*x); 
  [propput] HRESULT  ColorCoefs               ([in]         CC_COLOUR_DESCRIPTION x); 
  // Blur filter coefficient. Simple 3x3 matrix of ones, with specified central coef (lower value means stronger blurring). 0 = disable blur. negative values = auto blur
  [propget] HRESULT  BlurFilterCoef           ([out,retval] CC_INT *x);
  [propput] HRESULT  BlurFilterCoef           ([in]         CC_INT x);
  // 
            HRESULT  GetQuantMatrix           ([in] CC_MPG_QUANT_MATRIX t, [out,size_is(64)] BYTE *m);
            HRESULT  SetQuantMatrix           ([in] CC_MPG_QUANT_MATRIX t, [in ,size_is(64)] const BYTE *m);
  // Allows writing the quant matrix extension header at every specified picture type.
  // CC_FRAME_TYPE_UNKNOWN disables it.
  [propget] HRESULT  QuantMatrixPictureLevel  ([out,retval] CC_FRAME_TYPE      *x);
  [propput] HRESULT  QuantMatrixPictureLevel  ([in]         CC_FRAME_TYPE       x);
  // Quantization function
  [propget] HRESULT  QuantFunc                ([out,retval] CC_MPG_QUANT_FUNC*x);
  [propput] HRESULT  QuantFunc                ([in]         CC_MPG_QUANT_FUNC x);


  // The number of MPEG_USER_DATA, associated with the stream.
  [propget] HRESULT  UserDataCount            ([out,retval] CC_UINT*x);
  // Adds another user data to the Sequence Layer of the MPEG video stream.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddUserData(
    [in,size_is(cbSize)] const BYTE *pbUserData,// The user data.
    [in] DWORD cbSize                           // The user data size.
  );  
  // Retrieves the specified user data which associated with the stream (seq_hdr level).
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  
};

[object, uuid(17adf111-3450-4cf6-9371-e02eed720cd4), pointer_default(unique), local]
interface ICC_MpegVideoSplitter : ICC_VideoSplitter
{
  ///<copy ICC_MpegVideoEncoder::GetMpegVideoStreamInfo>
  HRESULT   GetMpegVideoStreamInfo([out,retval] ICC_MpegVideoStreamInfo **pDescr);

  ///<copy ICC_MpegVideoEncoder::GetMpegVideoFrameInfo>
  HRESULT   GetMpegVideoFrameInfo([out,retval] ICC_MpegVideoFrameInfo **pDescr);
};

