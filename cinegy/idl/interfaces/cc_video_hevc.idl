/* Copyright 2017 Cinegy GmbH.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The version of Cinecoder for these headers should be: 3.30.18.13164
*/

typedef [v1_enum] enum CC_HEVC_PROFILE
{
	CC_HEVC_PROFILE_UNKNOWN    =   0,

	CC_HEVC_MAIN_PROFILE	   =   1,
	CC_HEVC_MAIN_10_PROFILE    =   2,
	CC_HEVC_MAIN_STILL_PROFILE =   3,

} CC_HEVC_PROFILE;

typedef [v1_enum] enum CC_HEVC_FRAME_FLAGS
{
    CC_HEVC_FRAME_FLG_PROGRESSIVE_FRAME  = 0x00000001,
    CC_HEVC_FRAME_FLG_TOP_FIELD_FIRST    = 0x00000002,

    CC_HEVC_FRAME_IDR                    = 0x00001000,
    
    CC_HEVC_HDR_SEQ_PARAM_SET            = 0x01000000,
    CC_HEVC_HDR_PIC_PARAM_SET            = 0x02000000,

    CC_HEVC_HDR_AU_DELIMITER             = 0x08000000,

} CC_HEVC_FRAME_FLAGS;

[object, uuid(59d8bbc4-4f9e-4e91-a113-5d4d01262579), pointer_default(unique), local]
interface ICC_HEVCVideoStreamInfo : ICC_VideoStreamInfo
{
};

[object, uuid(ed49d3da-7b4d-4f43-adfe-961aac27492c), pointer_default(unique), local]
interface ICC_HEVCVideoFrameInfo : ICC_VideoFrameInfo
{
};

[object, uuid(b0584a0a-a32c-4040-a796-a624f2dca37f), pointer_default(unique), local]
interface ICC_HEVCVideoDecoder : ICC_VideoDecoder
{
};

[object, uuid(693b38d6-a8cf-4d96-9099-a12fada9b769), pointer_default(unique), local]
interface ICC_HEVCVideoSplitter : ICC_VideoSplitter
{
};

[object, uuid(78058b0d-b691-4ea1-b36e-599b804fda66), pointer_default(unique), local]
// Interface gives the control to the instance of CC_HEVCVideoEncoder class.
interface ICC_HEVCVideoEncoder : ICC_VideoEncoder
{
};

[object, uuid(e9d5616d-b262-44d5-8869-96aec9f78aa9), pointer_default(unique), local]
// The settings for initialization the instance of CinecoderHEVCVideoEncoder class.
interface ICC_HEVCVideoEncoderSettings : ICC_Settings
{                        
  // The physical frame size, in pixels.                               
  [propget] HRESULT  FrameSize                ([out,retval] CC_SIZE*); 
  [propput] HRESULT  FrameSize                ([in]         CC_SIZE ); 
  // The frame rate of video stream.                                          
  [propget] HRESULT  FrameRate                ([out,retval] CC_FRAME_RATE*); 
  [propput] HRESULT  FrameRate                ([in]         CC_FRAME_RATE ); 
  // The aspect ratio cx:cy.
  [propget] HRESULT  AspectRatio              ([out,retval] CC_RATIONAL*);
  [propput] HRESULT  AspectRatio              ([in]         CC_RATIONAL );
  // The target bitrate in CBR mode or max bitrate in VBR mode.
  [propget] HRESULT  BitRate                  ([out,retval] CC_BITRATE*); 
  [propput] HRESULT  BitRate                  ([in]         CC_BITRATE ); 
  // The mode of bitrate controller - see CC_BITRATE_MODE.                    
  [propget] HRESULT  RateMode                 ([out,retval] CC_BITRATE_MODE*); 
  [propput] HRESULT  RateMode                 ([in]         CC_BITRATE_MODE ); 
  // The minimal bitrate in VBR mode (default is 0).
  [propget] HRESULT  MinBitRate               ([out,retval] CC_BITRATE*); 
  [propput] HRESULT  MinBitRate               ([in]         CC_BITRATE ); 
  // The average bitrate in VBR mode.
  [propget] HRESULT  AvgBitRate               ([out,retval] CC_BITRATE*); 
  [propput] HRESULT  AvgBitRate               ([in]         CC_BITRATE ); 
  // The Instantaneous Decoding Refresh period.
  [propget] HRESULT  IDR_Period               ([out,retval] CC_PERIOD*);
  [propput] HRESULT  IDR_Period               ([in]         CC_PERIOD );
  // The GOP settings. See CC_GOP_DESCR for details.
  [propget] HRESULT  GOP                      ([out,retval] CC_GOP_DESCR*);
  [propput] HRESULT  GOP                      ([in]         CC_GOP_DESCR );
  // The number of reference frames.
  [propget] HRESULT  NumRefFrames             ([out,retval] DWORD*);
  [propput] HRESULT  NumRefFrames             ([in]         DWORD );
  // The max number of slices per frame.
  [propget] HRESULT  NumSlices                ([out,retval] DWORD*); 
  [propput] HRESULT  NumSlices                ([in]         DWORD ); 
  // The destination stream profile.
  [propget] HRESULT  Profile                  ([out,retval] CC_HEVC_PROFILE*); 
  [propput] HRESULT  Profile                  ([in]         CC_HEVC_PROFILE ); 
  // The level of destination stream.
  [propget] HRESULT  Level                    ([out,retval] DWORD*); 
  [propput] HRESULT  Level                    ([in]         DWORD ); 
  // The chroma resolution format (4:2:0, 4:2:2 or 4:4:4).
  [propget] HRESULT  ChromaFormat             ([out,retval] CC_CHROMA_FORMAT*); 
  [propput] HRESULT  ChromaFormat             ([in]         CC_CHROMA_FORMAT );
  // The luminocity bit depth (8-12).
  [propget] HRESULT  BitDepthLuma             ([out,retval] DWORD*); 
  [propput] HRESULT  BitDepthLuma             ([in]         DWORD );
  // The chroma samples' bit depth (8-12).
  [propget] HRESULT  BitDepthChroma           ([out,retval] DWORD*); 
  [propput] HRESULT  BitDepthChroma           ([in]         DWORD );
  // The video format.
  [propget] HRESULT  VideoFormat              ([out,retval] CC_VIDEO_FORMAT*); 
  [propput] HRESULT  VideoFormat              ([in]         CC_VIDEO_FORMAT ); 
  // The field order video.
  [propget] HRESULT  InterlaceType            ([out,retval] CC_INTERLACE_TYPE*); 
  [propput] HRESULT  InterlaceType            ([in]         CC_INTERLACE_TYPE ); 
  // The picture structure.
  [propget] HRESULT  PictureStructure         ([out,retval] CC_PICTURE_STRUCTURE*); 
  [propput] HRESULT  PictureStructure         ([in]         CC_PICTURE_STRUCTURE ); 
  // Field/frame macrobloc structure.
  [propget] HRESULT  MB_Struct                ([out,retval] CC_MB_STRUCTURE*); 
  [propput] HRESULT  MB_Struct                ([in]         CC_MB_STRUCTURE ); 
  // Sequence display extension - color coefficients.
  [propget] HRESULT  ColorCoefs               ([out,retval] CC_COLOUR_DESCRIPTION*); 
  [propput] HRESULT  ColorCoefs               ([in]         CC_COLOUR_DESCRIPTION ); 
  // The initial quantization parameter for VBR mode.
  [propget] HRESULT  QP                       ([out,retval] CC_QUANT_DESCR*); 
  [propput] HRESULT  QP                       ([in]         CC_QUANT_DESCR );
  // The offset from the luma QP value for chroma components
  [propget] HRESULT  ChromaQPOffset           ([out,retval] CC_INT *x); 
  [propput] HRESULT  ChromaQPOffset           ([in]         CC_INT  x);
  // The Coded Picture Buffer (CPB) size. You can set it up either by bytes or milliseconds (just add FRQ_TIMEVAL_MS flag to the value)
  [propget] HRESULT  CpbSize                  ([out,retval] CC_PERIOD*x); 
  [propput] HRESULT  CpbSize                  ([in]         CC_PERIOD x); 
  // The initial CPB fullness. You can specify it either in bytes or milliseconds.
  [propget] HRESULT  InitialCpbLevel          ([out,retval] CC_PERIOD*x); 
  [propput] HRESULT  InitialCpbLevel          ([in]         CC_PERIOD x); 
  // You can also specify the period in milliseconds by adding the FRQ_TIMEVAL_MS flag to the value.
  [propget] HRESULT  SequenceHeaderPeriod     ([out,retval] CC_PERIOD*x);
  [propput] HRESULT  SequenceHeaderPeriod     ([in]         CC_PERIOD x);
  // Toggle access unit delimiter (nal_unit_type = 9) on/off.
  [propget] HRESULT  PutAccessUnitDelimiter   ([out,retval] CC_BOOL*); 
  [propput] HRESULT  PutAccessUnitDelimiter   ([in]         CC_BOOL );
  // Put sequence_end_code after the last coded picture.
  [propget] HRESULT  PutSeqEndCode       	  ([out,retval] CC_BOOL*x); 
  [propput] HRESULT  PutSeqEndCode       	  ([in]         CC_BOOL x); 
};
