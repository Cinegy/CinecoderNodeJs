////////////////////////////////////////////////////////////////////////////////////////////////////
// Data types
////////////////////////////////////////////////////////////////////////////////////////////////////

//###include "../../../ColorConverter/ColorConvertor/ConvertorFlags.h"

// The color format of video frames.
typedef [v1_enum] enum CC_COLOR_FMT
{
  CCF_UNKNOWN      = 0x00000000,     /// Unknown color format.

  CCF_RGB32        = 0x00000001,     /// The color data in the BGRA format, bytes order {B,G,R,A}, 4 bytes per pixel.
  CCF_RGB24        = 0x00000002,     /// The color data in the BGR  format, bytes order {B,G,R},   3 bytes per pixel.

  CCF_BGR32        = 0x00000011,     /// The color data in the RGBA format, bytes order {R,G,B,A}, 4 bytes per pixel.
  CCF_BGR24        = 0x00000012,     /// The color data in the RGB  format, bytes order {R,G,B},   3 bytes per pixel.

  CCF_RGBA         = CCF_RGB32,
  CCF_RGB          = CCF_RGB24,
  CCF_BGRA         = CCF_BGR32,
  CCF_BGR          = CCF_BGR24,

  CCF_UYVY         = 0x00000031,     /// The packed YUV 4:2:2 color data, pixel order {u,y0,v,y1}, 4 bytes per 2 pixels
  CCF_YUY2         = 0x00000032,     /// The packed YUV 4:2:2 color data, pixel order {y0,u,y1,v}, 4 bytes per 2 pixels

  CCF_YUV400       = 0x00000040,     /// Planar YUV 4:2:0
  CCF_YUV420       = 0x00000041,     /// Planar YUV 4:2:0
  CCF_YUV422       = 0x00000042,     /// Planar YUV 4:2:2
  CCF_YUV444       = 0x00000043,     /// Planar YUV 4:4:4

  CCF_YV12         = CCF_YUV420,
  CCF_YV16         = CCF_YUV422,

  CCF_NV12         = 0x00000112,     /// 4:2:0 Planar Y, UV interleaved

  CCF_UYVY_10BIT   = 0x00000131,     /// The packed YUV 4:2:2 10-bit color data in order {u,y0,v,y1} 16-bits each (LSB).
  CCF_YUY2_10BIT   = 0x00000132,     /// The packed YUV 4:2:2 10-bit color data in order {y0,u,y1,v} 16-bits each (LSB).
  
  CCF_YUV422_10BIT = 0x00000142,     /// Planar YUV 4:2:2 (10 of 16 bit data, LSB).

  CCF_UYVY_16BIT   = 0x00000631,     /// The packed YUV 4:2:2 16-bit color data in order {u,y0,v,y1} 16-bits each (LSB).
  CCF_YUY2_16BIT   = 0x00000632,     /// The packed YUV 4:2:2 16-bit color data in order {y0,u,y1,v} 16-bits each (LSB).
  
  CCF_YUV422_16BIT = 0x00000642,     /// Planar YUV 4:2:2 16 bit data (LSB).

  CCF_V210         = 0x00000210,     /// V210 10-bit 4:2:2 color format.
  CCF_SC10         = 0x00000211,     /// Seachange 10-bit 4:2:2 color format (the 16-pixel 8-bit YUY2 chunks with a packed 2-bit trails).

  CCF_Y8           = 0x00000008      /// Monochrome (greyscale) data, 1 byte per pixel.
}
CC_COLOR_FMT;

// Coded video frame type.
typedef [v1_enum] enum CC_FRAME_TYPE
{
	CC_FRAME_TYPE_UNKNOWN =0,

	CC_I_FRAME,                    /// "INTRA" frame, no predictions, consists of intra blocks only.
	                               /// Used as reference for other types of frames.
	CC_P_FRAME,                    /// The frame "PREDICTED" from previous I- or P-frame.
	                               /// Used as reference for next P- or B-frames.
	CC_B_FRAME,                    /// "BIDIRECTIONAL" frame.
                                   /// Predicted form previous and next I- or P-frames
	                               /// in the temporal order. There is the reordering of frames in the bitstream
	                               /// to make the ability to obtain the "next" reference frame _before_ decoding
	                               /// the current B-frame. Not used for prediction.
} CC_FRAME_TYPE;

// The field order of video frame.
typedef [v1_enum] enum CC_INTERLACE_TYPE
{
    CC_UNKNOWN_INTERLACE_TYPE = -1,
    
    CC_NO_INTERLACE           =  0, /// Progressive frame (default).
    CC_PROGRESSIVE            =  0,
    
    CC_TOP_FIELD_FIRST        =  1, /// Interlaced frame with Top Field First.
    CC_TFF                    =  1,
    
    CC_BOTTOM_FIELD_FIRST     =  2, /// Interlaced frame with Bottom Field First.
    CC_BFF                    =  2,

    CC_TELECINE               = 23, /// 2:3 pulldown (valuable only for 23.976 & 24 fps).
} 
CC_INTERLACE_TYPE;

typedef [v1_enum] enum CC_DEINTERLACE_METHOD
{
	CC_DEINTERLACE_NONE = 0,
    CC_DEINTERLACE_BOB  = 1,
    CC_DEINTERLACE_CAVT = 2,
} 
CC_DEINTERLACE_METHOD;


typedef [v1_enum] enum CC_AFF_TYPE
{
	CC_AFF_FRAME =0,                  /// Frame coding.
	CC_AFF_FIELD,                     /// Field coding.
	CC_AFF_ADAPTIVE,                  /// Adaptive frame/field coding.
} 
CC_AFF_TYPE;

// The coding structure of coded video frame.
typedef [v1_enum] enum CC_PICTURE_STRUCTURE
{
	CC_PICTURE_STRUCTURE_UNKNOWN = -1,
	CC_WHOLE_FRAME =0,                /// Whole frame (default).
	CC_PAIR_OF_FIELDS,                /// Two consecutive fields, encoded independently.
	CC_PAFF,                          /// Automatic selection of the picture structure, depending on the contents (PAFF).
} 
CC_PICTURE_STRUCTURE;

// The coded macroblock structure.
typedef [v1_enum] enum CC_MB_STRUCTURE
{
	CC_MBAFF =0,                      /// Automatic selection of the macroblock structure, depending on the contents (MBAFF).
	CC_MB_PROGRESSIVE,                /// Progressive macroblock structure.
	CC_MB_INTERLACED,                 /// Interlaced macroblock structure.
} 
CC_MB_STRUCTURE;

/// Group of Pictures (GOP) description.
typedef struct CC_GOP_DESCR
{
	CC_PERIOD	N;			       /// The distance between consecutive I frames.
	CC_UINT    	M;			       /// The distance between consecutive P frames. N must be multiple of M.
} CC_GOP_DESCR;

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("inline const CC_GOP_DESCR MK_GOP_DESCR(CC_PERIOD N, CC_UINT M) { CC_GOP_DESCR gop={N,M}; return gop; }")
cpp_quote("};")
cpp_quote("#endif")

// Symbolic names for CC_GOP_DESCR::N field.
typedef [v1_enum] enum CC_GOP_PATTERN
{
    CC_GOP_I      = 0,            /// "IIIIII..."      - No P- nor B-frames used.
    CC_GOP_IP     = 1,            /// "I(P)..."        - No B-frames used. GOP_MaxLength specifies the number of P-frames between consecutive I-frames.
    CC_GOP_IBP    = 2,            /// "IbPbPbP..."     - one B-frame between consecutive I- or P-frames.
    CC_GOP_IBBP   = 3,            /// "IbbPbbPbbP..."  - two B-frames between consecutive I- or P-frames (most commonly used).
    CC_GOP_IBBBP  = 4,            /// "IbbbPbbbP..."   - three B-frames between consecutive I- or P-frames.
    CC_GOP_IBBBBP = 5             /// "IbbbbPbbbbP..." - four B-frames between consecutive I- or P-frames.
}
CC_GOP_PATTERN;

///Quantization parameter for defining mquant parameter in VBR modes.
typedef struct CC_QUANT_DESCR
{
	CC_BYTE		Qi;				   /// Start quantization parameter for I frames.
	CC_BYTE		Qp;                /// Start quantization parameter for P frames.
	CC_BYTE		Qb;				   /// Start quantization parameter for B frames.
} CC_QUANT_DESCR;

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("extern \"C++\" inline const CC_QUANT_DESCR MK_QUANT_DESCR(CC_BYTE q) { CC_QUANT_DESCR qd={q,q,q}; return qd; }")
cpp_quote("extern \"C++\" inline const CC_QUANT_DESCR MK_QUANT_DESCR(CC_BYTE qi, CC_BYTE qp, CC_BYTE qb) { CC_QUANT_DESCR qd={qi,qp,qb}; return qd; }")
cpp_quote("};")
cpp_quote("#endif")

// The chromaticity coordinates of the source primaries (see iso/iec 13818-2 6.3.6 Table 6-7 for details).
typedef [v1_enum] enum CC_COLOUR_PRIMARIES
{
    CC_CPRIMS_UNKNOWN = 0,            /// Forbidden value.
    CC_CPRIMS_ITUR_BT_709,            /// Recommendation ITU-R BT.709.
    CC_CPRIMS_UNSPECIFIED,            /// Unspecified Video - image characteristics are unknown.
    CC_CPRIMS_RESERVED,               /// Reserved.
    CC_CPRIMS_ITUR_BT_470_M,          /// Recommendation ITU-R BT.470 System M.
    CC_CPRIMS_ITUR_BT_470_BG,         /// Recommendation ITU-R BT.470 System B, G.
    CC_CPRIMS_SMPTE_170M,             /// SMPTE 170M.
    CC_CPRIMS_SMPTE_240M,             /// SMPTE 240M (1987).

    CC_CPRIMS_GENERIC_FILM,           /// Colour filters using Illuminant C.
//DOM-IGNORE-BEGIN
    CC_CPRIMS_TOTAL                   ///
//DOM-IGNORE-END
} 
CC_COLOUR_PRIMARIES;

// The opto-electronic transfer characteristic of the source picture (see iso/iec 13818-2 6.3.6 Table 6-8 for details).
typedef [v1_enum] enum CC_TRANSFER_CHARACTERISTICS
{
    CC_TXCHRS_UNKNOWN = 0,            /// Forbidden value.

    CC_TXCHRS_ITUR_BT_709,            /// Recommendation ITU-R BT.709.
    CC_TXCHRS_UNSPECIFIED,            /// Unspecified Video - image characteristics are unknown.
    CC_TXCHRS_RESERVED,              /// Reserved.
    CC_TXCHRS_ITUR_BT_470_M,          /// Recommendation ITU-R BT.470 System M (assumed display gamma 2.2).
    CC_TXCHRS_ITUR_BT_470_BG,         /// Recommendation ITU-R BT.470 System B, G (assumed display gamma 2.8).
    CC_TXCHRS_SMPTE_170M,             /// SMPTE 170M.
    CC_TXCHRS_SMPTE_240M,             /// SMPTE 240M (1987).

    CC_TXCHRS_LINEAR,                 /// Linear transfer characteristics.
    CC_TXCHRS_LOG_100,                /// Logarithmic transfer characteristic ( 100:1 range ).
    CC_TXCHRS_LOG_316,                /// Logarithmic transfer characteristic ( 316.22777:1 range ).
//DOM-IGNORE-BEGIN
    CC_TXCHRS_TOTAL                   ///
//DOM-IGNORE-END
} 
CC_TRANSFER_CHARACTERISTICS;

// The matrix coefficients used in deriving luminance and chrominance signals from the green, blue, and red primaries
// (see iso/iec 13818-2 6.3.6 Table 6-9 for details).
typedef [v1_enum] enum CC_MATRIX_COEFFICIENTS
{
    CC_MCOEFS_UNKNOWN = 0,            /// Forbidden value.

    CC_MCOEFS_ITUR_BT_709,            /// Recommendation ITU-R BT.709.
    CC_MCOEFS_UNSPECIFIED,            /// Unspecified Video - image characteristics are unknown.
    CC_MCOEFS_RESERVED,               /// Reserved for future use by ITU-T / ISO/IEC.
    CC_MCOEFS_FCC,                    /// FCC.
    CC_MCOEFS_ITUR_BT_470_BG,         /// Recommendation ITU-R BT.470 System B, G.
    CC_MCOEFS_SMPTE_170M,             /// SMPTE 170M.
    CC_MCOEFS_SMPTE_240M,             /// SMPTE 240M (1987).
//DOM-IGNORE-BEGIN
    CC_MCOEFS_TOTAL                   ///
//DOM-IGNORE-END
} 
CC_MATRIX_COEFFICIENTS;

// The aggregate representation of CC_COLOUR_PRIMARIES, CC_TRANSFER_CHARACTERISTICS ans CC_MATRIX_COEFFICIENTS.
typedef struct CC_COLOUR_DESCRIPTION
{
    CC_COLOUR_PRIMARIES         CP;   /// see CC_COLOUR_PRIMARIES description.       
    CC_TRANSFER_CHARACTERISTICS TC;   /// see CC_TRANSFER_CHARACTERISTICS description.
    CC_MATRIX_COEFFICIENTS      MC;   /// see CC_MATRIX_COEFFICIENTS description.
}
CC_COLOUR_DESCRIPTION;

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("inline const CC_COLOUR_DESCRIPTION MK_COLOR_TX_DESCR(CC_COLOUR_PRIMARIES CP, CC_TRANSFER_CHARACTERISTICS TC, CC_MATRIX_COEFFICIENTS MC) { CC_COLOUR_DESCRIPTION d={CP,TC,MC}; return d; }")
cpp_quote("};")
cpp_quote("#endif")

// The MPEG-2 video chrominance format.
// (see iso/iec 13818-2 6.3.5 Table 6-5 for details).
typedef [v1_enum] enum CC_CHROMA_FORMAT
{
	CC_CHROMA_FORMAT_UNKNOWN =-1, /// Unknown chroma format.
	CC_CHROMA_400,                /// Luma-only mode
	CC_CHROMA_420,                /// Half vertical, half horizontal color resolution.
	CC_CHROMA_422,                /// Full vertical, half horizontal color resolution.
	CC_CHROMA_444,                /// Full color resolution.

	CC_CHROMA_RGB = 10,			  /// RGB, full color resolution

//DOM-IGNORE-BEGIN
	CC_CHROMA_FORMAT_TOTAL
//DOM-IGNORE-END
} 
CC_CHROMA_FORMAT;

// The representation of the pictures before being coded in accordance with iso/iec 13818-2 (MPEG2) specs.
// (see iso/iec 13818-2 6.3.6 Table 6-6 for details).
typedef [v1_enum] enum CC_VIDEO_FORMAT
{
    CC_VIDEO_FORMAT_COMPONENT = 0,          /// Component.
    CC_VIDEO_FORMAT_PAL,                    /// PAL.
    CC_VIDEO_FORMAT_NTSC,                   /// NTSC.
    CC_VIDEO_FORMAT_SECAM,                  /// SECAM.
    CC_VIDEO_FORMAT_MAC,                    /// MAC.
    CC_VIDEO_FORMAT_UNSPECIFIED,            /// Unspecified.
//DOM-IGNORE-BEGIN
    CC_VIDEO_FORMAT_TOTAL,
//DOM-IGNORE-END
} 
CC_VIDEO_FORMAT;

// The descriptions of uncompressed video frame used in AddScaleFrame & GetScaleFrame methods.
typedef struct CC_VIDEO_FRAME_DESCR
{
    CC_COLOR_FMT	cFormat;        /// The <link CC_COLOR_FMT, color format> of the frame.
    CC_SIZE			szFrame;        /// The frame size in pixels. 0's means the source frame size
    CC_INT			iStride;        /// The stride of a single video row, measured in bytes.
                                    /// A negative stride value means that order of rows is reversed
                                    /// (the first row is on the bottom of the frame).
                                    /// If stride is set to zero, the real value is derived from the <i>szFrame</i>
                                    /// and <i>cFormat</i>.
    RECT			rcCrop;         /// The crop area. Set all to 0's if there is no crop.
}
CC_VIDEO_FRAME_DESCR;

cpp_quote("#if 0")
typedef struct CC_ADD_VIDEO_FRAME_PARAMS
{
    CC_COLOR_FMT	cFormat;        /// The <link CC_COLOR_FMT, color format> of the frame.
    CC_SIZE			szFrame;        /// The frame size in pixels.
    CC_INT			iStride;        /// The stride of a single video row, measured in bytes.
                                    /// A negative stride value means that order of rows is reversed
                                    /// (the first row is on the bottom of the frame).
                                    /// If stride is set to zero, the real value is derived from the <i>szFrame</i>
                                    /// and <i>cFormat</i>.
    RECT			rcCrop;         /// The crop area. Set all to 0's if there is no crop.
}
CC_ADD_VIDEO_FRAME_PARAMS;
cpp_quote("#else")
cpp_quote("typedef CC_VIDEO_FRAME_DESCR CC_ADD_VIDEO_FRAME_PARAMS;")
cpp_quote("#endif")

//##typedef CC_VIDEO_FRAME_DESCR CC_ADD_VIDEO_FRAME_PARAMS;

typedef struct CC_QUANT_MATRIX_4x4
{
	BYTE  data[16];
}
CC_QUANT_MATRIX_4x4;

typedef struct CC_QUANT_MATRIX_8x8
{
	BYTE  data[64];
}
CC_QUANT_MATRIX_8x8;

////////////////////////////////////////////////////////////////////////////////////////////////////
// Interfaces
////////////////////////////////////////////////////////////////////////////////////////////////////

[object, uuid(00002201-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Interface represents the common video stream description.
interface ICC_VideoStreamInfo : ICC_ElementaryStreamInfo//ICC_Settings//IUnknown
{
  // The size in pixels of video frame.
  [propget] HRESULT FrameSize           ([out,retval] CC_SIZE           *s);
  // The aspect ratio cx:cy.
  [propget] HRESULT AspectRatio         ([out,retval] CC_RATIONAL       *a);
  // If TRUE - all frames in the stream coded without fields (progressive).
  [propget] HRESULT ProgressiveSequence ([out,retval] CC_BOOL			*x);
};

[object, uuid(344748d5-e5b1-48cf-8ac0-0b18358723da), pointer_default(unique), local]
// Interface represents the common video stream description (extended).
interface ICC_VideoStreamInfoExt : IUnknown //ICC_VideoStreamInfo
{
  // Chroma format.
  [propget] HRESULT ChromaFormat        ([out,retval] CC_CHROMA_FORMAT      *v);
  // The video format.
  [propget] HRESULT VideoFormat         ([out,retval] CC_VIDEO_FORMAT       *v);
  // The color transformarion description.
  [propget] HRESULT ColorCoefs          ([out,retval] CC_COLOUR_DESCRIPTION *v);
  // The luma samples' bit depth 
  [propget] HRESULT BitDepthLuma        ([out,retval] CC_UINT               *v); 
  // The chroma samples' bit depth.                                      
  [propget] HRESULT BitDepthChroma      ([out,retval] CC_UINT               *v); 
};

[object, uuid(00002203-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Interface provides the common description of the video frame.
interface ICC_VideoFrameInfo : ICC_ElementaryDataInfo
{
  // The number of video frame in native (display) order. zero-based.
  [propget] HRESULT  Number             ([out,retval] CC_UINT           *n);
  // The number of video frame in the coding order. Zero-based.
  [propget] HRESULT  CodingNumber       ([out,retval] CC_UINT           *c);
  // The timecode of video frame.
  [propget] HRESULT  TimeCode           ([out,retval] CC_TIMECODE       *t);
  // The field order of video frame.
  [propget] HRESULT  InterlaceType      ([out,retval] CC_INTERLACE_TYPE *i);
  // The frame <link CC_FRAME_TYPE, coding type>.
  [propget] HRESULT  FrameType          ([out,retval] CC_FRAME_TYPE     *x);
  // The picture structure of the MPEG video frame.
  [propget] HRESULT  PictStruct         ([out,retval] CC_PICTURE_STRUCTURE*x);
  // Various flags of the coded video frame. Value of this field dependend of the video stream type.
  [propget] HRESULT	 Flags              ([out,retval] DWORD             *x);
};

[object, uuid(204d5e69-3539-4bc7-8364-897251f2739a), pointer_default(unique), local]
// Interface provides the access to the info of a second field of frame, if it is
interface ICC_VideoFrameSecondFieldProp : IUnknown
{
  // Retrieves the second field's information of a frame, if it exist (i.e. frame encoded in a field mode)
  // Returns: S_OK if ok, S_FALSE if no second_field exist
  [propget] HRESULT  SecondField        ([out,retval] ICC_VideoFrameInfo **f); 
};

typedef [v1_enum] enum CC_USER_DATA_TYPE
{
	CC_UDT_UNSPEC = 0,      // unspecified user data type
	CC_UDT_GUIDED,			// the user data has a GUID in the first 16 bytes
//DOM-IGNORE-BEGIN
	CC_UDT_TOTAL
//DOM-IGNORE-END
} 
CC_USER_DATA_TYPE;

[object, uuid(37ad7e37-5275-44ea-88a3-71978c712b40), pointer_default(unique), local]
// Interface provides the access to the info of a second field of frame, if it is
interface ICC_VideoFrameUserDataProp : IUnknown
{
  // The number of some user data, associated with the video frame.
  [propget] 
  HRESULT 	UserDataCount([out,retval] DWORD             *x);

  // Retrieves the specified user data which belongs to the video frame.
  // Returns: Returns S_OK if successful or E_INVALIDARG in case of incorrect <i>dwUserDataNumber</i>.
  HRESULT   GetUserData(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out, size_is(cbBufSize)] BYTE *pData,     // Place to store the user data, if NULL the only size of the specified user data will be returned.
    [in] DWORD cbBufSize,                      // Buffer size.
    [out,retval] DWORD *pcbRetSize             // Place to store the user data size.
  );  

  HRESULT	GetUserDataType(
    [in] DWORD dwUserDataNumber,               // Specified the user data number, zero-based.
    [out] CC_USER_DATA_TYPE *pType             // The type of a user data
  );
};

// 
typedef struct CC_VIDEO_QUALITY_INFO
{
	CC_QUALITY_MEASURE	Y, U, V;           /// dB
}
CC_VIDEO_QUALITY_INFO;

cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace cinecoder {")
cpp_quote("inline const CC_VIDEO_QUALITY_INFO MK_VIDEO_QUALITY_INFO(CC_QUALITY_MEASURE y, CC_QUALITY_MEASURE u, CC_QUALITY_MEASURE v) { CC_VIDEO_QUALITY_INFO qi={y,u,v}; return qi; }")
cpp_quote("};")
cpp_quote("#endif")

[object, uuid(00002205-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Provides methods for retrieving the video PSNR (quality measure) information of the video frame.
interface ICC_VideoFrameQualityInfo : IUnknown
{                        
  // Retrieves the PSNR value of the video frame.
  // Returns: Returns S_OK if successful or an error value otherwise.
  [propget] HRESULT  PSNR				([out,retval] CC_VIDEO_QUALITY_INFO *pPSNR);
  [propget] HRESULT	 AvgQuantScale      ([out,retval] CC_FLOAT *pQS);
};

[object, uuid(a011f6c3-59ad-4ad9-afe0-4abade61971e), pointer_default(unique), local]
// Interface to control the on-the-fly PSNR calculation for encoders.
interface ICC_PsnrCalculationProp : IUnknown
{                        
  // Property to switch on or off the PSNR calculation.
  [propget] HRESULT  CalculatePSNR		([out,retval] CC_BOOL *pFlag);
  [propput] HRESULT  CalculatePSNR		([in]         CC_BOOL   Flag);
};


interface ICC_VideoProducer;
interface ICC_VideoConsumer;

[object, uuid(00002002-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Provides the methods specific for the general video data producers.
interface ICC_VideoProducer : IUnknown
{
  // Retrieve the current video frame.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetFrame(
    [in] CC_COLOR_FMT Format,               /// The <link CC_COLOR_FMT, color format> of the frame.
    [out,size_is(cbSize)] BYTE *pbVideoData,/// Buffer where the frame data will be stored.
    [in] DWORD cbSize,                      /// The size of the buffer in bytes.
    [in,defaultvalue(0)] INT stride,        /// The stride of a single video row, measured in bytes.
                                            /// A negative stride value means reversed row order
                                            /// (the first row is on the bottom of the frame).
                                            /// If stride=0, the real value is derived from the
                                            /// frame size and frame's <link CC_COLOR_FMT, color format>.
    [out,retval,defaultvalue(NULL)]DWORD *pcbRetSize // The resulting frame size in bytes.
  );

  HRESULT   GetStride(
    [in] CC_COLOR_FMT fmt,
    [out,retval] DWORD *pNumBytes
  );

  HRESULT  IsFormatSupported(
    [in] CC_COLOR_FMT fmt,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Check if the video frame is ready.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   IsFrameAvailable([out,retval,defaultvalue(NULL)]CC_BOOL *pResult);

  // Get the description of the video stream which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoStreamInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  // Get the description of the current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);
};

[object, uuid(00002003-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Provides the methods specific for the generic video data consumer.
interface ICC_VideoConsumer : IUnknown
{
  // Add another frame to the encoder's input queue.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddFrame(
    [in]
    CC_COLOR_FMT Format,                    /// The <link CC_COLOR_FMT, color format> of the frame.

    [in, size_is(cbSize)]
    const BYTE *pData,                      /// Pointer to the frame data.

    [in]
    DWORD cbSize,                           /// The size of the frame in bytes.

    [in,defaultvalue(0)]
    CC_INT stride,                          /// The stride of a single video row, measured in bytes.
                                            /// A negative stride value means that order of rows is reversed
                                            /// (the first row is on the bottom of the frame).
                                            /// If stride is set to zero, the real value is derived from the video
                                            /// consumer settings and frame's <link CC_COLOR_FMT, color format>.
    [out,retval,defaultvalue(NULL)]
    CC_BOOL *pResult                        /// The result of the AddFrame operation.
  );

  HRESULT   GetStride(
    [in] CC_COLOR_FMT fmt,
    [out,retval] DWORD *pNumBytes
  );

  HRESULT  IsFormatSupported(
    [in] CC_COLOR_FMT fmt,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Get the description of the video stream which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoStreamInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  // Get the description of the current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);
};

[object, uuid(00002004-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// Provides the methods specific for the generic video data consumer.
interface ICC_VideoConsumerExt : ICC_VideoConsumer
{
  // Add a frame with different size to the processing queue.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddScaleFrame(
    [in, size_is(cbSize)] const BYTE *pData,// Pointer to the frame data.
    [in] DWORD cbSize,                      // The size of the frame in bytes.
    [in] CC_VIDEO_FRAME_DESCR *pParams,// Frame description structure.
    [out,retval,defaultvalue(NULL)]
    CC_BOOL *pResult                        // The result of the AddFrame operation.
  );

  HRESULT	IsScaleAvailable(
    [in] CC_VIDEO_FRAME_DESCR *pParams,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );
};

[object, uuid(71ac7c0a-7ca3-4774-945b-2b17e955ea01), pointer_default(unique), local]
// Provides the methods specific for the generic video data consumer.
interface ICC_VideoProducerExt : ICC_VideoProducer
{
  // Get a frame into the frame with a different size.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetScaleFrame(
    [out,size_is(cbSize)] BYTE *pbVideoData,/// Buffer where the frame data will be stored.
    [in] DWORD cbSize,                      /// The size of the buffer in bytes.
    [in] CC_VIDEO_FRAME_DESCR *pParams,    /// Frame description structure.
    [out,retval,defaultvalue(NULL)]DWORD *pcbRetSize // The resulting frame size in bytes.
  );

  HRESULT	IsScaleAvailable(
    [in] CC_VIDEO_FRAME_DESCR *pParams,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );
};

[object, uuid(00002005-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The default and main interface to control the instance of CC_MpegVideoDecoder class.
interface ICC_VideoDecoder : ICC_Decoder
{
  // Retrieve the current video frame.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   GetFrame(
    [in] CC_COLOR_FMT Format,               // The <link CC_COLOR_FMT, color format> of the frame.
    [out,size_is(cbSize)] BYTE *pbVideoData,// Buffer for storing the video data
    [in] DWORD cbSize,                      // The size of the buffer in bytes.
    [in,defaultvalue(0)] INT stride,        // The stride of a single video row, measured in bytes.
                                            // A negative stride value means reversed row order
                                            // (the first row is on the bottom of the frame).
                                            // If stride=0, the real value is derived from the
                                            // frame size and frame's <link CC_COLOR_FMT, color format>.
    [out,retval,defaultvalue(NULL)]DWORD *pcbRetSize // The resulting frame size in bytes.
  );

  HRESULT   GetStride(
    [in] CC_COLOR_FMT fmt,
    [out,retval] DWORD *pNumBytes
  );

  HRESULT  IsFormatSupported(
    [in] CC_COLOR_FMT fmt,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Get the description of video stream which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoStreamInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  // Get the description of current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);
};

[object, uuid(00002006-be08-11dc-aa88-005056c00008), pointer_default(unique), local]
// The default and main interface to control the instance of CC_MpegVideoEncoder class.
interface ICC_VideoEncoder : ICC_Encoder
{
  // Add another frame to the encoder's input queue.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddFrame(
    [in]
    CC_COLOR_FMT Format,                    /// The <link CC_COLOR_FMT, color format> of the frame.

    [in, size_is(cbSize)]
    const BYTE *pData,                      /// Pointer to the frame data.

    [in]
    DWORD cbSize,                           /// The size of the frame in bytes.

    [in,defaultvalue(0)]
    INT stride,                             /// The stride of a single video row, measured in bytes.
                                            /// A negative stride value means that order of rows is reversed
                                            /// (the first row is on the bottom of the frame)
                                            /// If stride is set to zero, the real value is derived from the video
                                            /// consumer settings and frame's <link CC_COLOR_FMT, color format>.
    [out,retval,defaultvalue(NULL)]
    CC_BOOL *pResult                        /// The result of the AddFrame operation.
  );

  HRESULT   GetStride(
    [in] CC_COLOR_FMT fmt,
    [out,retval] DWORD *pNumBytes
  );

  HRESULT  IsFormatSupported(
    [in] CC_COLOR_FMT fmt,
    [out,retval,defaultvalue(NULL)] CC_BOOL *pResult
  );

  // Add a frame with different size to the processing queue.
  // Returns: Returns S_OK if successful or an error value otherwise.
  HRESULT   AddScaleFrame(
    [in, size_is(cbSize)] const BYTE *pData,// Pointer to the frame data.
    [in] DWORD cbSize,                      // The size of the frame in bytes.
    [in] CC_ADD_VIDEO_FRAME_PARAMS *pParams,// Frame description structure.
    [out,retval,defaultvalue(NULL)]
    CC_BOOL *pResult                        // The result of the AddFrame operation.
  );

  HRESULT	IsScaleAvailable(
    [in] CC_ADD_VIDEO_FRAME_PARAMS *pParams,
    [out,retval,defaultvalue(NULL)] CC_BOOL*
  );

  // Get the description of video stream which is being decoded.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoStreamInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  // Get the description of current video frame.
  // Returns: Returns S_OK if data is ready, S_FALSE if not or an error value otherwise. 
  HRESULT   GetVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);
};

//-----------------------------------------------------------------------------
[object, uuid(61149ac1-d826-46be-82a9-c7a8fdf19b15), pointer_default(unique), local]
interface ICC_VideoSplitter : ICC_Splitter
//-----------------------------------------------------------------------------
{
  ///<copy ICC_VideoEncoder::GetVideoStreamInfo>
  HRESULT   GetVideoStreamInfo([out,retval] ICC_VideoStreamInfo **pDescr);

  ///<copy ICC_VideoEncoder::GetVideoFrameInfo>
  HRESULT   GetVideoFrameInfo([out,retval] ICC_VideoFrameInfo **pDescr);
};

// Frame Output Orders for video decoders
typedef [v1_enum] enum CC_VDEC_FRAME_OUTPUT_ORDER
{
	CC_DISPLAY_ORDER   = 0,  // Usual mode. The frames will be re-ordered to be in display order before output. Adds some latency.
	CC_CODING_ORDER    = 1,  // Special mode. The decoded frame will be outputted immediately after decoding. No extra latency. App should perform reorder by itself.
}
CC_VDEC_FRAME_OUTPUT_ORDER;

//-----------------------------------------------------------------------------
[object, uuid(dc5e98b4-0c61-4d00-9ee0-2453f7e53ede), pointer_default(unique), local]
interface ICC_VDecFrameOutputOrderProp : IUnknown
//-----------------------------------------------------------------------------
{
  // The frame output order
  [propget] HRESULT   FrameOutputOrder([out,retval] CC_VDEC_FRAME_OUTPUT_ORDER*p);
  [propput] HRESULT   FrameOutputOrder([in]         CC_VDEC_FRAME_OUTPUT_ORDER v);
};

